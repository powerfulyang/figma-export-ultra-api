// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fiber-ent-apollo-pg/ent/anonymoususer"
	"fiber-ent-apollo-pg/ent/exportrecord"
	"fiber-ent-apollo-pg/ent/predicate"
	"fiber-ent-apollo-pg/ent/user"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ExportRecordUpdate is the builder for updating ExportRecord entities.
type ExportRecordUpdate struct {
	config
	hooks    []Hook
	mutation *ExportRecordMutation
}

// Where appends a list predicates to the ExportRecordUpdate builder.
func (_u *ExportRecordUpdate) Where(ps ...predicate.ExportRecord) *ExportRecordUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetFigmaFileID sets the "figma_file_id" field.
func (_u *ExportRecordUpdate) SetFigmaFileID(v string) *ExportRecordUpdate {
	_u.mutation.SetFigmaFileID(v)
	return _u
}

// SetNillableFigmaFileID sets the "figma_file_id" field if the given value is not nil.
func (_u *ExportRecordUpdate) SetNillableFigmaFileID(v *string) *ExportRecordUpdate {
	if v != nil {
		_u.SetFigmaFileID(*v)
	}
	return _u
}

// SetFigmaFileName sets the "figma_file_name" field.
func (_u *ExportRecordUpdate) SetFigmaFileName(v string) *ExportRecordUpdate {
	_u.mutation.SetFigmaFileName(v)
	return _u
}

// SetNillableFigmaFileName sets the "figma_file_name" field if the given value is not nil.
func (_u *ExportRecordUpdate) SetNillableFigmaFileName(v *string) *ExportRecordUpdate {
	if v != nil {
		_u.SetFigmaFileName(*v)
	}
	return _u
}

// ClearFigmaFileName clears the value of the "figma_file_name" field.
func (_u *ExportRecordUpdate) ClearFigmaFileName() *ExportRecordUpdate {
	_u.mutation.ClearFigmaFileName()
	return _u
}

// SetFigmaFileURL sets the "figma_file_url" field.
func (_u *ExportRecordUpdate) SetFigmaFileURL(v string) *ExportRecordUpdate {
	_u.mutation.SetFigmaFileURL(v)
	return _u
}

// SetNillableFigmaFileURL sets the "figma_file_url" field if the given value is not nil.
func (_u *ExportRecordUpdate) SetNillableFigmaFileURL(v *string) *ExportRecordUpdate {
	if v != nil {
		_u.SetFigmaFileURL(*v)
	}
	return _u
}

// ClearFigmaFileURL clears the value of the "figma_file_url" field.
func (_u *ExportRecordUpdate) ClearFigmaFileURL() *ExportRecordUpdate {
	_u.mutation.ClearFigmaFileURL()
	return _u
}

// SetExportFormat sets the "export_format" field.
func (_u *ExportRecordUpdate) SetExportFormat(v exportrecord.ExportFormat) *ExportRecordUpdate {
	_u.mutation.SetExportFormat(v)
	return _u
}

// SetNillableExportFormat sets the "export_format" field if the given value is not nil.
func (_u *ExportRecordUpdate) SetNillableExportFormat(v *exportrecord.ExportFormat) *ExportRecordUpdate {
	if v != nil {
		_u.SetExportFormat(*v)
	}
	return _u
}

// SetExportScale sets the "export_scale" field.
func (_u *ExportRecordUpdate) SetExportScale(v string) *ExportRecordUpdate {
	_u.mutation.SetExportScale(v)
	return _u
}

// SetNillableExportScale sets the "export_scale" field if the given value is not nil.
func (_u *ExportRecordUpdate) SetNillableExportScale(v *string) *ExportRecordUpdate {
	if v != nil {
		_u.SetExportScale(*v)
	}
	return _u
}

// SetExportSettings sets the "export_settings" field.
func (_u *ExportRecordUpdate) SetExportSettings(v map[string]interface{}) *ExportRecordUpdate {
	_u.mutation.SetExportSettings(v)
	return _u
}

// SetSelectedNodes sets the "selected_nodes" field.
func (_u *ExportRecordUpdate) SetSelectedNodes(v []string) *ExportRecordUpdate {
	_u.mutation.SetSelectedNodes(v)
	return _u
}

// AppendSelectedNodes appends value to the "selected_nodes" field.
func (_u *ExportRecordUpdate) AppendSelectedNodes(v []string) *ExportRecordUpdate {
	_u.mutation.AppendSelectedNodes(v)
	return _u
}

// ClearSelectedNodes clears the value of the "selected_nodes" field.
func (_u *ExportRecordUpdate) ClearSelectedNodes() *ExportRecordUpdate {
	_u.mutation.ClearSelectedNodes()
	return _u
}

// SetTotalAssets sets the "total_assets" field.
func (_u *ExportRecordUpdate) SetTotalAssets(v int) *ExportRecordUpdate {
	_u.mutation.ResetTotalAssets()
	_u.mutation.SetTotalAssets(v)
	return _u
}

// SetNillableTotalAssets sets the "total_assets" field if the given value is not nil.
func (_u *ExportRecordUpdate) SetNillableTotalAssets(v *int) *ExportRecordUpdate {
	if v != nil {
		_u.SetTotalAssets(*v)
	}
	return _u
}

// AddTotalAssets adds value to the "total_assets" field.
func (_u *ExportRecordUpdate) AddTotalAssets(v int) *ExportRecordUpdate {
	_u.mutation.AddTotalAssets(v)
	return _u
}

// SetExportedAssets sets the "exported_assets" field.
func (_u *ExportRecordUpdate) SetExportedAssets(v int) *ExportRecordUpdate {
	_u.mutation.ResetExportedAssets()
	_u.mutation.SetExportedAssets(v)
	return _u
}

// SetNillableExportedAssets sets the "exported_assets" field if the given value is not nil.
func (_u *ExportRecordUpdate) SetNillableExportedAssets(v *int) *ExportRecordUpdate {
	if v != nil {
		_u.SetExportedAssets(*v)
	}
	return _u
}

// AddExportedAssets adds value to the "exported_assets" field.
func (_u *ExportRecordUpdate) AddExportedAssets(v int) *ExportRecordUpdate {
	_u.mutation.AddExportedAssets(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *ExportRecordUpdate) SetStatus(v exportrecord.Status) *ExportRecordUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ExportRecordUpdate) SetNillableStatus(v *exportrecord.Status) *ExportRecordUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetDownloadURL sets the "download_url" field.
func (_u *ExportRecordUpdate) SetDownloadURL(v string) *ExportRecordUpdate {
	_u.mutation.SetDownloadURL(v)
	return _u
}

// SetNillableDownloadURL sets the "download_url" field if the given value is not nil.
func (_u *ExportRecordUpdate) SetNillableDownloadURL(v *string) *ExportRecordUpdate {
	if v != nil {
		_u.SetDownloadURL(*v)
	}
	return _u
}

// ClearDownloadURL clears the value of the "download_url" field.
func (_u *ExportRecordUpdate) ClearDownloadURL() *ExportRecordUpdate {
	_u.mutation.ClearDownloadURL()
	return _u
}

// SetErrorMessage sets the "error_message" field.
func (_u *ExportRecordUpdate) SetErrorMessage(v string) *ExportRecordUpdate {
	_u.mutation.SetErrorMessage(v)
	return _u
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (_u *ExportRecordUpdate) SetNillableErrorMessage(v *string) *ExportRecordUpdate {
	if v != nil {
		_u.SetErrorMessage(*v)
	}
	return _u
}

// ClearErrorMessage clears the value of the "error_message" field.
func (_u *ExportRecordUpdate) ClearErrorMessage() *ExportRecordUpdate {
	_u.mutation.ClearErrorMessage()
	return _u
}

// SetIPAddress sets the "ip_address" field.
func (_u *ExportRecordUpdate) SetIPAddress(v string) *ExportRecordUpdate {
	_u.mutation.SetIPAddress(v)
	return _u
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_u *ExportRecordUpdate) SetNillableIPAddress(v *string) *ExportRecordUpdate {
	if v != nil {
		_u.SetIPAddress(*v)
	}
	return _u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (_u *ExportRecordUpdate) ClearIPAddress() *ExportRecordUpdate {
	_u.mutation.ClearIPAddress()
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *ExportRecordUpdate) SetUserAgent(v string) *ExportRecordUpdate {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *ExportRecordUpdate) SetNillableUserAgent(v *string) *ExportRecordUpdate {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *ExportRecordUpdate) ClearUserAgent() *ExportRecordUpdate {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetStartedAt sets the "started_at" field.
func (_u *ExportRecordUpdate) SetStartedAt(v time.Time) *ExportRecordUpdate {
	_u.mutation.SetStartedAt(v)
	return _u
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (_u *ExportRecordUpdate) SetNillableStartedAt(v *time.Time) *ExportRecordUpdate {
	if v != nil {
		_u.SetStartedAt(*v)
	}
	return _u
}

// ClearStartedAt clears the value of the "started_at" field.
func (_u *ExportRecordUpdate) ClearStartedAt() *ExportRecordUpdate {
	_u.mutation.ClearStartedAt()
	return _u
}

// SetCompletedAt sets the "completed_at" field.
func (_u *ExportRecordUpdate) SetCompletedAt(v time.Time) *ExportRecordUpdate {
	_u.mutation.SetCompletedAt(v)
	return _u
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (_u *ExportRecordUpdate) SetNillableCompletedAt(v *time.Time) *ExportRecordUpdate {
	if v != nil {
		_u.SetCompletedAt(*v)
	}
	return _u
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (_u *ExportRecordUpdate) ClearCompletedAt() *ExportRecordUpdate {
	_u.mutation.ClearCompletedAt()
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *ExportRecordUpdate) SetExpiresAt(v time.Time) *ExportRecordUpdate {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *ExportRecordUpdate) SetNillableExpiresAt(v *time.Time) *ExportRecordUpdate {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (_u *ExportRecordUpdate) ClearExpiresAt() *ExportRecordUpdate {
	_u.mutation.ClearExpiresAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ExportRecordUpdate) SetUpdatedAt(v time.Time) *ExportRecordUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *ExportRecordUpdate) SetUserID(id uuid.UUID) *ExportRecordUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_u *ExportRecordUpdate) SetNillableUserID(id *uuid.UUID) *ExportRecordUpdate {
	if id != nil {
		_u = _u.SetUserID(*id)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *ExportRecordUpdate) SetUser(v *User) *ExportRecordUpdate {
	return _u.SetUserID(v.ID)
}

// SetAnonymousUserID sets the "anonymous_user" edge to the AnonymousUser entity by ID.
func (_u *ExportRecordUpdate) SetAnonymousUserID(id uuid.UUID) *ExportRecordUpdate {
	_u.mutation.SetAnonymousUserID(id)
	return _u
}

// SetNillableAnonymousUserID sets the "anonymous_user" edge to the AnonymousUser entity by ID if the given value is not nil.
func (_u *ExportRecordUpdate) SetNillableAnonymousUserID(id *uuid.UUID) *ExportRecordUpdate {
	if id != nil {
		_u = _u.SetAnonymousUserID(*id)
	}
	return _u
}

// SetAnonymousUser sets the "anonymous_user" edge to the AnonymousUser entity.
func (_u *ExportRecordUpdate) SetAnonymousUser(v *AnonymousUser) *ExportRecordUpdate {
	return _u.SetAnonymousUserID(v.ID)
}

// Mutation returns the ExportRecordMutation object of the builder.
func (_u *ExportRecordUpdate) Mutation() *ExportRecordMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *ExportRecordUpdate) ClearUser() *ExportRecordUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearAnonymousUser clears the "anonymous_user" edge to the AnonymousUser entity.
func (_u *ExportRecordUpdate) ClearAnonymousUser() *ExportRecordUpdate {
	_u.mutation.ClearAnonymousUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ExportRecordUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ExportRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ExportRecordUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ExportRecordUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ExportRecordUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := exportrecord.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ExportRecordUpdate) check() error {
	if v, ok := _u.mutation.FigmaFileID(); ok {
		if err := exportrecord.FigmaFileIDValidator(v); err != nil {
			return &ValidationError{Name: "figma_file_id", err: fmt.Errorf(`ent: validator failed for field "ExportRecord.figma_file_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ExportFormat(); ok {
		if err := exportrecord.ExportFormatValidator(v); err != nil {
			return &ValidationError{Name: "export_format", err: fmt.Errorf(`ent: validator failed for field "ExportRecord.export_format": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := exportrecord.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ExportRecord.status": %w`, err)}
		}
	}
	return nil
}

func (_u *ExportRecordUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(exportrecord.Table, exportrecord.Columns, sqlgraph.NewFieldSpec(exportrecord.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.FigmaFileID(); ok {
		_spec.SetField(exportrecord.FieldFigmaFileID, field.TypeString, value)
	}
	if value, ok := _u.mutation.FigmaFileName(); ok {
		_spec.SetField(exportrecord.FieldFigmaFileName, field.TypeString, value)
	}
	if _u.mutation.FigmaFileNameCleared() {
		_spec.ClearField(exportrecord.FieldFigmaFileName, field.TypeString)
	}
	if value, ok := _u.mutation.FigmaFileURL(); ok {
		_spec.SetField(exportrecord.FieldFigmaFileURL, field.TypeString, value)
	}
	if _u.mutation.FigmaFileURLCleared() {
		_spec.ClearField(exportrecord.FieldFigmaFileURL, field.TypeString)
	}
	if value, ok := _u.mutation.ExportFormat(); ok {
		_spec.SetField(exportrecord.FieldExportFormat, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ExportScale(); ok {
		_spec.SetField(exportrecord.FieldExportScale, field.TypeString, value)
	}
	if value, ok := _u.mutation.ExportSettings(); ok {
		_spec.SetField(exportrecord.FieldExportSettings, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.SelectedNodes(); ok {
		_spec.SetField(exportrecord.FieldSelectedNodes, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedSelectedNodes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exportrecord.FieldSelectedNodes, value)
		})
	}
	if _u.mutation.SelectedNodesCleared() {
		_spec.ClearField(exportrecord.FieldSelectedNodes, field.TypeJSON)
	}
	if value, ok := _u.mutation.TotalAssets(); ok {
		_spec.SetField(exportrecord.FieldTotalAssets, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTotalAssets(); ok {
		_spec.AddField(exportrecord.FieldTotalAssets, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ExportedAssets(); ok {
		_spec.SetField(exportrecord.FieldExportedAssets, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedExportedAssets(); ok {
		_spec.AddField(exportrecord.FieldExportedAssets, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(exportrecord.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.DownloadURL(); ok {
		_spec.SetField(exportrecord.FieldDownloadURL, field.TypeString, value)
	}
	if _u.mutation.DownloadURLCleared() {
		_spec.ClearField(exportrecord.FieldDownloadURL, field.TypeString)
	}
	if value, ok := _u.mutation.ErrorMessage(); ok {
		_spec.SetField(exportrecord.FieldErrorMessage, field.TypeString, value)
	}
	if _u.mutation.ErrorMessageCleared() {
		_spec.ClearField(exportrecord.FieldErrorMessage, field.TypeString)
	}
	if value, ok := _u.mutation.IPAddress(); ok {
		_spec.SetField(exportrecord.FieldIPAddress, field.TypeString, value)
	}
	if _u.mutation.IPAddressCleared() {
		_spec.ClearField(exportrecord.FieldIPAddress, field.TypeString)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(exportrecord.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(exportrecord.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.StartedAt(); ok {
		_spec.SetField(exportrecord.FieldStartedAt, field.TypeTime, value)
	}
	if _u.mutation.StartedAtCleared() {
		_spec.ClearField(exportrecord.FieldStartedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CompletedAt(); ok {
		_spec.SetField(exportrecord.FieldCompletedAt, field.TypeTime, value)
	}
	if _u.mutation.CompletedAtCleared() {
		_spec.ClearField(exportrecord.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(exportrecord.FieldExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.ExpiresAtCleared() {
		_spec.ClearField(exportrecord.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(exportrecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exportrecord.UserTable,
			Columns: []string{exportrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exportrecord.UserTable,
			Columns: []string{exportrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AnonymousUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exportrecord.AnonymousUserTable,
			Columns: []string{exportrecord.AnonymousUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(anonymoususer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AnonymousUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exportrecord.AnonymousUserTable,
			Columns: []string{exportrecord.AnonymousUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(anonymoususer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exportrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ExportRecordUpdateOne is the builder for updating a single ExportRecord entity.
type ExportRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExportRecordMutation
}

// SetFigmaFileID sets the "figma_file_id" field.
func (_u *ExportRecordUpdateOne) SetFigmaFileID(v string) *ExportRecordUpdateOne {
	_u.mutation.SetFigmaFileID(v)
	return _u
}

// SetNillableFigmaFileID sets the "figma_file_id" field if the given value is not nil.
func (_u *ExportRecordUpdateOne) SetNillableFigmaFileID(v *string) *ExportRecordUpdateOne {
	if v != nil {
		_u.SetFigmaFileID(*v)
	}
	return _u
}

// SetFigmaFileName sets the "figma_file_name" field.
func (_u *ExportRecordUpdateOne) SetFigmaFileName(v string) *ExportRecordUpdateOne {
	_u.mutation.SetFigmaFileName(v)
	return _u
}

// SetNillableFigmaFileName sets the "figma_file_name" field if the given value is not nil.
func (_u *ExportRecordUpdateOne) SetNillableFigmaFileName(v *string) *ExportRecordUpdateOne {
	if v != nil {
		_u.SetFigmaFileName(*v)
	}
	return _u
}

// ClearFigmaFileName clears the value of the "figma_file_name" field.
func (_u *ExportRecordUpdateOne) ClearFigmaFileName() *ExportRecordUpdateOne {
	_u.mutation.ClearFigmaFileName()
	return _u
}

// SetFigmaFileURL sets the "figma_file_url" field.
func (_u *ExportRecordUpdateOne) SetFigmaFileURL(v string) *ExportRecordUpdateOne {
	_u.mutation.SetFigmaFileURL(v)
	return _u
}

// SetNillableFigmaFileURL sets the "figma_file_url" field if the given value is not nil.
func (_u *ExportRecordUpdateOne) SetNillableFigmaFileURL(v *string) *ExportRecordUpdateOne {
	if v != nil {
		_u.SetFigmaFileURL(*v)
	}
	return _u
}

// ClearFigmaFileURL clears the value of the "figma_file_url" field.
func (_u *ExportRecordUpdateOne) ClearFigmaFileURL() *ExportRecordUpdateOne {
	_u.mutation.ClearFigmaFileURL()
	return _u
}

// SetExportFormat sets the "export_format" field.
func (_u *ExportRecordUpdateOne) SetExportFormat(v exportrecord.ExportFormat) *ExportRecordUpdateOne {
	_u.mutation.SetExportFormat(v)
	return _u
}

// SetNillableExportFormat sets the "export_format" field if the given value is not nil.
func (_u *ExportRecordUpdateOne) SetNillableExportFormat(v *exportrecord.ExportFormat) *ExportRecordUpdateOne {
	if v != nil {
		_u.SetExportFormat(*v)
	}
	return _u
}

// SetExportScale sets the "export_scale" field.
func (_u *ExportRecordUpdateOne) SetExportScale(v string) *ExportRecordUpdateOne {
	_u.mutation.SetExportScale(v)
	return _u
}

// SetNillableExportScale sets the "export_scale" field if the given value is not nil.
func (_u *ExportRecordUpdateOne) SetNillableExportScale(v *string) *ExportRecordUpdateOne {
	if v != nil {
		_u.SetExportScale(*v)
	}
	return _u
}

// SetExportSettings sets the "export_settings" field.
func (_u *ExportRecordUpdateOne) SetExportSettings(v map[string]interface{}) *ExportRecordUpdateOne {
	_u.mutation.SetExportSettings(v)
	return _u
}

// SetSelectedNodes sets the "selected_nodes" field.
func (_u *ExportRecordUpdateOne) SetSelectedNodes(v []string) *ExportRecordUpdateOne {
	_u.mutation.SetSelectedNodes(v)
	return _u
}

// AppendSelectedNodes appends value to the "selected_nodes" field.
func (_u *ExportRecordUpdateOne) AppendSelectedNodes(v []string) *ExportRecordUpdateOne {
	_u.mutation.AppendSelectedNodes(v)
	return _u
}

// ClearSelectedNodes clears the value of the "selected_nodes" field.
func (_u *ExportRecordUpdateOne) ClearSelectedNodes() *ExportRecordUpdateOne {
	_u.mutation.ClearSelectedNodes()
	return _u
}

// SetTotalAssets sets the "total_assets" field.
func (_u *ExportRecordUpdateOne) SetTotalAssets(v int) *ExportRecordUpdateOne {
	_u.mutation.ResetTotalAssets()
	_u.mutation.SetTotalAssets(v)
	return _u
}

// SetNillableTotalAssets sets the "total_assets" field if the given value is not nil.
func (_u *ExportRecordUpdateOne) SetNillableTotalAssets(v *int) *ExportRecordUpdateOne {
	if v != nil {
		_u.SetTotalAssets(*v)
	}
	return _u
}

// AddTotalAssets adds value to the "total_assets" field.
func (_u *ExportRecordUpdateOne) AddTotalAssets(v int) *ExportRecordUpdateOne {
	_u.mutation.AddTotalAssets(v)
	return _u
}

// SetExportedAssets sets the "exported_assets" field.
func (_u *ExportRecordUpdateOne) SetExportedAssets(v int) *ExportRecordUpdateOne {
	_u.mutation.ResetExportedAssets()
	_u.mutation.SetExportedAssets(v)
	return _u
}

// SetNillableExportedAssets sets the "exported_assets" field if the given value is not nil.
func (_u *ExportRecordUpdateOne) SetNillableExportedAssets(v *int) *ExportRecordUpdateOne {
	if v != nil {
		_u.SetExportedAssets(*v)
	}
	return _u
}

// AddExportedAssets adds value to the "exported_assets" field.
func (_u *ExportRecordUpdateOne) AddExportedAssets(v int) *ExportRecordUpdateOne {
	_u.mutation.AddExportedAssets(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *ExportRecordUpdateOne) SetStatus(v exportrecord.Status) *ExportRecordUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ExportRecordUpdateOne) SetNillableStatus(v *exportrecord.Status) *ExportRecordUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetDownloadURL sets the "download_url" field.
func (_u *ExportRecordUpdateOne) SetDownloadURL(v string) *ExportRecordUpdateOne {
	_u.mutation.SetDownloadURL(v)
	return _u
}

// SetNillableDownloadURL sets the "download_url" field if the given value is not nil.
func (_u *ExportRecordUpdateOne) SetNillableDownloadURL(v *string) *ExportRecordUpdateOne {
	if v != nil {
		_u.SetDownloadURL(*v)
	}
	return _u
}

// ClearDownloadURL clears the value of the "download_url" field.
func (_u *ExportRecordUpdateOne) ClearDownloadURL() *ExportRecordUpdateOne {
	_u.mutation.ClearDownloadURL()
	return _u
}

// SetErrorMessage sets the "error_message" field.
func (_u *ExportRecordUpdateOne) SetErrorMessage(v string) *ExportRecordUpdateOne {
	_u.mutation.SetErrorMessage(v)
	return _u
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (_u *ExportRecordUpdateOne) SetNillableErrorMessage(v *string) *ExportRecordUpdateOne {
	if v != nil {
		_u.SetErrorMessage(*v)
	}
	return _u
}

// ClearErrorMessage clears the value of the "error_message" field.
func (_u *ExportRecordUpdateOne) ClearErrorMessage() *ExportRecordUpdateOne {
	_u.mutation.ClearErrorMessage()
	return _u
}

// SetIPAddress sets the "ip_address" field.
func (_u *ExportRecordUpdateOne) SetIPAddress(v string) *ExportRecordUpdateOne {
	_u.mutation.SetIPAddress(v)
	return _u
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_u *ExportRecordUpdateOne) SetNillableIPAddress(v *string) *ExportRecordUpdateOne {
	if v != nil {
		_u.SetIPAddress(*v)
	}
	return _u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (_u *ExportRecordUpdateOne) ClearIPAddress() *ExportRecordUpdateOne {
	_u.mutation.ClearIPAddress()
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *ExportRecordUpdateOne) SetUserAgent(v string) *ExportRecordUpdateOne {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *ExportRecordUpdateOne) SetNillableUserAgent(v *string) *ExportRecordUpdateOne {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *ExportRecordUpdateOne) ClearUserAgent() *ExportRecordUpdateOne {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetStartedAt sets the "started_at" field.
func (_u *ExportRecordUpdateOne) SetStartedAt(v time.Time) *ExportRecordUpdateOne {
	_u.mutation.SetStartedAt(v)
	return _u
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (_u *ExportRecordUpdateOne) SetNillableStartedAt(v *time.Time) *ExportRecordUpdateOne {
	if v != nil {
		_u.SetStartedAt(*v)
	}
	return _u
}

// ClearStartedAt clears the value of the "started_at" field.
func (_u *ExportRecordUpdateOne) ClearStartedAt() *ExportRecordUpdateOne {
	_u.mutation.ClearStartedAt()
	return _u
}

// SetCompletedAt sets the "completed_at" field.
func (_u *ExportRecordUpdateOne) SetCompletedAt(v time.Time) *ExportRecordUpdateOne {
	_u.mutation.SetCompletedAt(v)
	return _u
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (_u *ExportRecordUpdateOne) SetNillableCompletedAt(v *time.Time) *ExportRecordUpdateOne {
	if v != nil {
		_u.SetCompletedAt(*v)
	}
	return _u
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (_u *ExportRecordUpdateOne) ClearCompletedAt() *ExportRecordUpdateOne {
	_u.mutation.ClearCompletedAt()
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *ExportRecordUpdateOne) SetExpiresAt(v time.Time) *ExportRecordUpdateOne {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *ExportRecordUpdateOne) SetNillableExpiresAt(v *time.Time) *ExportRecordUpdateOne {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (_u *ExportRecordUpdateOne) ClearExpiresAt() *ExportRecordUpdateOne {
	_u.mutation.ClearExpiresAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ExportRecordUpdateOne) SetUpdatedAt(v time.Time) *ExportRecordUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *ExportRecordUpdateOne) SetUserID(id uuid.UUID) *ExportRecordUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_u *ExportRecordUpdateOne) SetNillableUserID(id *uuid.UUID) *ExportRecordUpdateOne {
	if id != nil {
		_u = _u.SetUserID(*id)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *ExportRecordUpdateOne) SetUser(v *User) *ExportRecordUpdateOne {
	return _u.SetUserID(v.ID)
}

// SetAnonymousUserID sets the "anonymous_user" edge to the AnonymousUser entity by ID.
func (_u *ExportRecordUpdateOne) SetAnonymousUserID(id uuid.UUID) *ExportRecordUpdateOne {
	_u.mutation.SetAnonymousUserID(id)
	return _u
}

// SetNillableAnonymousUserID sets the "anonymous_user" edge to the AnonymousUser entity by ID if the given value is not nil.
func (_u *ExportRecordUpdateOne) SetNillableAnonymousUserID(id *uuid.UUID) *ExportRecordUpdateOne {
	if id != nil {
		_u = _u.SetAnonymousUserID(*id)
	}
	return _u
}

// SetAnonymousUser sets the "anonymous_user" edge to the AnonymousUser entity.
func (_u *ExportRecordUpdateOne) SetAnonymousUser(v *AnonymousUser) *ExportRecordUpdateOne {
	return _u.SetAnonymousUserID(v.ID)
}

// Mutation returns the ExportRecordMutation object of the builder.
func (_u *ExportRecordUpdateOne) Mutation() *ExportRecordMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *ExportRecordUpdateOne) ClearUser() *ExportRecordUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearAnonymousUser clears the "anonymous_user" edge to the AnonymousUser entity.
func (_u *ExportRecordUpdateOne) ClearAnonymousUser() *ExportRecordUpdateOne {
	_u.mutation.ClearAnonymousUser()
	return _u
}

// Where appends a list predicates to the ExportRecordUpdate builder.
func (_u *ExportRecordUpdateOne) Where(ps ...predicate.ExportRecord) *ExportRecordUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ExportRecordUpdateOne) Select(field string, fields ...string) *ExportRecordUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ExportRecord entity.
func (_u *ExportRecordUpdateOne) Save(ctx context.Context) (*ExportRecord, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ExportRecordUpdateOne) SaveX(ctx context.Context) *ExportRecord {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ExportRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ExportRecordUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ExportRecordUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := exportrecord.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ExportRecordUpdateOne) check() error {
	if v, ok := _u.mutation.FigmaFileID(); ok {
		if err := exportrecord.FigmaFileIDValidator(v); err != nil {
			return &ValidationError{Name: "figma_file_id", err: fmt.Errorf(`ent: validator failed for field "ExportRecord.figma_file_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ExportFormat(); ok {
		if err := exportrecord.ExportFormatValidator(v); err != nil {
			return &ValidationError{Name: "export_format", err: fmt.Errorf(`ent: validator failed for field "ExportRecord.export_format": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := exportrecord.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ExportRecord.status": %w`, err)}
		}
	}
	return nil
}

func (_u *ExportRecordUpdateOne) sqlSave(ctx context.Context) (_node *ExportRecord, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(exportrecord.Table, exportrecord.Columns, sqlgraph.NewFieldSpec(exportrecord.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExportRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exportrecord.FieldID)
		for _, f := range fields {
			if !exportrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exportrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.FigmaFileID(); ok {
		_spec.SetField(exportrecord.FieldFigmaFileID, field.TypeString, value)
	}
	if value, ok := _u.mutation.FigmaFileName(); ok {
		_spec.SetField(exportrecord.FieldFigmaFileName, field.TypeString, value)
	}
	if _u.mutation.FigmaFileNameCleared() {
		_spec.ClearField(exportrecord.FieldFigmaFileName, field.TypeString)
	}
	if value, ok := _u.mutation.FigmaFileURL(); ok {
		_spec.SetField(exportrecord.FieldFigmaFileURL, field.TypeString, value)
	}
	if _u.mutation.FigmaFileURLCleared() {
		_spec.ClearField(exportrecord.FieldFigmaFileURL, field.TypeString)
	}
	if value, ok := _u.mutation.ExportFormat(); ok {
		_spec.SetField(exportrecord.FieldExportFormat, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ExportScale(); ok {
		_spec.SetField(exportrecord.FieldExportScale, field.TypeString, value)
	}
	if value, ok := _u.mutation.ExportSettings(); ok {
		_spec.SetField(exportrecord.FieldExportSettings, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.SelectedNodes(); ok {
		_spec.SetField(exportrecord.FieldSelectedNodes, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedSelectedNodes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exportrecord.FieldSelectedNodes, value)
		})
	}
	if _u.mutation.SelectedNodesCleared() {
		_spec.ClearField(exportrecord.FieldSelectedNodes, field.TypeJSON)
	}
	if value, ok := _u.mutation.TotalAssets(); ok {
		_spec.SetField(exportrecord.FieldTotalAssets, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTotalAssets(); ok {
		_spec.AddField(exportrecord.FieldTotalAssets, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ExportedAssets(); ok {
		_spec.SetField(exportrecord.FieldExportedAssets, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedExportedAssets(); ok {
		_spec.AddField(exportrecord.FieldExportedAssets, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(exportrecord.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.DownloadURL(); ok {
		_spec.SetField(exportrecord.FieldDownloadURL, field.TypeString, value)
	}
	if _u.mutation.DownloadURLCleared() {
		_spec.ClearField(exportrecord.FieldDownloadURL, field.TypeString)
	}
	if value, ok := _u.mutation.ErrorMessage(); ok {
		_spec.SetField(exportrecord.FieldErrorMessage, field.TypeString, value)
	}
	if _u.mutation.ErrorMessageCleared() {
		_spec.ClearField(exportrecord.FieldErrorMessage, field.TypeString)
	}
	if value, ok := _u.mutation.IPAddress(); ok {
		_spec.SetField(exportrecord.FieldIPAddress, field.TypeString, value)
	}
	if _u.mutation.IPAddressCleared() {
		_spec.ClearField(exportrecord.FieldIPAddress, field.TypeString)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(exportrecord.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(exportrecord.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.StartedAt(); ok {
		_spec.SetField(exportrecord.FieldStartedAt, field.TypeTime, value)
	}
	if _u.mutation.StartedAtCleared() {
		_spec.ClearField(exportrecord.FieldStartedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CompletedAt(); ok {
		_spec.SetField(exportrecord.FieldCompletedAt, field.TypeTime, value)
	}
	if _u.mutation.CompletedAtCleared() {
		_spec.ClearField(exportrecord.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(exportrecord.FieldExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.ExpiresAtCleared() {
		_spec.ClearField(exportrecord.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(exportrecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exportrecord.UserTable,
			Columns: []string{exportrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exportrecord.UserTable,
			Columns: []string{exportrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AnonymousUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exportrecord.AnonymousUserTable,
			Columns: []string{exportrecord.AnonymousUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(anonymoususer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AnonymousUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exportrecord.AnonymousUserTable,
			Columns: []string{exportrecord.AnonymousUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(anonymoususer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ExportRecord{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exportrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
