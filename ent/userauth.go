// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fiber-ent-apollo-pg/ent/user"
	"fiber-ent-apollo-pg/ent/userauth"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// UserAuth is the model entity for the UserAuth schema.
type UserAuth struct {
	config `json:"-"`
	// ID of the ent.
	// 认证记录唯一标识
	ID uuid.UUID `json:"id,omitempty"`
	// 认证方式类型
	AuthType userauth.AuthType `json:"auth_type,omitempty"`
	// 认证标识符，如邮箱、第三方用户ID等
	Identifier string `json:"identifier,omitempty"`
	// 认证凭据，如密码哈希、token等
	Credential string `json:"credential,omitempty"`
	// 第三方平台的用户ID
	ProviderUserID string `json:"provider_user_id,omitempty"`
	// 第三方平台的用户名
	ProviderUsername string `json:"provider_username,omitempty"`
	// 第三方平台的邮箱
	ProviderEmail string `json:"provider_email,omitempty"`
	// 第三方平台的头像
	ProviderAvatar string `json:"provider_avatar,omitempty"`
	// 第三方平台的完整用户信息
	ProviderData map[string]interface{} `json:"provider_data,omitempty"`
	// 第三方平台的访问令牌
	AccessToken string `json:"access_token,omitempty"`
	// 第三方平台的刷新令牌
	RefreshToken string `json:"refresh_token,omitempty"`
	// 令牌过期时间
	TokenExpiresAt time.Time `json:"token_expires_at,omitempty"`
	// 是否为主要认证方式
	IsPrimary bool `json:"is_primary,omitempty"`
	// 是否启用
	IsEnabled bool `json:"is_enabled,omitempty"`
	// 最后使用时间
	LastUsedAt time.Time `json:"last_used_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserAuthQuery when eager-loading is set.
	Edges             UserAuthEdges `json:"edges"`
	user_auth_methods *uuid.UUID
	selectValues      sql.SelectValues
}

// UserAuthEdges holds the relations/edges for other nodes in the graph.
type UserAuthEdges struct {
	// 所属用户
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserAuthEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserAuth) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userauth.FieldProviderData:
			values[i] = new([]byte)
		case userauth.FieldIsPrimary, userauth.FieldIsEnabled:
			values[i] = new(sql.NullBool)
		case userauth.FieldAuthType, userauth.FieldIdentifier, userauth.FieldCredential, userauth.FieldProviderUserID, userauth.FieldProviderUsername, userauth.FieldProviderEmail, userauth.FieldProviderAvatar, userauth.FieldAccessToken, userauth.FieldRefreshToken:
			values[i] = new(sql.NullString)
		case userauth.FieldTokenExpiresAt, userauth.FieldLastUsedAt, userauth.FieldCreatedAt, userauth.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case userauth.FieldID:
			values[i] = new(uuid.UUID)
		case userauth.ForeignKeys[0]: // user_auth_methods
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserAuth fields.
func (_m *UserAuth) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userauth.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case userauth.FieldAuthType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auth_type", values[i])
			} else if value.Valid {
				_m.AuthType = userauth.AuthType(value.String)
			}
		case userauth.FieldIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identifier", values[i])
			} else if value.Valid {
				_m.Identifier = value.String
			}
		case userauth.FieldCredential:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field credential", values[i])
			} else if value.Valid {
				_m.Credential = value.String
			}
		case userauth.FieldProviderUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_user_id", values[i])
			} else if value.Valid {
				_m.ProviderUserID = value.String
			}
		case userauth.FieldProviderUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_username", values[i])
			} else if value.Valid {
				_m.ProviderUsername = value.String
			}
		case userauth.FieldProviderEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_email", values[i])
			} else if value.Valid {
				_m.ProviderEmail = value.String
			}
		case userauth.FieldProviderAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_avatar", values[i])
			} else if value.Valid {
				_m.ProviderAvatar = value.String
			}
		case userauth.FieldProviderData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field provider_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.ProviderData); err != nil {
					return fmt.Errorf("unmarshal field provider_data: %w", err)
				}
			}
		case userauth.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				_m.AccessToken = value.String
			}
		case userauth.FieldRefreshToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_token", values[i])
			} else if value.Valid {
				_m.RefreshToken = value.String
			}
		case userauth.FieldTokenExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field token_expires_at", values[i])
			} else if value.Valid {
				_m.TokenExpiresAt = value.Time
			}
		case userauth.FieldIsPrimary:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_primary", values[i])
			} else if value.Valid {
				_m.IsPrimary = value.Bool
			}
		case userauth.FieldIsEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_enabled", values[i])
			} else if value.Valid {
				_m.IsEnabled = value.Bool
			}
		case userauth.FieldLastUsedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_used_at", values[i])
			} else if value.Valid {
				_m.LastUsedAt = value.Time
			}
		case userauth.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case userauth.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case userauth.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_auth_methods", values[i])
			} else if value.Valid {
				_m.user_auth_methods = new(uuid.UUID)
				*_m.user_auth_methods = *value.S.(*uuid.UUID)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserAuth.
// This includes values selected through modifiers, order, etc.
func (_m *UserAuth) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserAuth entity.
func (_m *UserAuth) QueryUser() *UserQuery {
	return NewUserAuthClient(_m.config).QueryUser(_m)
}

// Update returns a builder for updating this UserAuth.
// Note that you need to call UserAuth.Unwrap() before calling this method if this UserAuth
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *UserAuth) Update() *UserAuthUpdateOne {
	return NewUserAuthClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the UserAuth entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *UserAuth) Unwrap() *UserAuth {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserAuth is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *UserAuth) String() string {
	var builder strings.Builder
	builder.WriteString("UserAuth(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("auth_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.AuthType))
	builder.WriteString(", ")
	builder.WriteString("identifier=")
	builder.WriteString(_m.Identifier)
	builder.WriteString(", ")
	builder.WriteString("credential=")
	builder.WriteString(_m.Credential)
	builder.WriteString(", ")
	builder.WriteString("provider_user_id=")
	builder.WriteString(_m.ProviderUserID)
	builder.WriteString(", ")
	builder.WriteString("provider_username=")
	builder.WriteString(_m.ProviderUsername)
	builder.WriteString(", ")
	builder.WriteString("provider_email=")
	builder.WriteString(_m.ProviderEmail)
	builder.WriteString(", ")
	builder.WriteString("provider_avatar=")
	builder.WriteString(_m.ProviderAvatar)
	builder.WriteString(", ")
	builder.WriteString("provider_data=")
	builder.WriteString(fmt.Sprintf("%v", _m.ProviderData))
	builder.WriteString(", ")
	builder.WriteString("access_token=")
	builder.WriteString(_m.AccessToken)
	builder.WriteString(", ")
	builder.WriteString("refresh_token=")
	builder.WriteString(_m.RefreshToken)
	builder.WriteString(", ")
	builder.WriteString("token_expires_at=")
	builder.WriteString(_m.TokenExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_primary=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsPrimary))
	builder.WriteString(", ")
	builder.WriteString("is_enabled=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsEnabled))
	builder.WriteString(", ")
	builder.WriteString("last_used_at=")
	builder.WriteString(_m.LastUsedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserAuths is a parsable slice of UserAuth.
type UserAuths []*UserAuth
