// Code generated by ent, DO NOT EDIT.

package exportrecord

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the exportrecord type in the database.
	Label = "export_record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFigmaFileID holds the string denoting the figma_file_id field in the database.
	FieldFigmaFileID = "figma_file_id"
	// FieldFigmaFileName holds the string denoting the figma_file_name field in the database.
	FieldFigmaFileName = "figma_file_name"
	// FieldFigmaFileURL holds the string denoting the figma_file_url field in the database.
	FieldFigmaFileURL = "figma_file_url"
	// FieldExportFormat holds the string denoting the export_format field in the database.
	FieldExportFormat = "export_format"
	// FieldExportScale holds the string denoting the export_scale field in the database.
	FieldExportScale = "export_scale"
	// FieldExportSettings holds the string denoting the export_settings field in the database.
	FieldExportSettings = "export_settings"
	// FieldSelectedNodes holds the string denoting the selected_nodes field in the database.
	FieldSelectedNodes = "selected_nodes"
	// FieldTotalAssets holds the string denoting the total_assets field in the database.
	FieldTotalAssets = "total_assets"
	// FieldExportedAssets holds the string denoting the exported_assets field in the database.
	FieldExportedAssets = "exported_assets"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDownloadURL holds the string denoting the download_url field in the database.
	FieldDownloadURL = "download_url"
	// FieldErrorMessage holds the string denoting the error_message field in the database.
	FieldErrorMessage = "error_message"
	// FieldIPAddress holds the string denoting the ip_address field in the database.
	FieldIPAddress = "ip_address"
	// FieldUserAgent holds the string denoting the user_agent field in the database.
	FieldUserAgent = "user_agent"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldCompletedAt holds the string denoting the completed_at field in the database.
	FieldCompletedAt = "completed_at"
	// FieldExpiresAt holds the string denoting the expires_at field in the database.
	FieldExpiresAt = "expires_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeAnonymousUser holds the string denoting the anonymous_user edge name in mutations.
	EdgeAnonymousUser = "anonymous_user"
	// Table holds the table name of the exportrecord in the database.
	Table = "export_records"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "export_records"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_export_records"
	// AnonymousUserTable is the table that holds the anonymous_user relation/edge.
	AnonymousUserTable = "export_records"
	// AnonymousUserInverseTable is the table name for the AnonymousUser entity.
	// It exists in this package in order to avoid circular dependency with the "anonymoususer" package.
	AnonymousUserInverseTable = "anonymous_users"
	// AnonymousUserColumn is the table column denoting the anonymous_user relation/edge.
	AnonymousUserColumn = "anonymous_user_export_records"
)

// Columns holds all SQL columns for exportrecord fields.
var Columns = []string{
	FieldID,
	FieldFigmaFileID,
	FieldFigmaFileName,
	FieldFigmaFileURL,
	FieldExportFormat,
	FieldExportScale,
	FieldExportSettings,
	FieldSelectedNodes,
	FieldTotalAssets,
	FieldExportedAssets,
	FieldStatus,
	FieldDownloadURL,
	FieldErrorMessage,
	FieldIPAddress,
	FieldUserAgent,
	FieldStartedAt,
	FieldCompletedAt,
	FieldExpiresAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "export_records"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"anonymous_user_export_records",
	"user_export_records",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// FigmaFileIDValidator is a validator for the "figma_file_id" field. It is called by the builders before save.
	FigmaFileIDValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// ExportFormat defines the type for the "export_format" enum field.
type ExportFormat string

// ExportFormat values.
const (
	ExportFormatPng ExportFormat = "png"
	ExportFormatJpg ExportFormat = "jpg"
	ExportFormatSvg ExportFormat = "svg"
	ExportFormatPdf ExportFormat = "pdf"
)

func (ef ExportFormat) String() string {
	return string(ef)
}

// ExportFormatValidator is a validator for the "export_format" field enum values. It is called by the builders before save.
func ExportFormatValidator(ef ExportFormat) error {
	switch ef {
	case ExportFormatPng, ExportFormatJpg, ExportFormatSvg, ExportFormatPdf:
		return nil
	default:
		return fmt.Errorf("exportrecord: invalid enum value for export_format field: %q", ef)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPending    Status = "pending"
	StatusProcessing Status = "processing"
	StatusCompleted  Status = "completed"
	StatusFailed     Status = "failed"
	StatusCancelled  Status = "cancelled"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusProcessing, StatusCompleted, StatusFailed, StatusCancelled:
		return nil
	default:
		return fmt.Errorf("exportrecord: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the ExportRecord queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFigmaFileID orders the results by the figma_file_id field.
func ByFigmaFileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFigmaFileID, opts...).ToFunc()
}

// ByFigmaFileName orders the results by the figma_file_name field.
func ByFigmaFileName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFigmaFileName, opts...).ToFunc()
}

// ByFigmaFileURL orders the results by the figma_file_url field.
func ByFigmaFileURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFigmaFileURL, opts...).ToFunc()
}

// ByExportFormat orders the results by the export_format field.
func ByExportFormat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExportFormat, opts...).ToFunc()
}

// ByExportScale orders the results by the export_scale field.
func ByExportScale(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExportScale, opts...).ToFunc()
}

// ByTotalAssets orders the results by the total_assets field.
func ByTotalAssets(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalAssets, opts...).ToFunc()
}

// ByExportedAssets orders the results by the exported_assets field.
func ByExportedAssets(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExportedAssets, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByDownloadURL orders the results by the download_url field.
func ByDownloadURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDownloadURL, opts...).ToFunc()
}

// ByErrorMessage orders the results by the error_message field.
func ByErrorMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorMessage, opts...).ToFunc()
}

// ByIPAddress orders the results by the ip_address field.
func ByIPAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIPAddress, opts...).ToFunc()
}

// ByUserAgent orders the results by the user_agent field.
func ByUserAgent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserAgent, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByCompletedAt orders the results by the completed_at field.
func ByCompletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletedAt, opts...).ToFunc()
}

// ByExpiresAt orders the results by the expires_at field.
func ByExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiresAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByAnonymousUserField orders the results by anonymous_user field.
func ByAnonymousUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAnonymousUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newAnonymousUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AnonymousUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AnonymousUserTable, AnonymousUserColumn),
	)
}
