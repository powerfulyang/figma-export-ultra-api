// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fiber-ent-apollo-pg/ent/predicate"
	"fiber-ent-apollo-pg/ent/user"
	"fiber-ent-apollo-pg/ent/userauth"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserAuthUpdate is the builder for updating UserAuth entities.
type UserAuthUpdate struct {
	config
	hooks    []Hook
	mutation *UserAuthMutation
}

// Where appends a list predicates to the UserAuthUpdate builder.
func (_u *UserAuthUpdate) Where(ps ...predicate.UserAuth) *UserAuthUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetAuthType sets the "auth_type" field.
func (_u *UserAuthUpdate) SetAuthType(v userauth.AuthType) *UserAuthUpdate {
	_u.mutation.SetAuthType(v)
	return _u
}

// SetNillableAuthType sets the "auth_type" field if the given value is not nil.
func (_u *UserAuthUpdate) SetNillableAuthType(v *userauth.AuthType) *UserAuthUpdate {
	if v != nil {
		_u.SetAuthType(*v)
	}
	return _u
}

// SetIdentifier sets the "identifier" field.
func (_u *UserAuthUpdate) SetIdentifier(v string) *UserAuthUpdate {
	_u.mutation.SetIdentifier(v)
	return _u
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (_u *UserAuthUpdate) SetNillableIdentifier(v *string) *UserAuthUpdate {
	if v != nil {
		_u.SetIdentifier(*v)
	}
	return _u
}

// SetCredential sets the "credential" field.
func (_u *UserAuthUpdate) SetCredential(v string) *UserAuthUpdate {
	_u.mutation.SetCredential(v)
	return _u
}

// SetNillableCredential sets the "credential" field if the given value is not nil.
func (_u *UserAuthUpdate) SetNillableCredential(v *string) *UserAuthUpdate {
	if v != nil {
		_u.SetCredential(*v)
	}
	return _u
}

// ClearCredential clears the value of the "credential" field.
func (_u *UserAuthUpdate) ClearCredential() *UserAuthUpdate {
	_u.mutation.ClearCredential()
	return _u
}

// SetProviderUserID sets the "provider_user_id" field.
func (_u *UserAuthUpdate) SetProviderUserID(v string) *UserAuthUpdate {
	_u.mutation.SetProviderUserID(v)
	return _u
}

// SetNillableProviderUserID sets the "provider_user_id" field if the given value is not nil.
func (_u *UserAuthUpdate) SetNillableProviderUserID(v *string) *UserAuthUpdate {
	if v != nil {
		_u.SetProviderUserID(*v)
	}
	return _u
}

// ClearProviderUserID clears the value of the "provider_user_id" field.
func (_u *UserAuthUpdate) ClearProviderUserID() *UserAuthUpdate {
	_u.mutation.ClearProviderUserID()
	return _u
}

// SetProviderUsername sets the "provider_username" field.
func (_u *UserAuthUpdate) SetProviderUsername(v string) *UserAuthUpdate {
	_u.mutation.SetProviderUsername(v)
	return _u
}

// SetNillableProviderUsername sets the "provider_username" field if the given value is not nil.
func (_u *UserAuthUpdate) SetNillableProviderUsername(v *string) *UserAuthUpdate {
	if v != nil {
		_u.SetProviderUsername(*v)
	}
	return _u
}

// ClearProviderUsername clears the value of the "provider_username" field.
func (_u *UserAuthUpdate) ClearProviderUsername() *UserAuthUpdate {
	_u.mutation.ClearProviderUsername()
	return _u
}

// SetProviderEmail sets the "provider_email" field.
func (_u *UserAuthUpdate) SetProviderEmail(v string) *UserAuthUpdate {
	_u.mutation.SetProviderEmail(v)
	return _u
}

// SetNillableProviderEmail sets the "provider_email" field if the given value is not nil.
func (_u *UserAuthUpdate) SetNillableProviderEmail(v *string) *UserAuthUpdate {
	if v != nil {
		_u.SetProviderEmail(*v)
	}
	return _u
}

// ClearProviderEmail clears the value of the "provider_email" field.
func (_u *UserAuthUpdate) ClearProviderEmail() *UserAuthUpdate {
	_u.mutation.ClearProviderEmail()
	return _u
}

// SetProviderAvatar sets the "provider_avatar" field.
func (_u *UserAuthUpdate) SetProviderAvatar(v string) *UserAuthUpdate {
	_u.mutation.SetProviderAvatar(v)
	return _u
}

// SetNillableProviderAvatar sets the "provider_avatar" field if the given value is not nil.
func (_u *UserAuthUpdate) SetNillableProviderAvatar(v *string) *UserAuthUpdate {
	if v != nil {
		_u.SetProviderAvatar(*v)
	}
	return _u
}

// ClearProviderAvatar clears the value of the "provider_avatar" field.
func (_u *UserAuthUpdate) ClearProviderAvatar() *UserAuthUpdate {
	_u.mutation.ClearProviderAvatar()
	return _u
}

// SetProviderData sets the "provider_data" field.
func (_u *UserAuthUpdate) SetProviderData(v map[string]interface{}) *UserAuthUpdate {
	_u.mutation.SetProviderData(v)
	return _u
}

// ClearProviderData clears the value of the "provider_data" field.
func (_u *UserAuthUpdate) ClearProviderData() *UserAuthUpdate {
	_u.mutation.ClearProviderData()
	return _u
}

// SetAccessToken sets the "access_token" field.
func (_u *UserAuthUpdate) SetAccessToken(v string) *UserAuthUpdate {
	_u.mutation.SetAccessToken(v)
	return _u
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (_u *UserAuthUpdate) SetNillableAccessToken(v *string) *UserAuthUpdate {
	if v != nil {
		_u.SetAccessToken(*v)
	}
	return _u
}

// ClearAccessToken clears the value of the "access_token" field.
func (_u *UserAuthUpdate) ClearAccessToken() *UserAuthUpdate {
	_u.mutation.ClearAccessToken()
	return _u
}

// SetRefreshToken sets the "refresh_token" field.
func (_u *UserAuthUpdate) SetRefreshToken(v string) *UserAuthUpdate {
	_u.mutation.SetRefreshToken(v)
	return _u
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (_u *UserAuthUpdate) SetNillableRefreshToken(v *string) *UserAuthUpdate {
	if v != nil {
		_u.SetRefreshToken(*v)
	}
	return _u
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (_u *UserAuthUpdate) ClearRefreshToken() *UserAuthUpdate {
	_u.mutation.ClearRefreshToken()
	return _u
}

// SetTokenExpiresAt sets the "token_expires_at" field.
func (_u *UserAuthUpdate) SetTokenExpiresAt(v time.Time) *UserAuthUpdate {
	_u.mutation.SetTokenExpiresAt(v)
	return _u
}

// SetNillableTokenExpiresAt sets the "token_expires_at" field if the given value is not nil.
func (_u *UserAuthUpdate) SetNillableTokenExpiresAt(v *time.Time) *UserAuthUpdate {
	if v != nil {
		_u.SetTokenExpiresAt(*v)
	}
	return _u
}

// ClearTokenExpiresAt clears the value of the "token_expires_at" field.
func (_u *UserAuthUpdate) ClearTokenExpiresAt() *UserAuthUpdate {
	_u.mutation.ClearTokenExpiresAt()
	return _u
}

// SetIsPrimary sets the "is_primary" field.
func (_u *UserAuthUpdate) SetIsPrimary(v bool) *UserAuthUpdate {
	_u.mutation.SetIsPrimary(v)
	return _u
}

// SetNillableIsPrimary sets the "is_primary" field if the given value is not nil.
func (_u *UserAuthUpdate) SetNillableIsPrimary(v *bool) *UserAuthUpdate {
	if v != nil {
		_u.SetIsPrimary(*v)
	}
	return _u
}

// SetIsEnabled sets the "is_enabled" field.
func (_u *UserAuthUpdate) SetIsEnabled(v bool) *UserAuthUpdate {
	_u.mutation.SetIsEnabled(v)
	return _u
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (_u *UserAuthUpdate) SetNillableIsEnabled(v *bool) *UserAuthUpdate {
	if v != nil {
		_u.SetIsEnabled(*v)
	}
	return _u
}

// SetLastUsedAt sets the "last_used_at" field.
func (_u *UserAuthUpdate) SetLastUsedAt(v time.Time) *UserAuthUpdate {
	_u.mutation.SetLastUsedAt(v)
	return _u
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (_u *UserAuthUpdate) SetNillableLastUsedAt(v *time.Time) *UserAuthUpdate {
	if v != nil {
		_u.SetLastUsedAt(*v)
	}
	return _u
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (_u *UserAuthUpdate) ClearLastUsedAt() *UserAuthUpdate {
	_u.mutation.ClearLastUsedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserAuthUpdate) SetUpdatedAt(v time.Time) *UserAuthUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *UserAuthUpdate) SetUserID(id uuid.UUID) *UserAuthUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *UserAuthUpdate) SetUser(v *User) *UserAuthUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the UserAuthMutation object of the builder.
func (_u *UserAuthUpdate) Mutation() *UserAuthMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *UserAuthUpdate) ClearUser() *UserAuthUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserAuthUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserAuthUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserAuthUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserAuthUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserAuthUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := userauth.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserAuthUpdate) check() error {
	if v, ok := _u.mutation.AuthType(); ok {
		if err := userauth.AuthTypeValidator(v); err != nil {
			return &ValidationError{Name: "auth_type", err: fmt.Errorf(`ent: validator failed for field "UserAuth.auth_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Identifier(); ok {
		if err := userauth.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "UserAuth.identifier": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserAuth.user"`)
	}
	return nil
}

func (_u *UserAuthUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userauth.Table, userauth.Columns, sqlgraph.NewFieldSpec(userauth.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.AuthType(); ok {
		_spec.SetField(userauth.FieldAuthType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Identifier(); ok {
		_spec.SetField(userauth.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := _u.mutation.Credential(); ok {
		_spec.SetField(userauth.FieldCredential, field.TypeString, value)
	}
	if _u.mutation.CredentialCleared() {
		_spec.ClearField(userauth.FieldCredential, field.TypeString)
	}
	if value, ok := _u.mutation.ProviderUserID(); ok {
		_spec.SetField(userauth.FieldProviderUserID, field.TypeString, value)
	}
	if _u.mutation.ProviderUserIDCleared() {
		_spec.ClearField(userauth.FieldProviderUserID, field.TypeString)
	}
	if value, ok := _u.mutation.ProviderUsername(); ok {
		_spec.SetField(userauth.FieldProviderUsername, field.TypeString, value)
	}
	if _u.mutation.ProviderUsernameCleared() {
		_spec.ClearField(userauth.FieldProviderUsername, field.TypeString)
	}
	if value, ok := _u.mutation.ProviderEmail(); ok {
		_spec.SetField(userauth.FieldProviderEmail, field.TypeString, value)
	}
	if _u.mutation.ProviderEmailCleared() {
		_spec.ClearField(userauth.FieldProviderEmail, field.TypeString)
	}
	if value, ok := _u.mutation.ProviderAvatar(); ok {
		_spec.SetField(userauth.FieldProviderAvatar, field.TypeString, value)
	}
	if _u.mutation.ProviderAvatarCleared() {
		_spec.ClearField(userauth.FieldProviderAvatar, field.TypeString)
	}
	if value, ok := _u.mutation.ProviderData(); ok {
		_spec.SetField(userauth.FieldProviderData, field.TypeJSON, value)
	}
	if _u.mutation.ProviderDataCleared() {
		_spec.ClearField(userauth.FieldProviderData, field.TypeJSON)
	}
	if value, ok := _u.mutation.AccessToken(); ok {
		_spec.SetField(userauth.FieldAccessToken, field.TypeString, value)
	}
	if _u.mutation.AccessTokenCleared() {
		_spec.ClearField(userauth.FieldAccessToken, field.TypeString)
	}
	if value, ok := _u.mutation.RefreshToken(); ok {
		_spec.SetField(userauth.FieldRefreshToken, field.TypeString, value)
	}
	if _u.mutation.RefreshTokenCleared() {
		_spec.ClearField(userauth.FieldRefreshToken, field.TypeString)
	}
	if value, ok := _u.mutation.TokenExpiresAt(); ok {
		_spec.SetField(userauth.FieldTokenExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.TokenExpiresAtCleared() {
		_spec.ClearField(userauth.FieldTokenExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.IsPrimary(); ok {
		_spec.SetField(userauth.FieldIsPrimary, field.TypeBool, value)
	}
	if value, ok := _u.mutation.IsEnabled(); ok {
		_spec.SetField(userauth.FieldIsEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.LastUsedAt(); ok {
		_spec.SetField(userauth.FieldLastUsedAt, field.TypeTime, value)
	}
	if _u.mutation.LastUsedAtCleared() {
		_spec.ClearField(userauth.FieldLastUsedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(userauth.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userauth.UserTable,
			Columns: []string{userauth.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userauth.UserTable,
			Columns: []string{userauth.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userauth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserAuthUpdateOne is the builder for updating a single UserAuth entity.
type UserAuthUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserAuthMutation
}

// SetAuthType sets the "auth_type" field.
func (_u *UserAuthUpdateOne) SetAuthType(v userauth.AuthType) *UserAuthUpdateOne {
	_u.mutation.SetAuthType(v)
	return _u
}

// SetNillableAuthType sets the "auth_type" field if the given value is not nil.
func (_u *UserAuthUpdateOne) SetNillableAuthType(v *userauth.AuthType) *UserAuthUpdateOne {
	if v != nil {
		_u.SetAuthType(*v)
	}
	return _u
}

// SetIdentifier sets the "identifier" field.
func (_u *UserAuthUpdateOne) SetIdentifier(v string) *UserAuthUpdateOne {
	_u.mutation.SetIdentifier(v)
	return _u
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (_u *UserAuthUpdateOne) SetNillableIdentifier(v *string) *UserAuthUpdateOne {
	if v != nil {
		_u.SetIdentifier(*v)
	}
	return _u
}

// SetCredential sets the "credential" field.
func (_u *UserAuthUpdateOne) SetCredential(v string) *UserAuthUpdateOne {
	_u.mutation.SetCredential(v)
	return _u
}

// SetNillableCredential sets the "credential" field if the given value is not nil.
func (_u *UserAuthUpdateOne) SetNillableCredential(v *string) *UserAuthUpdateOne {
	if v != nil {
		_u.SetCredential(*v)
	}
	return _u
}

// ClearCredential clears the value of the "credential" field.
func (_u *UserAuthUpdateOne) ClearCredential() *UserAuthUpdateOne {
	_u.mutation.ClearCredential()
	return _u
}

// SetProviderUserID sets the "provider_user_id" field.
func (_u *UserAuthUpdateOne) SetProviderUserID(v string) *UserAuthUpdateOne {
	_u.mutation.SetProviderUserID(v)
	return _u
}

// SetNillableProviderUserID sets the "provider_user_id" field if the given value is not nil.
func (_u *UserAuthUpdateOne) SetNillableProviderUserID(v *string) *UserAuthUpdateOne {
	if v != nil {
		_u.SetProviderUserID(*v)
	}
	return _u
}

// ClearProviderUserID clears the value of the "provider_user_id" field.
func (_u *UserAuthUpdateOne) ClearProviderUserID() *UserAuthUpdateOne {
	_u.mutation.ClearProviderUserID()
	return _u
}

// SetProviderUsername sets the "provider_username" field.
func (_u *UserAuthUpdateOne) SetProviderUsername(v string) *UserAuthUpdateOne {
	_u.mutation.SetProviderUsername(v)
	return _u
}

// SetNillableProviderUsername sets the "provider_username" field if the given value is not nil.
func (_u *UserAuthUpdateOne) SetNillableProviderUsername(v *string) *UserAuthUpdateOne {
	if v != nil {
		_u.SetProviderUsername(*v)
	}
	return _u
}

// ClearProviderUsername clears the value of the "provider_username" field.
func (_u *UserAuthUpdateOne) ClearProviderUsername() *UserAuthUpdateOne {
	_u.mutation.ClearProviderUsername()
	return _u
}

// SetProviderEmail sets the "provider_email" field.
func (_u *UserAuthUpdateOne) SetProviderEmail(v string) *UserAuthUpdateOne {
	_u.mutation.SetProviderEmail(v)
	return _u
}

// SetNillableProviderEmail sets the "provider_email" field if the given value is not nil.
func (_u *UserAuthUpdateOne) SetNillableProviderEmail(v *string) *UserAuthUpdateOne {
	if v != nil {
		_u.SetProviderEmail(*v)
	}
	return _u
}

// ClearProviderEmail clears the value of the "provider_email" field.
func (_u *UserAuthUpdateOne) ClearProviderEmail() *UserAuthUpdateOne {
	_u.mutation.ClearProviderEmail()
	return _u
}

// SetProviderAvatar sets the "provider_avatar" field.
func (_u *UserAuthUpdateOne) SetProviderAvatar(v string) *UserAuthUpdateOne {
	_u.mutation.SetProviderAvatar(v)
	return _u
}

// SetNillableProviderAvatar sets the "provider_avatar" field if the given value is not nil.
func (_u *UserAuthUpdateOne) SetNillableProviderAvatar(v *string) *UserAuthUpdateOne {
	if v != nil {
		_u.SetProviderAvatar(*v)
	}
	return _u
}

// ClearProviderAvatar clears the value of the "provider_avatar" field.
func (_u *UserAuthUpdateOne) ClearProviderAvatar() *UserAuthUpdateOne {
	_u.mutation.ClearProviderAvatar()
	return _u
}

// SetProviderData sets the "provider_data" field.
func (_u *UserAuthUpdateOne) SetProviderData(v map[string]interface{}) *UserAuthUpdateOne {
	_u.mutation.SetProviderData(v)
	return _u
}

// ClearProviderData clears the value of the "provider_data" field.
func (_u *UserAuthUpdateOne) ClearProviderData() *UserAuthUpdateOne {
	_u.mutation.ClearProviderData()
	return _u
}

// SetAccessToken sets the "access_token" field.
func (_u *UserAuthUpdateOne) SetAccessToken(v string) *UserAuthUpdateOne {
	_u.mutation.SetAccessToken(v)
	return _u
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (_u *UserAuthUpdateOne) SetNillableAccessToken(v *string) *UserAuthUpdateOne {
	if v != nil {
		_u.SetAccessToken(*v)
	}
	return _u
}

// ClearAccessToken clears the value of the "access_token" field.
func (_u *UserAuthUpdateOne) ClearAccessToken() *UserAuthUpdateOne {
	_u.mutation.ClearAccessToken()
	return _u
}

// SetRefreshToken sets the "refresh_token" field.
func (_u *UserAuthUpdateOne) SetRefreshToken(v string) *UserAuthUpdateOne {
	_u.mutation.SetRefreshToken(v)
	return _u
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (_u *UserAuthUpdateOne) SetNillableRefreshToken(v *string) *UserAuthUpdateOne {
	if v != nil {
		_u.SetRefreshToken(*v)
	}
	return _u
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (_u *UserAuthUpdateOne) ClearRefreshToken() *UserAuthUpdateOne {
	_u.mutation.ClearRefreshToken()
	return _u
}

// SetTokenExpiresAt sets the "token_expires_at" field.
func (_u *UserAuthUpdateOne) SetTokenExpiresAt(v time.Time) *UserAuthUpdateOne {
	_u.mutation.SetTokenExpiresAt(v)
	return _u
}

// SetNillableTokenExpiresAt sets the "token_expires_at" field if the given value is not nil.
func (_u *UserAuthUpdateOne) SetNillableTokenExpiresAt(v *time.Time) *UserAuthUpdateOne {
	if v != nil {
		_u.SetTokenExpiresAt(*v)
	}
	return _u
}

// ClearTokenExpiresAt clears the value of the "token_expires_at" field.
func (_u *UserAuthUpdateOne) ClearTokenExpiresAt() *UserAuthUpdateOne {
	_u.mutation.ClearTokenExpiresAt()
	return _u
}

// SetIsPrimary sets the "is_primary" field.
func (_u *UserAuthUpdateOne) SetIsPrimary(v bool) *UserAuthUpdateOne {
	_u.mutation.SetIsPrimary(v)
	return _u
}

// SetNillableIsPrimary sets the "is_primary" field if the given value is not nil.
func (_u *UserAuthUpdateOne) SetNillableIsPrimary(v *bool) *UserAuthUpdateOne {
	if v != nil {
		_u.SetIsPrimary(*v)
	}
	return _u
}

// SetIsEnabled sets the "is_enabled" field.
func (_u *UserAuthUpdateOne) SetIsEnabled(v bool) *UserAuthUpdateOne {
	_u.mutation.SetIsEnabled(v)
	return _u
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (_u *UserAuthUpdateOne) SetNillableIsEnabled(v *bool) *UserAuthUpdateOne {
	if v != nil {
		_u.SetIsEnabled(*v)
	}
	return _u
}

// SetLastUsedAt sets the "last_used_at" field.
func (_u *UserAuthUpdateOne) SetLastUsedAt(v time.Time) *UserAuthUpdateOne {
	_u.mutation.SetLastUsedAt(v)
	return _u
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (_u *UserAuthUpdateOne) SetNillableLastUsedAt(v *time.Time) *UserAuthUpdateOne {
	if v != nil {
		_u.SetLastUsedAt(*v)
	}
	return _u
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (_u *UserAuthUpdateOne) ClearLastUsedAt() *UserAuthUpdateOne {
	_u.mutation.ClearLastUsedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserAuthUpdateOne) SetUpdatedAt(v time.Time) *UserAuthUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *UserAuthUpdateOne) SetUserID(id uuid.UUID) *UserAuthUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *UserAuthUpdateOne) SetUser(v *User) *UserAuthUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the UserAuthMutation object of the builder.
func (_u *UserAuthUpdateOne) Mutation() *UserAuthMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *UserAuthUpdateOne) ClearUser() *UserAuthUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the UserAuthUpdate builder.
func (_u *UserAuthUpdateOne) Where(ps ...predicate.UserAuth) *UserAuthUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserAuthUpdateOne) Select(field string, fields ...string) *UserAuthUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated UserAuth entity.
func (_u *UserAuthUpdateOne) Save(ctx context.Context) (*UserAuth, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserAuthUpdateOne) SaveX(ctx context.Context) *UserAuth {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserAuthUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserAuthUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserAuthUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := userauth.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserAuthUpdateOne) check() error {
	if v, ok := _u.mutation.AuthType(); ok {
		if err := userauth.AuthTypeValidator(v); err != nil {
			return &ValidationError{Name: "auth_type", err: fmt.Errorf(`ent: validator failed for field "UserAuth.auth_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Identifier(); ok {
		if err := userauth.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "UserAuth.identifier": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserAuth.user"`)
	}
	return nil
}

func (_u *UserAuthUpdateOne) sqlSave(ctx context.Context) (_node *UserAuth, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userauth.Table, userauth.Columns, sqlgraph.NewFieldSpec(userauth.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserAuth.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userauth.FieldID)
		for _, f := range fields {
			if !userauth.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userauth.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.AuthType(); ok {
		_spec.SetField(userauth.FieldAuthType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Identifier(); ok {
		_spec.SetField(userauth.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := _u.mutation.Credential(); ok {
		_spec.SetField(userauth.FieldCredential, field.TypeString, value)
	}
	if _u.mutation.CredentialCleared() {
		_spec.ClearField(userauth.FieldCredential, field.TypeString)
	}
	if value, ok := _u.mutation.ProviderUserID(); ok {
		_spec.SetField(userauth.FieldProviderUserID, field.TypeString, value)
	}
	if _u.mutation.ProviderUserIDCleared() {
		_spec.ClearField(userauth.FieldProviderUserID, field.TypeString)
	}
	if value, ok := _u.mutation.ProviderUsername(); ok {
		_spec.SetField(userauth.FieldProviderUsername, field.TypeString, value)
	}
	if _u.mutation.ProviderUsernameCleared() {
		_spec.ClearField(userauth.FieldProviderUsername, field.TypeString)
	}
	if value, ok := _u.mutation.ProviderEmail(); ok {
		_spec.SetField(userauth.FieldProviderEmail, field.TypeString, value)
	}
	if _u.mutation.ProviderEmailCleared() {
		_spec.ClearField(userauth.FieldProviderEmail, field.TypeString)
	}
	if value, ok := _u.mutation.ProviderAvatar(); ok {
		_spec.SetField(userauth.FieldProviderAvatar, field.TypeString, value)
	}
	if _u.mutation.ProviderAvatarCleared() {
		_spec.ClearField(userauth.FieldProviderAvatar, field.TypeString)
	}
	if value, ok := _u.mutation.ProviderData(); ok {
		_spec.SetField(userauth.FieldProviderData, field.TypeJSON, value)
	}
	if _u.mutation.ProviderDataCleared() {
		_spec.ClearField(userauth.FieldProviderData, field.TypeJSON)
	}
	if value, ok := _u.mutation.AccessToken(); ok {
		_spec.SetField(userauth.FieldAccessToken, field.TypeString, value)
	}
	if _u.mutation.AccessTokenCleared() {
		_spec.ClearField(userauth.FieldAccessToken, field.TypeString)
	}
	if value, ok := _u.mutation.RefreshToken(); ok {
		_spec.SetField(userauth.FieldRefreshToken, field.TypeString, value)
	}
	if _u.mutation.RefreshTokenCleared() {
		_spec.ClearField(userauth.FieldRefreshToken, field.TypeString)
	}
	if value, ok := _u.mutation.TokenExpiresAt(); ok {
		_spec.SetField(userauth.FieldTokenExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.TokenExpiresAtCleared() {
		_spec.ClearField(userauth.FieldTokenExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.IsPrimary(); ok {
		_spec.SetField(userauth.FieldIsPrimary, field.TypeBool, value)
	}
	if value, ok := _u.mutation.IsEnabled(); ok {
		_spec.SetField(userauth.FieldIsEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.LastUsedAt(); ok {
		_spec.SetField(userauth.FieldLastUsedAt, field.TypeTime, value)
	}
	if _u.mutation.LastUsedAtCleared() {
		_spec.ClearField(userauth.FieldLastUsedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(userauth.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userauth.UserTable,
			Columns: []string{userauth.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userauth.UserTable,
			Columns: []string{userauth.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserAuth{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userauth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
