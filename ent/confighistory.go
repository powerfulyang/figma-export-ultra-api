// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fiber-ent-apollo-pg/ent/confighistory"
	"fiber-ent-apollo-pg/ent/userconfig"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ConfigHistory is the model entity for the ConfigHistory schema.
type ConfigHistory struct {
	config `json:"-"`
	// ID of the ent.
	// 历史记录唯一标识
	ID uuid.UUID `json:"id,omitempty"`
	// 变更前的配置数据
	OldConfigData map[string]interface{} `json:"old_config_data,omitempty"`
	// 变更后的配置数据
	NewConfigData map[string]interface{} `json:"new_config_data,omitempty"`
	// 变更类型：create, update, delete
	ChangeType string `json:"change_type,omitempty"`
	// 变更描述
	ChangeDescription string `json:"change_description,omitempty"`
	// 旧版本号
	OldVersion string `json:"old_version,omitempty"`
	// 新版本号
	NewVersion string `json:"new_version,omitempty"`
	// 操作IP地址
	IPAddress string `json:"ip_address,omitempty"`
	// 用户代理
	UserAgent string `json:"user_agent,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ConfigHistoryQuery when eager-loading is set.
	Edges               ConfigHistoryEdges `json:"edges"`
	user_config_history *uuid.UUID
	selectValues        sql.SelectValues
}

// ConfigHistoryEdges holds the relations/edges for other nodes in the graph.
type ConfigHistoryEdges struct {
	// Config holds the value of the config edge.
	Config *UserConfig `json:"config,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ConfigOrErr returns the Config value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConfigHistoryEdges) ConfigOrErr() (*UserConfig, error) {
	if e.Config != nil {
		return e.Config, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: userconfig.Label}
	}
	return nil, &NotLoadedError{edge: "config"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ConfigHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case confighistory.FieldOldConfigData, confighistory.FieldNewConfigData:
			values[i] = new([]byte)
		case confighistory.FieldChangeType, confighistory.FieldChangeDescription, confighistory.FieldOldVersion, confighistory.FieldNewVersion, confighistory.FieldIPAddress, confighistory.FieldUserAgent:
			values[i] = new(sql.NullString)
		case confighistory.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case confighistory.FieldID:
			values[i] = new(uuid.UUID)
		case confighistory.ForeignKeys[0]: // user_config_history
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ConfigHistory fields.
func (_m *ConfigHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case confighistory.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case confighistory.FieldOldConfigData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field old_config_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.OldConfigData); err != nil {
					return fmt.Errorf("unmarshal field old_config_data: %w", err)
				}
			}
		case confighistory.FieldNewConfigData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field new_config_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.NewConfigData); err != nil {
					return fmt.Errorf("unmarshal field new_config_data: %w", err)
				}
			}
		case confighistory.FieldChangeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field change_type", values[i])
			} else if value.Valid {
				_m.ChangeType = value.String
			}
		case confighistory.FieldChangeDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field change_description", values[i])
			} else if value.Valid {
				_m.ChangeDescription = value.String
			}
		case confighistory.FieldOldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field old_version", values[i])
			} else if value.Valid {
				_m.OldVersion = value.String
			}
		case confighistory.FieldNewVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field new_version", values[i])
			} else if value.Valid {
				_m.NewVersion = value.String
			}
		case confighistory.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				_m.IPAddress = value.String
			}
		case confighistory.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				_m.UserAgent = value.String
			}
		case confighistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case confighistory.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_config_history", values[i])
			} else if value.Valid {
				_m.user_config_history = new(uuid.UUID)
				*_m.user_config_history = *value.S.(*uuid.UUID)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ConfigHistory.
// This includes values selected through modifiers, order, etc.
func (_m *ConfigHistory) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryConfig queries the "config" edge of the ConfigHistory entity.
func (_m *ConfigHistory) QueryConfig() *UserConfigQuery {
	return NewConfigHistoryClient(_m.config).QueryConfig(_m)
}

// Update returns a builder for updating this ConfigHistory.
// Note that you need to call ConfigHistory.Unwrap() before calling this method if this ConfigHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ConfigHistory) Update() *ConfigHistoryUpdateOne {
	return NewConfigHistoryClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ConfigHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ConfigHistory) Unwrap() *ConfigHistory {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: ConfigHistory is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ConfigHistory) String() string {
	var builder strings.Builder
	builder.WriteString("ConfigHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("old_config_data=")
	builder.WriteString(fmt.Sprintf("%v", _m.OldConfigData))
	builder.WriteString(", ")
	builder.WriteString("new_config_data=")
	builder.WriteString(fmt.Sprintf("%v", _m.NewConfigData))
	builder.WriteString(", ")
	builder.WriteString("change_type=")
	builder.WriteString(_m.ChangeType)
	builder.WriteString(", ")
	builder.WriteString("change_description=")
	builder.WriteString(_m.ChangeDescription)
	builder.WriteString(", ")
	builder.WriteString("old_version=")
	builder.WriteString(_m.OldVersion)
	builder.WriteString(", ")
	builder.WriteString("new_version=")
	builder.WriteString(_m.NewVersion)
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(_m.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(_m.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ConfigHistories is a parsable slice of ConfigHistory.
type ConfigHistories []*ConfigHistory
