// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fiber-ent-apollo-pg/ent/anonymoususer"
	"fiber-ent-apollo-pg/ent/confighistory"
	"fiber-ent-apollo-pg/ent/predicate"
	"fiber-ent-apollo-pg/ent/user"
	"fiber-ent-apollo-pg/ent/userconfig"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserConfigUpdate is the builder for updating UserConfig entities.
type UserConfigUpdate struct {
	config
	hooks    []Hook
	mutation *UserConfigMutation
}

// Where appends a list predicates to the UserConfigUpdate builder.
func (_u *UserConfigUpdate) Where(ps ...predicate.UserConfig) *UserConfigUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *UserConfigUpdate) SetName(v string) *UserConfigUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *UserConfigUpdate) SetNillableName(v *string) *UserConfigUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetConfigData sets the "config_data" field.
func (_u *UserConfigUpdate) SetConfigData(v map[string]interface{}) *UserConfigUpdate {
	_u.mutation.SetConfigData(v)
	return _u
}

// SetVersion sets the "version" field.
func (_u *UserConfigUpdate) SetVersion(v string) *UserConfigUpdate {
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *UserConfigUpdate) SetNillableVersion(v *string) *UserConfigUpdate {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *UserConfigUpdate) SetDescription(v string) *UserConfigUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *UserConfigUpdate) SetNillableDescription(v *string) *UserConfigUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *UserConfigUpdate) ClearDescription() *UserConfigUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetIsDefault sets the "is_default" field.
func (_u *UserConfigUpdate) SetIsDefault(v bool) *UserConfigUpdate {
	_u.mutation.SetIsDefault(v)
	return _u
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (_u *UserConfigUpdate) SetNillableIsDefault(v *bool) *UserConfigUpdate {
	if v != nil {
		_u.SetIsDefault(*v)
	}
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *UserConfigUpdate) SetIsActive(v bool) *UserConfigUpdate {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *UserConfigUpdate) SetNillableIsActive(v *bool) *UserConfigUpdate {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserConfigUpdate) SetUpdatedAt(v time.Time) *UserConfigUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *UserConfigUpdate) SetUserID(id uuid.UUID) *UserConfigUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_u *UserConfigUpdate) SetNillableUserID(id *uuid.UUID) *UserConfigUpdate {
	if id != nil {
		_u = _u.SetUserID(*id)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *UserConfigUpdate) SetUser(v *User) *UserConfigUpdate {
	return _u.SetUserID(v.ID)
}

// SetAnonymousUserID sets the "anonymous_user" edge to the AnonymousUser entity by ID.
func (_u *UserConfigUpdate) SetAnonymousUserID(id uuid.UUID) *UserConfigUpdate {
	_u.mutation.SetAnonymousUserID(id)
	return _u
}

// SetNillableAnonymousUserID sets the "anonymous_user" edge to the AnonymousUser entity by ID if the given value is not nil.
func (_u *UserConfigUpdate) SetNillableAnonymousUserID(id *uuid.UUID) *UserConfigUpdate {
	if id != nil {
		_u = _u.SetAnonymousUserID(*id)
	}
	return _u
}

// SetAnonymousUser sets the "anonymous_user" edge to the AnonymousUser entity.
func (_u *UserConfigUpdate) SetAnonymousUser(v *AnonymousUser) *UserConfigUpdate {
	return _u.SetAnonymousUserID(v.ID)
}

// AddHistoryIDs adds the "history" edge to the ConfigHistory entity by IDs.
func (_u *UserConfigUpdate) AddHistoryIDs(ids ...uuid.UUID) *UserConfigUpdate {
	_u.mutation.AddHistoryIDs(ids...)
	return _u
}

// AddHistory adds the "history" edges to the ConfigHistory entity.
func (_u *UserConfigUpdate) AddHistory(v ...*ConfigHistory) *UserConfigUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddHistoryIDs(ids...)
}

// Mutation returns the UserConfigMutation object of the builder.
func (_u *UserConfigUpdate) Mutation() *UserConfigMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *UserConfigUpdate) ClearUser() *UserConfigUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearAnonymousUser clears the "anonymous_user" edge to the AnonymousUser entity.
func (_u *UserConfigUpdate) ClearAnonymousUser() *UserConfigUpdate {
	_u.mutation.ClearAnonymousUser()
	return _u
}

// ClearHistory clears all "history" edges to the ConfigHistory entity.
func (_u *UserConfigUpdate) ClearHistory() *UserConfigUpdate {
	_u.mutation.ClearHistory()
	return _u
}

// RemoveHistoryIDs removes the "history" edge to ConfigHistory entities by IDs.
func (_u *UserConfigUpdate) RemoveHistoryIDs(ids ...uuid.UUID) *UserConfigUpdate {
	_u.mutation.RemoveHistoryIDs(ids...)
	return _u
}

// RemoveHistory removes "history" edges to ConfigHistory entities.
func (_u *UserConfigUpdate) RemoveHistory(v ...*ConfigHistory) *UserConfigUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveHistoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserConfigUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserConfigUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserConfigUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserConfigUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := userconfig.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserConfigUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := userconfig.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "UserConfig.name": %w`, err)}
		}
	}
	return nil
}

func (_u *UserConfigUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userconfig.Table, userconfig.Columns, sqlgraph.NewFieldSpec(userconfig.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(userconfig.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.ConfigData(); ok {
		_spec.SetField(userconfig.FieldConfigData, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(userconfig.FieldVersion, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(userconfig.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(userconfig.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.IsDefault(); ok {
		_spec.SetField(userconfig.FieldIsDefault, field.TypeBool, value)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(userconfig.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(userconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userconfig.UserTable,
			Columns: []string{userconfig.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userconfig.UserTable,
			Columns: []string{userconfig.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AnonymousUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userconfig.AnonymousUserTable,
			Columns: []string{userconfig.AnonymousUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(anonymoususer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AnonymousUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userconfig.AnonymousUserTable,
			Columns: []string{userconfig.AnonymousUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(anonymoususer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userconfig.HistoryTable,
			Columns: []string{userconfig.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(confighistory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedHistoryIDs(); len(nodes) > 0 && !_u.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userconfig.HistoryTable,
			Columns: []string{userconfig.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(confighistory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.HistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userconfig.HistoryTable,
			Columns: []string{userconfig.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(confighistory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserConfigUpdateOne is the builder for updating a single UserConfig entity.
type UserConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserConfigMutation
}

// SetName sets the "name" field.
func (_u *UserConfigUpdateOne) SetName(v string) *UserConfigUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *UserConfigUpdateOne) SetNillableName(v *string) *UserConfigUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetConfigData sets the "config_data" field.
func (_u *UserConfigUpdateOne) SetConfigData(v map[string]interface{}) *UserConfigUpdateOne {
	_u.mutation.SetConfigData(v)
	return _u
}

// SetVersion sets the "version" field.
func (_u *UserConfigUpdateOne) SetVersion(v string) *UserConfigUpdateOne {
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *UserConfigUpdateOne) SetNillableVersion(v *string) *UserConfigUpdateOne {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *UserConfigUpdateOne) SetDescription(v string) *UserConfigUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *UserConfigUpdateOne) SetNillableDescription(v *string) *UserConfigUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *UserConfigUpdateOne) ClearDescription() *UserConfigUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetIsDefault sets the "is_default" field.
func (_u *UserConfigUpdateOne) SetIsDefault(v bool) *UserConfigUpdateOne {
	_u.mutation.SetIsDefault(v)
	return _u
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (_u *UserConfigUpdateOne) SetNillableIsDefault(v *bool) *UserConfigUpdateOne {
	if v != nil {
		_u.SetIsDefault(*v)
	}
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *UserConfigUpdateOne) SetIsActive(v bool) *UserConfigUpdateOne {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *UserConfigUpdateOne) SetNillableIsActive(v *bool) *UserConfigUpdateOne {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserConfigUpdateOne) SetUpdatedAt(v time.Time) *UserConfigUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *UserConfigUpdateOne) SetUserID(id uuid.UUID) *UserConfigUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_u *UserConfigUpdateOne) SetNillableUserID(id *uuid.UUID) *UserConfigUpdateOne {
	if id != nil {
		_u = _u.SetUserID(*id)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *UserConfigUpdateOne) SetUser(v *User) *UserConfigUpdateOne {
	return _u.SetUserID(v.ID)
}

// SetAnonymousUserID sets the "anonymous_user" edge to the AnonymousUser entity by ID.
func (_u *UserConfigUpdateOne) SetAnonymousUserID(id uuid.UUID) *UserConfigUpdateOne {
	_u.mutation.SetAnonymousUserID(id)
	return _u
}

// SetNillableAnonymousUserID sets the "anonymous_user" edge to the AnonymousUser entity by ID if the given value is not nil.
func (_u *UserConfigUpdateOne) SetNillableAnonymousUserID(id *uuid.UUID) *UserConfigUpdateOne {
	if id != nil {
		_u = _u.SetAnonymousUserID(*id)
	}
	return _u
}

// SetAnonymousUser sets the "anonymous_user" edge to the AnonymousUser entity.
func (_u *UserConfigUpdateOne) SetAnonymousUser(v *AnonymousUser) *UserConfigUpdateOne {
	return _u.SetAnonymousUserID(v.ID)
}

// AddHistoryIDs adds the "history" edge to the ConfigHistory entity by IDs.
func (_u *UserConfigUpdateOne) AddHistoryIDs(ids ...uuid.UUID) *UserConfigUpdateOne {
	_u.mutation.AddHistoryIDs(ids...)
	return _u
}

// AddHistory adds the "history" edges to the ConfigHistory entity.
func (_u *UserConfigUpdateOne) AddHistory(v ...*ConfigHistory) *UserConfigUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddHistoryIDs(ids...)
}

// Mutation returns the UserConfigMutation object of the builder.
func (_u *UserConfigUpdateOne) Mutation() *UserConfigMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *UserConfigUpdateOne) ClearUser() *UserConfigUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearAnonymousUser clears the "anonymous_user" edge to the AnonymousUser entity.
func (_u *UserConfigUpdateOne) ClearAnonymousUser() *UserConfigUpdateOne {
	_u.mutation.ClearAnonymousUser()
	return _u
}

// ClearHistory clears all "history" edges to the ConfigHistory entity.
func (_u *UserConfigUpdateOne) ClearHistory() *UserConfigUpdateOne {
	_u.mutation.ClearHistory()
	return _u
}

// RemoveHistoryIDs removes the "history" edge to ConfigHistory entities by IDs.
func (_u *UserConfigUpdateOne) RemoveHistoryIDs(ids ...uuid.UUID) *UserConfigUpdateOne {
	_u.mutation.RemoveHistoryIDs(ids...)
	return _u
}

// RemoveHistory removes "history" edges to ConfigHistory entities.
func (_u *UserConfigUpdateOne) RemoveHistory(v ...*ConfigHistory) *UserConfigUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveHistoryIDs(ids...)
}

// Where appends a list predicates to the UserConfigUpdate builder.
func (_u *UserConfigUpdateOne) Where(ps ...predicate.UserConfig) *UserConfigUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserConfigUpdateOne) Select(field string, fields ...string) *UserConfigUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated UserConfig entity.
func (_u *UserConfigUpdateOne) Save(ctx context.Context) (*UserConfig, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserConfigUpdateOne) SaveX(ctx context.Context) *UserConfig {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserConfigUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserConfigUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := userconfig.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserConfigUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := userconfig.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "UserConfig.name": %w`, err)}
		}
	}
	return nil
}

func (_u *UserConfigUpdateOne) sqlSave(ctx context.Context) (_node *UserConfig, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userconfig.Table, userconfig.Columns, sqlgraph.NewFieldSpec(userconfig.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userconfig.FieldID)
		for _, f := range fields {
			if !userconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(userconfig.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.ConfigData(); ok {
		_spec.SetField(userconfig.FieldConfigData, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(userconfig.FieldVersion, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(userconfig.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(userconfig.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.IsDefault(); ok {
		_spec.SetField(userconfig.FieldIsDefault, field.TypeBool, value)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(userconfig.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(userconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userconfig.UserTable,
			Columns: []string{userconfig.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userconfig.UserTable,
			Columns: []string{userconfig.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AnonymousUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userconfig.AnonymousUserTable,
			Columns: []string{userconfig.AnonymousUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(anonymoususer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AnonymousUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userconfig.AnonymousUserTable,
			Columns: []string{userconfig.AnonymousUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(anonymoususer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userconfig.HistoryTable,
			Columns: []string{userconfig.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(confighistory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedHistoryIDs(); len(nodes) > 0 && !_u.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userconfig.HistoryTable,
			Columns: []string{userconfig.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(confighistory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.HistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userconfig.HistoryTable,
			Columns: []string{userconfig.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(confighistory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserConfig{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
