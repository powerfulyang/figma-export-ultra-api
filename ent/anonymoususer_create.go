// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fiber-ent-apollo-pg/ent/anonymoususer"
	"fiber-ent-apollo-pg/ent/exportrecord"
	"fiber-ent-apollo-pg/ent/userconfig"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AnonymousUserCreate is the builder for creating a AnonymousUser entity.
type AnonymousUserCreate struct {
	config
	mutation *AnonymousUserMutation
	hooks    []Hook
}

// SetBrowserFingerprint sets the "browser_fingerprint" field.
func (_c *AnonymousUserCreate) SetBrowserFingerprint(v string) *AnonymousUserCreate {
	_c.mutation.SetBrowserFingerprint(v)
	return _c
}

// SetUserAgent sets the "user_agent" field.
func (_c *AnonymousUserCreate) SetUserAgent(v string) *AnonymousUserCreate {
	_c.mutation.SetUserAgent(v)
	return _c
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_c *AnonymousUserCreate) SetNillableUserAgent(v *string) *AnonymousUserCreate {
	if v != nil {
		_c.SetUserAgent(*v)
	}
	return _c
}

// SetIPAddress sets the "ip_address" field.
func (_c *AnonymousUserCreate) SetIPAddress(v string) *AnonymousUserCreate {
	_c.mutation.SetIPAddress(v)
	return _c
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_c *AnonymousUserCreate) SetNillableIPAddress(v *string) *AnonymousUserCreate {
	if v != nil {
		_c.SetIPAddress(*v)
	}
	return _c
}

// SetTimezone sets the "timezone" field.
func (_c *AnonymousUserCreate) SetTimezone(v string) *AnonymousUserCreate {
	_c.mutation.SetTimezone(v)
	return _c
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (_c *AnonymousUserCreate) SetNillableTimezone(v *string) *AnonymousUserCreate {
	if v != nil {
		_c.SetTimezone(*v)
	}
	return _c
}

// SetLanguage sets the "language" field.
func (_c *AnonymousUserCreate) SetLanguage(v string) *AnonymousUserCreate {
	_c.mutation.SetLanguage(v)
	return _c
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (_c *AnonymousUserCreate) SetNillableLanguage(v *string) *AnonymousUserCreate {
	if v != nil {
		_c.SetLanguage(*v)
	}
	return _c
}

// SetScreenResolution sets the "screen_resolution" field.
func (_c *AnonymousUserCreate) SetScreenResolution(v string) *AnonymousUserCreate {
	_c.mutation.SetScreenResolution(v)
	return _c
}

// SetNillableScreenResolution sets the "screen_resolution" field if the given value is not nil.
func (_c *AnonymousUserCreate) SetNillableScreenResolution(v *string) *AnonymousUserCreate {
	if v != nil {
		_c.SetScreenResolution(*v)
	}
	return _c
}

// SetIsActive sets the "is_active" field.
func (_c *AnonymousUserCreate) SetIsActive(v bool) *AnonymousUserCreate {
	_c.mutation.SetIsActive(v)
	return _c
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_c *AnonymousUserCreate) SetNillableIsActive(v *bool) *AnonymousUserCreate {
	if v != nil {
		_c.SetIsActive(*v)
	}
	return _c
}

// SetLastActivityAt sets the "last_activity_at" field.
func (_c *AnonymousUserCreate) SetLastActivityAt(v time.Time) *AnonymousUserCreate {
	_c.mutation.SetLastActivityAt(v)
	return _c
}

// SetNillableLastActivityAt sets the "last_activity_at" field if the given value is not nil.
func (_c *AnonymousUserCreate) SetNillableLastActivityAt(v *time.Time) *AnonymousUserCreate {
	if v != nil {
		_c.SetLastActivityAt(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *AnonymousUserCreate) SetCreatedAt(v time.Time) *AnonymousUserCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *AnonymousUserCreate) SetNillableCreatedAt(v *time.Time) *AnonymousUserCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *AnonymousUserCreate) SetUpdatedAt(v time.Time) *AnonymousUserCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetID sets the "id" field.
func (_c *AnonymousUserCreate) SetID(v uuid.UUID) *AnonymousUserCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *AnonymousUserCreate) SetNillableID(v *uuid.UUID) *AnonymousUserCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// AddConfigIDs adds the "configs" edge to the UserConfig entity by IDs.
func (_c *AnonymousUserCreate) AddConfigIDs(ids ...uuid.UUID) *AnonymousUserCreate {
	_c.mutation.AddConfigIDs(ids...)
	return _c
}

// AddConfigs adds the "configs" edges to the UserConfig entity.
func (_c *AnonymousUserCreate) AddConfigs(v ...*UserConfig) *AnonymousUserCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddConfigIDs(ids...)
}

// AddExportRecordIDs adds the "export_records" edge to the ExportRecord entity by IDs.
func (_c *AnonymousUserCreate) AddExportRecordIDs(ids ...uuid.UUID) *AnonymousUserCreate {
	_c.mutation.AddExportRecordIDs(ids...)
	return _c
}

// AddExportRecords adds the "export_records" edges to the ExportRecord entity.
func (_c *AnonymousUserCreate) AddExportRecords(v ...*ExportRecord) *AnonymousUserCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddExportRecordIDs(ids...)
}

// Mutation returns the AnonymousUserMutation object of the builder.
func (_c *AnonymousUserCreate) Mutation() *AnonymousUserMutation {
	return _c.mutation
}

// Save creates the AnonymousUser in the database.
func (_c *AnonymousUserCreate) Save(ctx context.Context) (*AnonymousUser, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *AnonymousUserCreate) SaveX(ctx context.Context) *AnonymousUser {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AnonymousUserCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AnonymousUserCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *AnonymousUserCreate) defaults() {
	if _, ok := _c.mutation.IsActive(); !ok {
		v := anonymoususer.DefaultIsActive
		_c.mutation.SetIsActive(v)
	}
	if _, ok := _c.mutation.LastActivityAt(); !ok {
		v := anonymoususer.DefaultLastActivityAt
		_c.mutation.SetLastActivityAt(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := anonymoususer.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := anonymoususer.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *AnonymousUserCreate) check() error {
	if _, ok := _c.mutation.BrowserFingerprint(); !ok {
		return &ValidationError{Name: "browser_fingerprint", err: errors.New(`ent: missing required field "AnonymousUser.browser_fingerprint"`)}
	}
	if v, ok := _c.mutation.BrowserFingerprint(); ok {
		if err := anonymoususer.BrowserFingerprintValidator(v); err != nil {
			return &ValidationError{Name: "browser_fingerprint", err: fmt.Errorf(`ent: validator failed for field "AnonymousUser.browser_fingerprint": %w`, err)}
		}
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "AnonymousUser.is_active"`)}
	}
	if _, ok := _c.mutation.LastActivityAt(); !ok {
		return &ValidationError{Name: "last_activity_at", err: errors.New(`ent: missing required field "AnonymousUser.last_activity_at"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AnonymousUser.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AnonymousUser.updated_at"`)}
	}
	return nil
}

func (_c *AnonymousUserCreate) sqlSave(ctx context.Context) (*AnonymousUser, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *AnonymousUserCreate) createSpec() (*AnonymousUser, *sqlgraph.CreateSpec) {
	var (
		_node = &AnonymousUser{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(anonymoususer.Table, sqlgraph.NewFieldSpec(anonymoususer.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.BrowserFingerprint(); ok {
		_spec.SetField(anonymoususer.FieldBrowserFingerprint, field.TypeString, value)
		_node.BrowserFingerprint = value
	}
	if value, ok := _c.mutation.UserAgent(); ok {
		_spec.SetField(anonymoususer.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := _c.mutation.IPAddress(); ok {
		_spec.SetField(anonymoususer.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := _c.mutation.Timezone(); ok {
		_spec.SetField(anonymoususer.FieldTimezone, field.TypeString, value)
		_node.Timezone = value
	}
	if value, ok := _c.mutation.Language(); ok {
		_spec.SetField(anonymoususer.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := _c.mutation.ScreenResolution(); ok {
		_spec.SetField(anonymoususer.FieldScreenResolution, field.TypeString, value)
		_node.ScreenResolution = value
	}
	if value, ok := _c.mutation.IsActive(); ok {
		_spec.SetField(anonymoususer.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := _c.mutation.LastActivityAt(); ok {
		_spec.SetField(anonymoususer.FieldLastActivityAt, field.TypeTime, value)
		_node.LastActivityAt = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(anonymoususer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(anonymoususer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.ConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   anonymoususer.ConfigsTable,
			Columns: []string{anonymoususer.ConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconfig.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ExportRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   anonymoususer.ExportRecordsTable,
			Columns: []string{anonymoususer.ExportRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exportrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AnonymousUserCreateBulk is the builder for creating many AnonymousUser entities in bulk.
type AnonymousUserCreateBulk struct {
	config
	err      error
	builders []*AnonymousUserCreate
}

// Save creates the AnonymousUser entities in the database.
func (_c *AnonymousUserCreateBulk) Save(ctx context.Context) ([]*AnonymousUser, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*AnonymousUser, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AnonymousUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *AnonymousUserCreateBulk) SaveX(ctx context.Context) []*AnonymousUser {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AnonymousUserCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AnonymousUserCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
