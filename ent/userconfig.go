// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fiber-ent-apollo-pg/ent/anonymoususer"
	"fiber-ent-apollo-pg/ent/user"
	"fiber-ent-apollo-pg/ent/userconfig"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// UserConfig is the model entity for the UserConfig schema.
type UserConfig struct {
	config `json:"-"`
	// ID of the ent.
	// 配置唯一标识
	ID uuid.UUID `json:"id,omitempty"`
	// 配置名称
	Name string `json:"name,omitempty"`
	// 配置数据JSON
	ConfigData map[string]interface{} `json:"config_data,omitempty"`
	// 配置版本
	Version string `json:"version,omitempty"`
	// 配置描述
	Description string `json:"description,omitempty"`
	// 是否为默认配置
	IsDefault bool `json:"is_default,omitempty"`
	// 是否启用
	IsActive bool `json:"is_active,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserConfigQuery when eager-loading is set.
	Edges                  UserConfigEdges `json:"edges"`
	anonymous_user_configs *uuid.UUID
	user_configs           *uuid.UUID
	selectValues           sql.SelectValues
}

// UserConfigEdges holds the relations/edges for other nodes in the graph.
type UserConfigEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// AnonymousUser holds the value of the anonymous_user edge.
	AnonymousUser *AnonymousUser `json:"anonymous_user,omitempty"`
	// History holds the value of the history edge.
	History []*ConfigHistory `json:"history,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserConfigEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AnonymousUserOrErr returns the AnonymousUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserConfigEdges) AnonymousUserOrErr() (*AnonymousUser, error) {
	if e.AnonymousUser != nil {
		return e.AnonymousUser, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: anonymoususer.Label}
	}
	return nil, &NotLoadedError{edge: "anonymous_user"}
}

// HistoryOrErr returns the History value or an error if the edge
// was not loaded in eager-loading.
func (e UserConfigEdges) HistoryOrErr() ([]*ConfigHistory, error) {
	if e.loadedTypes[2] {
		return e.History, nil
	}
	return nil, &NotLoadedError{edge: "history"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userconfig.FieldConfigData:
			values[i] = new([]byte)
		case userconfig.FieldIsDefault, userconfig.FieldIsActive:
			values[i] = new(sql.NullBool)
		case userconfig.FieldName, userconfig.FieldVersion, userconfig.FieldDescription:
			values[i] = new(sql.NullString)
		case userconfig.FieldCreatedAt, userconfig.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case userconfig.FieldID:
			values[i] = new(uuid.UUID)
		case userconfig.ForeignKeys[0]: // anonymous_user_configs
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case userconfig.ForeignKeys[1]: // user_configs
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserConfig fields.
func (_m *UserConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userconfig.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case userconfig.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case userconfig.FieldConfigData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field config_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.ConfigData); err != nil {
					return fmt.Errorf("unmarshal field config_data: %w", err)
				}
			}
		case userconfig.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				_m.Version = value.String
			}
		case userconfig.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case userconfig.FieldIsDefault:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_default", values[i])
			} else if value.Valid {
				_m.IsDefault = value.Bool
			}
		case userconfig.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				_m.IsActive = value.Bool
			}
		case userconfig.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case userconfig.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case userconfig.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field anonymous_user_configs", values[i])
			} else if value.Valid {
				_m.anonymous_user_configs = new(uuid.UUID)
				*_m.anonymous_user_configs = *value.S.(*uuid.UUID)
			}
		case userconfig.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_configs", values[i])
			} else if value.Valid {
				_m.user_configs = new(uuid.UUID)
				*_m.user_configs = *value.S.(*uuid.UUID)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserConfig.
// This includes values selected through modifiers, order, etc.
func (_m *UserConfig) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserConfig entity.
func (_m *UserConfig) QueryUser() *UserQuery {
	return NewUserConfigClient(_m.config).QueryUser(_m)
}

// QueryAnonymousUser queries the "anonymous_user" edge of the UserConfig entity.
func (_m *UserConfig) QueryAnonymousUser() *AnonymousUserQuery {
	return NewUserConfigClient(_m.config).QueryAnonymousUser(_m)
}

// QueryHistory queries the "history" edge of the UserConfig entity.
func (_m *UserConfig) QueryHistory() *ConfigHistoryQuery {
	return NewUserConfigClient(_m.config).QueryHistory(_m)
}

// Update returns a builder for updating this UserConfig.
// Note that you need to call UserConfig.Unwrap() before calling this method if this UserConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *UserConfig) Update() *UserConfigUpdateOne {
	return NewUserConfigClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the UserConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *UserConfig) Unwrap() *UserConfig {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserConfig is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *UserConfig) String() string {
	var builder strings.Builder
	builder.WriteString("UserConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("config_data=")
	builder.WriteString(fmt.Sprintf("%v", _m.ConfigData))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(_m.Version)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("is_default=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsDefault))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsActive))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserConfigs is a parsable slice of UserConfig.
type UserConfigs []*UserConfig
