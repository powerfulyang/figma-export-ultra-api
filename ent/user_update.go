// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fiber-ent-apollo-pg/ent/exportrecord"
	"fiber-ent-apollo-pg/ent/predicate"
	"fiber-ent-apollo-pg/ent/user"
	"fiber-ent-apollo-pg/ent/userauth"
	"fiber-ent-apollo-pg/ent/userconfig"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUsername sets the "username" field.
func (_u *UserUpdate) SetUsername(v string) *UserUpdate {
	_u.mutation.SetUsername(v)
	return _u
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (_u *UserUpdate) SetNillableUsername(v *string) *UserUpdate {
	if v != nil {
		_u.SetUsername(*v)
	}
	return _u
}

// SetDisplayName sets the "display_name" field.
func (_u *UserUpdate) SetDisplayName(v string) *UserUpdate {
	_u.mutation.SetDisplayName(v)
	return _u
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableDisplayName(v *string) *UserUpdate {
	if v != nil {
		_u.SetDisplayName(*v)
	}
	return _u
}

// ClearDisplayName clears the value of the "display_name" field.
func (_u *UserUpdate) ClearDisplayName() *UserUpdate {
	_u.mutation.ClearDisplayName()
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdate) SetEmail(v string) *UserUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdate) SetNillableEmail(v *string) *UserUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *UserUpdate) ClearEmail() *UserUpdate {
	_u.mutation.ClearEmail()
	return _u
}

// SetAvatarURL sets the "avatar_url" field.
func (_u *UserUpdate) SetAvatarURL(v string) *UserUpdate {
	_u.mutation.SetAvatarURL(v)
	return _u
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (_u *UserUpdate) SetNillableAvatarURL(v *string) *UserUpdate {
	if v != nil {
		_u.SetAvatarURL(*v)
	}
	return _u
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (_u *UserUpdate) ClearAvatarURL() *UserUpdate {
	_u.mutation.ClearAvatarURL()
	return _u
}

// SetBio sets the "bio" field.
func (_u *UserUpdate) SetBio(v string) *UserUpdate {
	_u.mutation.SetBio(v)
	return _u
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (_u *UserUpdate) SetNillableBio(v *string) *UserUpdate {
	if v != nil {
		_u.SetBio(*v)
	}
	return _u
}

// ClearBio clears the value of the "bio" field.
func (_u *UserUpdate) ClearBio() *UserUpdate {
	_u.mutation.ClearBio()
	return _u
}

// SetTimezone sets the "timezone" field.
func (_u *UserUpdate) SetTimezone(v string) *UserUpdate {
	_u.mutation.SetTimezone(v)
	return _u
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (_u *UserUpdate) SetNillableTimezone(v *string) *UserUpdate {
	if v != nil {
		_u.SetTimezone(*v)
	}
	return _u
}

// ClearTimezone clears the value of the "timezone" field.
func (_u *UserUpdate) ClearTimezone() *UserUpdate {
	_u.mutation.ClearTimezone()
	return _u
}

// SetLanguage sets the "language" field.
func (_u *UserUpdate) SetLanguage(v string) *UserUpdate {
	_u.mutation.SetLanguage(v)
	return _u
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLanguage(v *string) *UserUpdate {
	if v != nil {
		_u.SetLanguage(*v)
	}
	return _u
}

// ClearLanguage clears the value of the "language" field.
func (_u *UserUpdate) ClearLanguage() *UserUpdate {
	_u.mutation.ClearLanguage()
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *UserUpdate) SetIsActive(v bool) *UserUpdate {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *UserUpdate) SetNillableIsActive(v *bool) *UserUpdate {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetLastLoginAt sets the "last_login_at" field.
func (_u *UserUpdate) SetLastLoginAt(v time.Time) *UserUpdate {
	_u.mutation.SetLastLoginAt(v)
	return _u
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLastLoginAt(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetLastLoginAt(*v)
	}
	return _u
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (_u *UserUpdate) ClearLastLoginAt() *UserUpdate {
	_u.mutation.ClearLastLoginAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdate) SetUpdatedAt(v time.Time) *UserUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddAuthMethodIDs adds the "auth_methods" edge to the UserAuth entity by IDs.
func (_u *UserUpdate) AddAuthMethodIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.AddAuthMethodIDs(ids...)
	return _u
}

// AddAuthMethods adds the "auth_methods" edges to the UserAuth entity.
func (_u *UserUpdate) AddAuthMethods(v ...*UserAuth) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAuthMethodIDs(ids...)
}

// AddConfigIDs adds the "configs" edge to the UserConfig entity by IDs.
func (_u *UserUpdate) AddConfigIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.AddConfigIDs(ids...)
	return _u
}

// AddConfigs adds the "configs" edges to the UserConfig entity.
func (_u *UserUpdate) AddConfigs(v ...*UserConfig) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddConfigIDs(ids...)
}

// AddExportRecordIDs adds the "export_records" edge to the ExportRecord entity by IDs.
func (_u *UserUpdate) AddExportRecordIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.AddExportRecordIDs(ids...)
	return _u
}

// AddExportRecords adds the "export_records" edges to the ExportRecord entity.
func (_u *UserUpdate) AddExportRecords(v ...*ExportRecord) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddExportRecordIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdate) Mutation() *UserMutation {
	return _u.mutation
}

// ClearAuthMethods clears all "auth_methods" edges to the UserAuth entity.
func (_u *UserUpdate) ClearAuthMethods() *UserUpdate {
	_u.mutation.ClearAuthMethods()
	return _u
}

// RemoveAuthMethodIDs removes the "auth_methods" edge to UserAuth entities by IDs.
func (_u *UserUpdate) RemoveAuthMethodIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.RemoveAuthMethodIDs(ids...)
	return _u
}

// RemoveAuthMethods removes "auth_methods" edges to UserAuth entities.
func (_u *UserUpdate) RemoveAuthMethods(v ...*UserAuth) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAuthMethodIDs(ids...)
}

// ClearConfigs clears all "configs" edges to the UserConfig entity.
func (_u *UserUpdate) ClearConfigs() *UserUpdate {
	_u.mutation.ClearConfigs()
	return _u
}

// RemoveConfigIDs removes the "configs" edge to UserConfig entities by IDs.
func (_u *UserUpdate) RemoveConfigIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.RemoveConfigIDs(ids...)
	return _u
}

// RemoveConfigs removes "configs" edges to UserConfig entities.
func (_u *UserUpdate) RemoveConfigs(v ...*UserConfig) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveConfigIDs(ids...)
}

// ClearExportRecords clears all "export_records" edges to the ExportRecord entity.
func (_u *UserUpdate) ClearExportRecords() *UserUpdate {
	_u.mutation.ClearExportRecords()
	return _u
}

// RemoveExportRecordIDs removes the "export_records" edge to ExportRecord entities by IDs.
func (_u *UserUpdate) RemoveExportRecordIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.RemoveExportRecordIDs(ids...)
	return _u
}

// RemoveExportRecords removes "export_records" edges to ExportRecord entities.
func (_u *UserUpdate) RemoveExportRecords(v ...*ExportRecord) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveExportRecordIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdate) check() error {
	if v, ok := _u.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	return nil
}

func (_u *UserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := _u.mutation.DisplayName(); ok {
		_spec.SetField(user.FieldDisplayName, field.TypeString, value)
	}
	if _u.mutation.DisplayNameCleared() {
		_spec.ClearField(user.FieldDisplayName, field.TypeString)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeString, value)
	}
	if _u.mutation.AvatarURLCleared() {
		_spec.ClearField(user.FieldAvatarURL, field.TypeString)
	}
	if value, ok := _u.mutation.Bio(); ok {
		_spec.SetField(user.FieldBio, field.TypeString, value)
	}
	if _u.mutation.BioCleared() {
		_spec.ClearField(user.FieldBio, field.TypeString)
	}
	if value, ok := _u.mutation.Timezone(); ok {
		_spec.SetField(user.FieldTimezone, field.TypeString, value)
	}
	if _u.mutation.TimezoneCleared() {
		_spec.ClearField(user.FieldTimezone, field.TypeString)
	}
	if value, ok := _u.mutation.Language(); ok {
		_spec.SetField(user.FieldLanguage, field.TypeString, value)
	}
	if _u.mutation.LanguageCleared() {
		_spec.ClearField(user.FieldLanguage, field.TypeString)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(user.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.LastLoginAt(); ok {
		_spec.SetField(user.FieldLastLoginAt, field.TypeTime, value)
	}
	if _u.mutation.LastLoginAtCleared() {
		_spec.ClearField(user.FieldLastLoginAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.AuthMethodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthMethodsTable,
			Columns: []string{user.AuthMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userauth.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAuthMethodsIDs(); len(nodes) > 0 && !_u.mutation.AuthMethodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthMethodsTable,
			Columns: []string{user.AuthMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userauth.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AuthMethodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthMethodsTable,
			Columns: []string{user.AuthMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userauth.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ConfigsTable,
			Columns: []string{user.ConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconfig.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedConfigsIDs(); len(nodes) > 0 && !_u.mutation.ConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ConfigsTable,
			Columns: []string{user.ConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconfig.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ConfigsTable,
			Columns: []string{user.ConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconfig.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ExportRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ExportRecordsTable,
			Columns: []string{user.ExportRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exportrecord.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedExportRecordsIDs(); len(nodes) > 0 && !_u.mutation.ExportRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ExportRecordsTable,
			Columns: []string{user.ExportRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exportrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ExportRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ExportRecordsTable,
			Columns: []string{user.ExportRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exportrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUsername sets the "username" field.
func (_u *UserUpdateOne) SetUsername(v string) *UserUpdateOne {
	_u.mutation.SetUsername(v)
	return _u
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableUsername(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetUsername(*v)
	}
	return _u
}

// SetDisplayName sets the "display_name" field.
func (_u *UserUpdateOne) SetDisplayName(v string) *UserUpdateOne {
	_u.mutation.SetDisplayName(v)
	return _u
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableDisplayName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetDisplayName(*v)
	}
	return _u
}

// ClearDisplayName clears the value of the "display_name" field.
func (_u *UserUpdateOne) ClearDisplayName() *UserUpdateOne {
	_u.mutation.ClearDisplayName()
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdateOne) SetEmail(v string) *UserUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableEmail(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *UserUpdateOne) ClearEmail() *UserUpdateOne {
	_u.mutation.ClearEmail()
	return _u
}

// SetAvatarURL sets the "avatar_url" field.
func (_u *UserUpdateOne) SetAvatarURL(v string) *UserUpdateOne {
	_u.mutation.SetAvatarURL(v)
	return _u
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableAvatarURL(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetAvatarURL(*v)
	}
	return _u
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (_u *UserUpdateOne) ClearAvatarURL() *UserUpdateOne {
	_u.mutation.ClearAvatarURL()
	return _u
}

// SetBio sets the "bio" field.
func (_u *UserUpdateOne) SetBio(v string) *UserUpdateOne {
	_u.mutation.SetBio(v)
	return _u
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableBio(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetBio(*v)
	}
	return _u
}

// ClearBio clears the value of the "bio" field.
func (_u *UserUpdateOne) ClearBio() *UserUpdateOne {
	_u.mutation.ClearBio()
	return _u
}

// SetTimezone sets the "timezone" field.
func (_u *UserUpdateOne) SetTimezone(v string) *UserUpdateOne {
	_u.mutation.SetTimezone(v)
	return _u
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableTimezone(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetTimezone(*v)
	}
	return _u
}

// ClearTimezone clears the value of the "timezone" field.
func (_u *UserUpdateOne) ClearTimezone() *UserUpdateOne {
	_u.mutation.ClearTimezone()
	return _u
}

// SetLanguage sets the "language" field.
func (_u *UserUpdateOne) SetLanguage(v string) *UserUpdateOne {
	_u.mutation.SetLanguage(v)
	return _u
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLanguage(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetLanguage(*v)
	}
	return _u
}

// ClearLanguage clears the value of the "language" field.
func (_u *UserUpdateOne) ClearLanguage() *UserUpdateOne {
	_u.mutation.ClearLanguage()
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *UserUpdateOne) SetIsActive(v bool) *UserUpdateOne {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableIsActive(v *bool) *UserUpdateOne {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetLastLoginAt sets the "last_login_at" field.
func (_u *UserUpdateOne) SetLastLoginAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetLastLoginAt(v)
	return _u
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLastLoginAt(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetLastLoginAt(*v)
	}
	return _u
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (_u *UserUpdateOne) ClearLastLoginAt() *UserUpdateOne {
	_u.mutation.ClearLastLoginAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdateOne) SetUpdatedAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddAuthMethodIDs adds the "auth_methods" edge to the UserAuth entity by IDs.
func (_u *UserUpdateOne) AddAuthMethodIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.AddAuthMethodIDs(ids...)
	return _u
}

// AddAuthMethods adds the "auth_methods" edges to the UserAuth entity.
func (_u *UserUpdateOne) AddAuthMethods(v ...*UserAuth) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAuthMethodIDs(ids...)
}

// AddConfigIDs adds the "configs" edge to the UserConfig entity by IDs.
func (_u *UserUpdateOne) AddConfigIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.AddConfigIDs(ids...)
	return _u
}

// AddConfigs adds the "configs" edges to the UserConfig entity.
func (_u *UserUpdateOne) AddConfigs(v ...*UserConfig) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddConfigIDs(ids...)
}

// AddExportRecordIDs adds the "export_records" edge to the ExportRecord entity by IDs.
func (_u *UserUpdateOne) AddExportRecordIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.AddExportRecordIDs(ids...)
	return _u
}

// AddExportRecords adds the "export_records" edges to the ExportRecord entity.
func (_u *UserUpdateOne) AddExportRecords(v ...*ExportRecord) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddExportRecordIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdateOne) Mutation() *UserMutation {
	return _u.mutation
}

// ClearAuthMethods clears all "auth_methods" edges to the UserAuth entity.
func (_u *UserUpdateOne) ClearAuthMethods() *UserUpdateOne {
	_u.mutation.ClearAuthMethods()
	return _u
}

// RemoveAuthMethodIDs removes the "auth_methods" edge to UserAuth entities by IDs.
func (_u *UserUpdateOne) RemoveAuthMethodIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.RemoveAuthMethodIDs(ids...)
	return _u
}

// RemoveAuthMethods removes "auth_methods" edges to UserAuth entities.
func (_u *UserUpdateOne) RemoveAuthMethods(v ...*UserAuth) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAuthMethodIDs(ids...)
}

// ClearConfigs clears all "configs" edges to the UserConfig entity.
func (_u *UserUpdateOne) ClearConfigs() *UserUpdateOne {
	_u.mutation.ClearConfigs()
	return _u
}

// RemoveConfigIDs removes the "configs" edge to UserConfig entities by IDs.
func (_u *UserUpdateOne) RemoveConfigIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.RemoveConfigIDs(ids...)
	return _u
}

// RemoveConfigs removes "configs" edges to UserConfig entities.
func (_u *UserUpdateOne) RemoveConfigs(v ...*UserConfig) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveConfigIDs(ids...)
}

// ClearExportRecords clears all "export_records" edges to the ExportRecord entity.
func (_u *UserUpdateOne) ClearExportRecords() *UserUpdateOne {
	_u.mutation.ClearExportRecords()
	return _u
}

// RemoveExportRecordIDs removes the "export_records" edge to ExportRecord entities by IDs.
func (_u *UserUpdateOne) RemoveExportRecordIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.RemoveExportRecordIDs(ids...)
	return _u
}

// RemoveExportRecords removes "export_records" edges to ExportRecord entities.
func (_u *UserUpdateOne) RemoveExportRecords(v ...*ExportRecord) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveExportRecordIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated User entity.
func (_u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdateOne) check() error {
	if v, ok := _u.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	return nil
}

func (_u *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := _u.mutation.DisplayName(); ok {
		_spec.SetField(user.FieldDisplayName, field.TypeString, value)
	}
	if _u.mutation.DisplayNameCleared() {
		_spec.ClearField(user.FieldDisplayName, field.TypeString)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeString, value)
	}
	if _u.mutation.AvatarURLCleared() {
		_spec.ClearField(user.FieldAvatarURL, field.TypeString)
	}
	if value, ok := _u.mutation.Bio(); ok {
		_spec.SetField(user.FieldBio, field.TypeString, value)
	}
	if _u.mutation.BioCleared() {
		_spec.ClearField(user.FieldBio, field.TypeString)
	}
	if value, ok := _u.mutation.Timezone(); ok {
		_spec.SetField(user.FieldTimezone, field.TypeString, value)
	}
	if _u.mutation.TimezoneCleared() {
		_spec.ClearField(user.FieldTimezone, field.TypeString)
	}
	if value, ok := _u.mutation.Language(); ok {
		_spec.SetField(user.FieldLanguage, field.TypeString, value)
	}
	if _u.mutation.LanguageCleared() {
		_spec.ClearField(user.FieldLanguage, field.TypeString)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(user.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.LastLoginAt(); ok {
		_spec.SetField(user.FieldLastLoginAt, field.TypeTime, value)
	}
	if _u.mutation.LastLoginAtCleared() {
		_spec.ClearField(user.FieldLastLoginAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.AuthMethodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthMethodsTable,
			Columns: []string{user.AuthMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userauth.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAuthMethodsIDs(); len(nodes) > 0 && !_u.mutation.AuthMethodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthMethodsTable,
			Columns: []string{user.AuthMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userauth.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AuthMethodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuthMethodsTable,
			Columns: []string{user.AuthMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userauth.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ConfigsTable,
			Columns: []string{user.ConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconfig.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedConfigsIDs(); len(nodes) > 0 && !_u.mutation.ConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ConfigsTable,
			Columns: []string{user.ConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconfig.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ConfigsTable,
			Columns: []string{user.ConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconfig.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ExportRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ExportRecordsTable,
			Columns: []string{user.ExportRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exportrecord.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedExportRecordsIDs(); len(nodes) > 0 && !_u.mutation.ExportRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ExportRecordsTable,
			Columns: []string{user.ExportRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exportrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ExportRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ExportRecordsTable,
			Columns: []string{user.ExportRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exportrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
