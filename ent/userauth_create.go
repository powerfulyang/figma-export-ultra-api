// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fiber-ent-apollo-pg/ent/user"
	"fiber-ent-apollo-pg/ent/userauth"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserAuthCreate is the builder for creating a UserAuth entity.
type UserAuthCreate struct {
	config
	mutation *UserAuthMutation
	hooks    []Hook
}

// SetAuthType sets the "auth_type" field.
func (_c *UserAuthCreate) SetAuthType(v userauth.AuthType) *UserAuthCreate {
	_c.mutation.SetAuthType(v)
	return _c
}

// SetIdentifier sets the "identifier" field.
func (_c *UserAuthCreate) SetIdentifier(v string) *UserAuthCreate {
	_c.mutation.SetIdentifier(v)
	return _c
}

// SetCredential sets the "credential" field.
func (_c *UserAuthCreate) SetCredential(v string) *UserAuthCreate {
	_c.mutation.SetCredential(v)
	return _c
}

// SetNillableCredential sets the "credential" field if the given value is not nil.
func (_c *UserAuthCreate) SetNillableCredential(v *string) *UserAuthCreate {
	if v != nil {
		_c.SetCredential(*v)
	}
	return _c
}

// SetProviderUserID sets the "provider_user_id" field.
func (_c *UserAuthCreate) SetProviderUserID(v string) *UserAuthCreate {
	_c.mutation.SetProviderUserID(v)
	return _c
}

// SetNillableProviderUserID sets the "provider_user_id" field if the given value is not nil.
func (_c *UserAuthCreate) SetNillableProviderUserID(v *string) *UserAuthCreate {
	if v != nil {
		_c.SetProviderUserID(*v)
	}
	return _c
}

// SetProviderUsername sets the "provider_username" field.
func (_c *UserAuthCreate) SetProviderUsername(v string) *UserAuthCreate {
	_c.mutation.SetProviderUsername(v)
	return _c
}

// SetNillableProviderUsername sets the "provider_username" field if the given value is not nil.
func (_c *UserAuthCreate) SetNillableProviderUsername(v *string) *UserAuthCreate {
	if v != nil {
		_c.SetProviderUsername(*v)
	}
	return _c
}

// SetProviderEmail sets the "provider_email" field.
func (_c *UserAuthCreate) SetProviderEmail(v string) *UserAuthCreate {
	_c.mutation.SetProviderEmail(v)
	return _c
}

// SetNillableProviderEmail sets the "provider_email" field if the given value is not nil.
func (_c *UserAuthCreate) SetNillableProviderEmail(v *string) *UserAuthCreate {
	if v != nil {
		_c.SetProviderEmail(*v)
	}
	return _c
}

// SetProviderAvatar sets the "provider_avatar" field.
func (_c *UserAuthCreate) SetProviderAvatar(v string) *UserAuthCreate {
	_c.mutation.SetProviderAvatar(v)
	return _c
}

// SetNillableProviderAvatar sets the "provider_avatar" field if the given value is not nil.
func (_c *UserAuthCreate) SetNillableProviderAvatar(v *string) *UserAuthCreate {
	if v != nil {
		_c.SetProviderAvatar(*v)
	}
	return _c
}

// SetProviderData sets the "provider_data" field.
func (_c *UserAuthCreate) SetProviderData(v map[string]interface{}) *UserAuthCreate {
	_c.mutation.SetProviderData(v)
	return _c
}

// SetAccessToken sets the "access_token" field.
func (_c *UserAuthCreate) SetAccessToken(v string) *UserAuthCreate {
	_c.mutation.SetAccessToken(v)
	return _c
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (_c *UserAuthCreate) SetNillableAccessToken(v *string) *UserAuthCreate {
	if v != nil {
		_c.SetAccessToken(*v)
	}
	return _c
}

// SetRefreshToken sets the "refresh_token" field.
func (_c *UserAuthCreate) SetRefreshToken(v string) *UserAuthCreate {
	_c.mutation.SetRefreshToken(v)
	return _c
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (_c *UserAuthCreate) SetNillableRefreshToken(v *string) *UserAuthCreate {
	if v != nil {
		_c.SetRefreshToken(*v)
	}
	return _c
}

// SetTokenExpiresAt sets the "token_expires_at" field.
func (_c *UserAuthCreate) SetTokenExpiresAt(v time.Time) *UserAuthCreate {
	_c.mutation.SetTokenExpiresAt(v)
	return _c
}

// SetNillableTokenExpiresAt sets the "token_expires_at" field if the given value is not nil.
func (_c *UserAuthCreate) SetNillableTokenExpiresAt(v *time.Time) *UserAuthCreate {
	if v != nil {
		_c.SetTokenExpiresAt(*v)
	}
	return _c
}

// SetIsPrimary sets the "is_primary" field.
func (_c *UserAuthCreate) SetIsPrimary(v bool) *UserAuthCreate {
	_c.mutation.SetIsPrimary(v)
	return _c
}

// SetIsEnabled sets the "is_enabled" field.
func (_c *UserAuthCreate) SetIsEnabled(v bool) *UserAuthCreate {
	_c.mutation.SetIsEnabled(v)
	return _c
}

// SetLastUsedAt sets the "last_used_at" field.
func (_c *UserAuthCreate) SetLastUsedAt(v time.Time) *UserAuthCreate {
	_c.mutation.SetLastUsedAt(v)
	return _c
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (_c *UserAuthCreate) SetNillableLastUsedAt(v *time.Time) *UserAuthCreate {
	if v != nil {
		_c.SetLastUsedAt(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *UserAuthCreate) SetCreatedAt(v time.Time) *UserAuthCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *UserAuthCreate) SetNillableCreatedAt(v *time.Time) *UserAuthCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *UserAuthCreate) SetUpdatedAt(v time.Time) *UserAuthCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetID sets the "id" field.
func (_c *UserAuthCreate) SetID(v uuid.UUID) *UserAuthCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *UserAuthCreate) SetNillableID(v *uuid.UUID) *UserAuthCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_c *UserAuthCreate) SetUserID(id uuid.UUID) *UserAuthCreate {
	_c.mutation.SetUserID(id)
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *UserAuthCreate) SetUser(v *User) *UserAuthCreate {
	return _c.SetUserID(v.ID)
}

// Mutation returns the UserAuthMutation object of the builder.
func (_c *UserAuthCreate) Mutation() *UserAuthMutation {
	return _c.mutation
}

// Save creates the UserAuth in the database.
func (_c *UserAuthCreate) Save(ctx context.Context) (*UserAuth, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *UserAuthCreate) SaveX(ctx context.Context) *UserAuth {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserAuthCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserAuthCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *UserAuthCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := userauth.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := userauth.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *UserAuthCreate) check() error {
	if _, ok := _c.mutation.AuthType(); !ok {
		return &ValidationError{Name: "auth_type", err: errors.New(`ent: missing required field "UserAuth.auth_type"`)}
	}
	if v, ok := _c.mutation.AuthType(); ok {
		if err := userauth.AuthTypeValidator(v); err != nil {
			return &ValidationError{Name: "auth_type", err: fmt.Errorf(`ent: validator failed for field "UserAuth.auth_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Identifier(); !ok {
		return &ValidationError{Name: "identifier", err: errors.New(`ent: missing required field "UserAuth.identifier"`)}
	}
	if v, ok := _c.mutation.Identifier(); ok {
		if err := userauth.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`ent: validator failed for field "UserAuth.identifier": %w`, err)}
		}
	}
	if _, ok := _c.mutation.IsPrimary(); !ok {
		return &ValidationError{Name: "is_primary", err: errors.New(`ent: missing required field "UserAuth.is_primary"`)}
	}
	if _, ok := _c.mutation.IsEnabled(); !ok {
		return &ValidationError{Name: "is_enabled", err: errors.New(`ent: missing required field "UserAuth.is_enabled"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserAuth.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserAuth.updated_at"`)}
	}
	if len(_c.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserAuth.user"`)}
	}
	return nil
}

func (_c *UserAuthCreate) sqlSave(ctx context.Context) (*UserAuth, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *UserAuthCreate) createSpec() (*UserAuth, *sqlgraph.CreateSpec) {
	var (
		_node = &UserAuth{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(userauth.Table, sqlgraph.NewFieldSpec(userauth.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.AuthType(); ok {
		_spec.SetField(userauth.FieldAuthType, field.TypeEnum, value)
		_node.AuthType = value
	}
	if value, ok := _c.mutation.Identifier(); ok {
		_spec.SetField(userauth.FieldIdentifier, field.TypeString, value)
		_node.Identifier = value
	}
	if value, ok := _c.mutation.Credential(); ok {
		_spec.SetField(userauth.FieldCredential, field.TypeString, value)
		_node.Credential = value
	}
	if value, ok := _c.mutation.ProviderUserID(); ok {
		_spec.SetField(userauth.FieldProviderUserID, field.TypeString, value)
		_node.ProviderUserID = value
	}
	if value, ok := _c.mutation.ProviderUsername(); ok {
		_spec.SetField(userauth.FieldProviderUsername, field.TypeString, value)
		_node.ProviderUsername = value
	}
	if value, ok := _c.mutation.ProviderEmail(); ok {
		_spec.SetField(userauth.FieldProviderEmail, field.TypeString, value)
		_node.ProviderEmail = value
	}
	if value, ok := _c.mutation.ProviderAvatar(); ok {
		_spec.SetField(userauth.FieldProviderAvatar, field.TypeString, value)
		_node.ProviderAvatar = value
	}
	if value, ok := _c.mutation.ProviderData(); ok {
		_spec.SetField(userauth.FieldProviderData, field.TypeJSON, value)
		_node.ProviderData = value
	}
	if value, ok := _c.mutation.AccessToken(); ok {
		_spec.SetField(userauth.FieldAccessToken, field.TypeString, value)
		_node.AccessToken = value
	}
	if value, ok := _c.mutation.RefreshToken(); ok {
		_spec.SetField(userauth.FieldRefreshToken, field.TypeString, value)
		_node.RefreshToken = value
	}
	if value, ok := _c.mutation.TokenExpiresAt(); ok {
		_spec.SetField(userauth.FieldTokenExpiresAt, field.TypeTime, value)
		_node.TokenExpiresAt = value
	}
	if value, ok := _c.mutation.IsPrimary(); ok {
		_spec.SetField(userauth.FieldIsPrimary, field.TypeBool, value)
		_node.IsPrimary = value
	}
	if value, ok := _c.mutation.IsEnabled(); ok {
		_spec.SetField(userauth.FieldIsEnabled, field.TypeBool, value)
		_node.IsEnabled = value
	}
	if value, ok := _c.mutation.LastUsedAt(); ok {
		_spec.SetField(userauth.FieldLastUsedAt, field.TypeTime, value)
		_node.LastUsedAt = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(userauth.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(userauth.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userauth.UserTable,
			Columns: []string{userauth.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_auth_methods = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserAuthCreateBulk is the builder for creating many UserAuth entities in bulk.
type UserAuthCreateBulk struct {
	config
	err      error
	builders []*UserAuthCreate
}

// Save creates the UserAuth entities in the database.
func (_c *UserAuthCreateBulk) Save(ctx context.Context) ([]*UserAuth, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*UserAuth, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserAuthMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *UserAuthCreateBulk) SaveX(ctx context.Context) []*UserAuth {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserAuthCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserAuthCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
