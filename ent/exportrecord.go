// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fiber-ent-apollo-pg/ent/anonymoususer"
	"fiber-ent-apollo-pg/ent/exportrecord"
	"fiber-ent-apollo-pg/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ExportRecord is the model entity for the ExportRecord schema.
type ExportRecord struct {
	config `json:"-"`
	// ID of the ent.
	// 导出记录唯一标识
	ID uuid.UUID `json:"id,omitempty"`
	// Figma文件ID
	FigmaFileID string `json:"figma_file_id,omitempty"`
	// Figma文件名称
	FigmaFileName string `json:"figma_file_name,omitempty"`
	// Figma文件URL
	FigmaFileURL string `json:"figma_file_url,omitempty"`
	// 导出格式
	ExportFormat exportrecord.ExportFormat `json:"export_format,omitempty"`
	// 导出缩放比例
	ExportScale string `json:"export_scale,omitempty"`
	// 导出设置JSON
	ExportSettings map[string]interface{} `json:"export_settings,omitempty"`
	// 选中的节点ID列表
	SelectedNodes []string `json:"selected_nodes,omitempty"`
	// 总资源数量
	TotalAssets int `json:"total_assets,omitempty"`
	// 已导出资源数量
	ExportedAssets int `json:"exported_assets,omitempty"`
	// 导出状态
	Status exportrecord.Status `json:"status,omitempty"`
	// 下载链接
	DownloadURL string `json:"download_url,omitempty"`
	// 错误信息
	ErrorMessage string `json:"error_message,omitempty"`
	// 操作IP地址
	IPAddress string `json:"ip_address,omitempty"`
	// 用户代理
	UserAgent string `json:"user_agent,omitempty"`
	// 开始导出时间
	StartedAt time.Time `json:"started_at,omitempty"`
	// 完成导出时间
	CompletedAt time.Time `json:"completed_at,omitempty"`
	// 下载链接过期时间
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExportRecordQuery when eager-loading is set.
	Edges                         ExportRecordEdges `json:"edges"`
	anonymous_user_export_records *uuid.UUID
	user_export_records           *uuid.UUID
	selectValues                  sql.SelectValues
}

// ExportRecordEdges holds the relations/edges for other nodes in the graph.
type ExportRecordEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// AnonymousUser holds the value of the anonymous_user edge.
	AnonymousUser *AnonymousUser `json:"anonymous_user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExportRecordEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AnonymousUserOrErr returns the AnonymousUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExportRecordEdges) AnonymousUserOrErr() (*AnonymousUser, error) {
	if e.AnonymousUser != nil {
		return e.AnonymousUser, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: anonymoususer.Label}
	}
	return nil, &NotLoadedError{edge: "anonymous_user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExportRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case exportrecord.FieldExportSettings, exportrecord.FieldSelectedNodes:
			values[i] = new([]byte)
		case exportrecord.FieldTotalAssets, exportrecord.FieldExportedAssets:
			values[i] = new(sql.NullInt64)
		case exportrecord.FieldFigmaFileID, exportrecord.FieldFigmaFileName, exportrecord.FieldFigmaFileURL, exportrecord.FieldExportFormat, exportrecord.FieldExportScale, exportrecord.FieldStatus, exportrecord.FieldDownloadURL, exportrecord.FieldErrorMessage, exportrecord.FieldIPAddress, exportrecord.FieldUserAgent:
			values[i] = new(sql.NullString)
		case exportrecord.FieldStartedAt, exportrecord.FieldCompletedAt, exportrecord.FieldExpiresAt, exportrecord.FieldCreatedAt, exportrecord.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case exportrecord.FieldID:
			values[i] = new(uuid.UUID)
		case exportrecord.ForeignKeys[0]: // anonymous_user_export_records
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case exportrecord.ForeignKeys[1]: // user_export_records
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExportRecord fields.
func (_m *ExportRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case exportrecord.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case exportrecord.FieldFigmaFileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field figma_file_id", values[i])
			} else if value.Valid {
				_m.FigmaFileID = value.String
			}
		case exportrecord.FieldFigmaFileName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field figma_file_name", values[i])
			} else if value.Valid {
				_m.FigmaFileName = value.String
			}
		case exportrecord.FieldFigmaFileURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field figma_file_url", values[i])
			} else if value.Valid {
				_m.FigmaFileURL = value.String
			}
		case exportrecord.FieldExportFormat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field export_format", values[i])
			} else if value.Valid {
				_m.ExportFormat = exportrecord.ExportFormat(value.String)
			}
		case exportrecord.FieldExportScale:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field export_scale", values[i])
			} else if value.Valid {
				_m.ExportScale = value.String
			}
		case exportrecord.FieldExportSettings:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field export_settings", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.ExportSettings); err != nil {
					return fmt.Errorf("unmarshal field export_settings: %w", err)
				}
			}
		case exportrecord.FieldSelectedNodes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field selected_nodes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.SelectedNodes); err != nil {
					return fmt.Errorf("unmarshal field selected_nodes: %w", err)
				}
			}
		case exportrecord.FieldTotalAssets:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_assets", values[i])
			} else if value.Valid {
				_m.TotalAssets = int(value.Int64)
			}
		case exportrecord.FieldExportedAssets:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exported_assets", values[i])
			} else if value.Valid {
				_m.ExportedAssets = int(value.Int64)
			}
		case exportrecord.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = exportrecord.Status(value.String)
			}
		case exportrecord.FieldDownloadURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field download_url", values[i])
			} else if value.Valid {
				_m.DownloadURL = value.String
			}
		case exportrecord.FieldErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_message", values[i])
			} else if value.Valid {
				_m.ErrorMessage = value.String
			}
		case exportrecord.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				_m.IPAddress = value.String
			}
		case exportrecord.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				_m.UserAgent = value.String
			}
		case exportrecord.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				_m.StartedAt = value.Time
			}
		case exportrecord.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				_m.CompletedAt = value.Time
			}
		case exportrecord.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				_m.ExpiresAt = value.Time
			}
		case exportrecord.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case exportrecord.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case exportrecord.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field anonymous_user_export_records", values[i])
			} else if value.Valid {
				_m.anonymous_user_export_records = new(uuid.UUID)
				*_m.anonymous_user_export_records = *value.S.(*uuid.UUID)
			}
		case exportrecord.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_export_records", values[i])
			} else if value.Valid {
				_m.user_export_records = new(uuid.UUID)
				*_m.user_export_records = *value.S.(*uuid.UUID)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ExportRecord.
// This includes values selected through modifiers, order, etc.
func (_m *ExportRecord) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the ExportRecord entity.
func (_m *ExportRecord) QueryUser() *UserQuery {
	return NewExportRecordClient(_m.config).QueryUser(_m)
}

// QueryAnonymousUser queries the "anonymous_user" edge of the ExportRecord entity.
func (_m *ExportRecord) QueryAnonymousUser() *AnonymousUserQuery {
	return NewExportRecordClient(_m.config).QueryAnonymousUser(_m)
}

// Update returns a builder for updating this ExportRecord.
// Note that you need to call ExportRecord.Unwrap() before calling this method if this ExportRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ExportRecord) Update() *ExportRecordUpdateOne {
	return NewExportRecordClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ExportRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ExportRecord) Unwrap() *ExportRecord {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: ExportRecord is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ExportRecord) String() string {
	var builder strings.Builder
	builder.WriteString("ExportRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("figma_file_id=")
	builder.WriteString(_m.FigmaFileID)
	builder.WriteString(", ")
	builder.WriteString("figma_file_name=")
	builder.WriteString(_m.FigmaFileName)
	builder.WriteString(", ")
	builder.WriteString("figma_file_url=")
	builder.WriteString(_m.FigmaFileURL)
	builder.WriteString(", ")
	builder.WriteString("export_format=")
	builder.WriteString(fmt.Sprintf("%v", _m.ExportFormat))
	builder.WriteString(", ")
	builder.WriteString("export_scale=")
	builder.WriteString(_m.ExportScale)
	builder.WriteString(", ")
	builder.WriteString("export_settings=")
	builder.WriteString(fmt.Sprintf("%v", _m.ExportSettings))
	builder.WriteString(", ")
	builder.WriteString("selected_nodes=")
	builder.WriteString(fmt.Sprintf("%v", _m.SelectedNodes))
	builder.WriteString(", ")
	builder.WriteString("total_assets=")
	builder.WriteString(fmt.Sprintf("%v", _m.TotalAssets))
	builder.WriteString(", ")
	builder.WriteString("exported_assets=")
	builder.WriteString(fmt.Sprintf("%v", _m.ExportedAssets))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("download_url=")
	builder.WriteString(_m.DownloadURL)
	builder.WriteString(", ")
	builder.WriteString("error_message=")
	builder.WriteString(_m.ErrorMessage)
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(_m.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(_m.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(_m.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("completed_at=")
	builder.WriteString(_m.CompletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(_m.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ExportRecords is a parsable slice of ExportRecord.
type ExportRecords []*ExportRecord
