// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fiber-ent-apollo-pg/ent/confighistory"
	"fiber-ent-apollo-pg/ent/predicate"
	"fiber-ent-apollo-pg/ent/userconfig"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ConfigHistoryUpdate is the builder for updating ConfigHistory entities.
type ConfigHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *ConfigHistoryMutation
}

// Where appends a list predicates to the ConfigHistoryUpdate builder.
func (_u *ConfigHistoryUpdate) Where(ps ...predicate.ConfigHistory) *ConfigHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetOldConfigData sets the "old_config_data" field.
func (_u *ConfigHistoryUpdate) SetOldConfigData(v map[string]interface{}) *ConfigHistoryUpdate {
	_u.mutation.SetOldConfigData(v)
	return _u
}

// ClearOldConfigData clears the value of the "old_config_data" field.
func (_u *ConfigHistoryUpdate) ClearOldConfigData() *ConfigHistoryUpdate {
	_u.mutation.ClearOldConfigData()
	return _u
}

// SetNewConfigData sets the "new_config_data" field.
func (_u *ConfigHistoryUpdate) SetNewConfigData(v map[string]interface{}) *ConfigHistoryUpdate {
	_u.mutation.SetNewConfigData(v)
	return _u
}

// SetChangeType sets the "change_type" field.
func (_u *ConfigHistoryUpdate) SetChangeType(v string) *ConfigHistoryUpdate {
	_u.mutation.SetChangeType(v)
	return _u
}

// SetNillableChangeType sets the "change_type" field if the given value is not nil.
func (_u *ConfigHistoryUpdate) SetNillableChangeType(v *string) *ConfigHistoryUpdate {
	if v != nil {
		_u.SetChangeType(*v)
	}
	return _u
}

// SetChangeDescription sets the "change_description" field.
func (_u *ConfigHistoryUpdate) SetChangeDescription(v string) *ConfigHistoryUpdate {
	_u.mutation.SetChangeDescription(v)
	return _u
}

// SetNillableChangeDescription sets the "change_description" field if the given value is not nil.
func (_u *ConfigHistoryUpdate) SetNillableChangeDescription(v *string) *ConfigHistoryUpdate {
	if v != nil {
		_u.SetChangeDescription(*v)
	}
	return _u
}

// ClearChangeDescription clears the value of the "change_description" field.
func (_u *ConfigHistoryUpdate) ClearChangeDescription() *ConfigHistoryUpdate {
	_u.mutation.ClearChangeDescription()
	return _u
}

// SetOldVersion sets the "old_version" field.
func (_u *ConfigHistoryUpdate) SetOldVersion(v string) *ConfigHistoryUpdate {
	_u.mutation.SetOldVersion(v)
	return _u
}

// SetNillableOldVersion sets the "old_version" field if the given value is not nil.
func (_u *ConfigHistoryUpdate) SetNillableOldVersion(v *string) *ConfigHistoryUpdate {
	if v != nil {
		_u.SetOldVersion(*v)
	}
	return _u
}

// ClearOldVersion clears the value of the "old_version" field.
func (_u *ConfigHistoryUpdate) ClearOldVersion() *ConfigHistoryUpdate {
	_u.mutation.ClearOldVersion()
	return _u
}

// SetNewVersion sets the "new_version" field.
func (_u *ConfigHistoryUpdate) SetNewVersion(v string) *ConfigHistoryUpdate {
	_u.mutation.SetNewVersion(v)
	return _u
}

// SetNillableNewVersion sets the "new_version" field if the given value is not nil.
func (_u *ConfigHistoryUpdate) SetNillableNewVersion(v *string) *ConfigHistoryUpdate {
	if v != nil {
		_u.SetNewVersion(*v)
	}
	return _u
}

// SetIPAddress sets the "ip_address" field.
func (_u *ConfigHistoryUpdate) SetIPAddress(v string) *ConfigHistoryUpdate {
	_u.mutation.SetIPAddress(v)
	return _u
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_u *ConfigHistoryUpdate) SetNillableIPAddress(v *string) *ConfigHistoryUpdate {
	if v != nil {
		_u.SetIPAddress(*v)
	}
	return _u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (_u *ConfigHistoryUpdate) ClearIPAddress() *ConfigHistoryUpdate {
	_u.mutation.ClearIPAddress()
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *ConfigHistoryUpdate) SetUserAgent(v string) *ConfigHistoryUpdate {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *ConfigHistoryUpdate) SetNillableUserAgent(v *string) *ConfigHistoryUpdate {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *ConfigHistoryUpdate) ClearUserAgent() *ConfigHistoryUpdate {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetConfigID sets the "config" edge to the UserConfig entity by ID.
func (_u *ConfigHistoryUpdate) SetConfigID(id uuid.UUID) *ConfigHistoryUpdate {
	_u.mutation.SetConfigID(id)
	return _u
}

// SetConfig sets the "config" edge to the UserConfig entity.
func (_u *ConfigHistoryUpdate) SetConfig(v *UserConfig) *ConfigHistoryUpdate {
	return _u.SetConfigID(v.ID)
}

// Mutation returns the ConfigHistoryMutation object of the builder.
func (_u *ConfigHistoryUpdate) Mutation() *ConfigHistoryMutation {
	return _u.mutation
}

// ClearConfig clears the "config" edge to the UserConfig entity.
func (_u *ConfigHistoryUpdate) ClearConfig() *ConfigHistoryUpdate {
	_u.mutation.ClearConfig()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ConfigHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ConfigHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ConfigHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ConfigHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ConfigHistoryUpdate) check() error {
	if v, ok := _u.mutation.ChangeType(); ok {
		if err := confighistory.ChangeTypeValidator(v); err != nil {
			return &ValidationError{Name: "change_type", err: fmt.Errorf(`ent: validator failed for field "ConfigHistory.change_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.NewVersion(); ok {
		if err := confighistory.NewVersionValidator(v); err != nil {
			return &ValidationError{Name: "new_version", err: fmt.Errorf(`ent: validator failed for field "ConfigHistory.new_version": %w`, err)}
		}
	}
	if _u.mutation.ConfigCleared() && len(_u.mutation.ConfigIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ConfigHistory.config"`)
	}
	return nil
}

func (_u *ConfigHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(confighistory.Table, confighistory.Columns, sqlgraph.NewFieldSpec(confighistory.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.OldConfigData(); ok {
		_spec.SetField(confighistory.FieldOldConfigData, field.TypeJSON, value)
	}
	if _u.mutation.OldConfigDataCleared() {
		_spec.ClearField(confighistory.FieldOldConfigData, field.TypeJSON)
	}
	if value, ok := _u.mutation.NewConfigData(); ok {
		_spec.SetField(confighistory.FieldNewConfigData, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.ChangeType(); ok {
		_spec.SetField(confighistory.FieldChangeType, field.TypeString, value)
	}
	if value, ok := _u.mutation.ChangeDescription(); ok {
		_spec.SetField(confighistory.FieldChangeDescription, field.TypeString, value)
	}
	if _u.mutation.ChangeDescriptionCleared() {
		_spec.ClearField(confighistory.FieldChangeDescription, field.TypeString)
	}
	if value, ok := _u.mutation.OldVersion(); ok {
		_spec.SetField(confighistory.FieldOldVersion, field.TypeString, value)
	}
	if _u.mutation.OldVersionCleared() {
		_spec.ClearField(confighistory.FieldOldVersion, field.TypeString)
	}
	if value, ok := _u.mutation.NewVersion(); ok {
		_spec.SetField(confighistory.FieldNewVersion, field.TypeString, value)
	}
	if value, ok := _u.mutation.IPAddress(); ok {
		_spec.SetField(confighistory.FieldIPAddress, field.TypeString, value)
	}
	if _u.mutation.IPAddressCleared() {
		_spec.ClearField(confighistory.FieldIPAddress, field.TypeString)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(confighistory.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(confighistory.FieldUserAgent, field.TypeString)
	}
	if _u.mutation.ConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   confighistory.ConfigTable,
			Columns: []string{confighistory.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconfig.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   confighistory.ConfigTable,
			Columns: []string{confighistory.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconfig.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{confighistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ConfigHistoryUpdateOne is the builder for updating a single ConfigHistory entity.
type ConfigHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConfigHistoryMutation
}

// SetOldConfigData sets the "old_config_data" field.
func (_u *ConfigHistoryUpdateOne) SetOldConfigData(v map[string]interface{}) *ConfigHistoryUpdateOne {
	_u.mutation.SetOldConfigData(v)
	return _u
}

// ClearOldConfigData clears the value of the "old_config_data" field.
func (_u *ConfigHistoryUpdateOne) ClearOldConfigData() *ConfigHistoryUpdateOne {
	_u.mutation.ClearOldConfigData()
	return _u
}

// SetNewConfigData sets the "new_config_data" field.
func (_u *ConfigHistoryUpdateOne) SetNewConfigData(v map[string]interface{}) *ConfigHistoryUpdateOne {
	_u.mutation.SetNewConfigData(v)
	return _u
}

// SetChangeType sets the "change_type" field.
func (_u *ConfigHistoryUpdateOne) SetChangeType(v string) *ConfigHistoryUpdateOne {
	_u.mutation.SetChangeType(v)
	return _u
}

// SetNillableChangeType sets the "change_type" field if the given value is not nil.
func (_u *ConfigHistoryUpdateOne) SetNillableChangeType(v *string) *ConfigHistoryUpdateOne {
	if v != nil {
		_u.SetChangeType(*v)
	}
	return _u
}

// SetChangeDescription sets the "change_description" field.
func (_u *ConfigHistoryUpdateOne) SetChangeDescription(v string) *ConfigHistoryUpdateOne {
	_u.mutation.SetChangeDescription(v)
	return _u
}

// SetNillableChangeDescription sets the "change_description" field if the given value is not nil.
func (_u *ConfigHistoryUpdateOne) SetNillableChangeDescription(v *string) *ConfigHistoryUpdateOne {
	if v != nil {
		_u.SetChangeDescription(*v)
	}
	return _u
}

// ClearChangeDescription clears the value of the "change_description" field.
func (_u *ConfigHistoryUpdateOne) ClearChangeDescription() *ConfigHistoryUpdateOne {
	_u.mutation.ClearChangeDescription()
	return _u
}

// SetOldVersion sets the "old_version" field.
func (_u *ConfigHistoryUpdateOne) SetOldVersion(v string) *ConfigHistoryUpdateOne {
	_u.mutation.SetOldVersion(v)
	return _u
}

// SetNillableOldVersion sets the "old_version" field if the given value is not nil.
func (_u *ConfigHistoryUpdateOne) SetNillableOldVersion(v *string) *ConfigHistoryUpdateOne {
	if v != nil {
		_u.SetOldVersion(*v)
	}
	return _u
}

// ClearOldVersion clears the value of the "old_version" field.
func (_u *ConfigHistoryUpdateOne) ClearOldVersion() *ConfigHistoryUpdateOne {
	_u.mutation.ClearOldVersion()
	return _u
}

// SetNewVersion sets the "new_version" field.
func (_u *ConfigHistoryUpdateOne) SetNewVersion(v string) *ConfigHistoryUpdateOne {
	_u.mutation.SetNewVersion(v)
	return _u
}

// SetNillableNewVersion sets the "new_version" field if the given value is not nil.
func (_u *ConfigHistoryUpdateOne) SetNillableNewVersion(v *string) *ConfigHistoryUpdateOne {
	if v != nil {
		_u.SetNewVersion(*v)
	}
	return _u
}

// SetIPAddress sets the "ip_address" field.
func (_u *ConfigHistoryUpdateOne) SetIPAddress(v string) *ConfigHistoryUpdateOne {
	_u.mutation.SetIPAddress(v)
	return _u
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_u *ConfigHistoryUpdateOne) SetNillableIPAddress(v *string) *ConfigHistoryUpdateOne {
	if v != nil {
		_u.SetIPAddress(*v)
	}
	return _u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (_u *ConfigHistoryUpdateOne) ClearIPAddress() *ConfigHistoryUpdateOne {
	_u.mutation.ClearIPAddress()
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *ConfigHistoryUpdateOne) SetUserAgent(v string) *ConfigHistoryUpdateOne {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *ConfigHistoryUpdateOne) SetNillableUserAgent(v *string) *ConfigHistoryUpdateOne {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *ConfigHistoryUpdateOne) ClearUserAgent() *ConfigHistoryUpdateOne {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetConfigID sets the "config" edge to the UserConfig entity by ID.
func (_u *ConfigHistoryUpdateOne) SetConfigID(id uuid.UUID) *ConfigHistoryUpdateOne {
	_u.mutation.SetConfigID(id)
	return _u
}

// SetConfig sets the "config" edge to the UserConfig entity.
func (_u *ConfigHistoryUpdateOne) SetConfig(v *UserConfig) *ConfigHistoryUpdateOne {
	return _u.SetConfigID(v.ID)
}

// Mutation returns the ConfigHistoryMutation object of the builder.
func (_u *ConfigHistoryUpdateOne) Mutation() *ConfigHistoryMutation {
	return _u.mutation
}

// ClearConfig clears the "config" edge to the UserConfig entity.
func (_u *ConfigHistoryUpdateOne) ClearConfig() *ConfigHistoryUpdateOne {
	_u.mutation.ClearConfig()
	return _u
}

// Where appends a list predicates to the ConfigHistoryUpdate builder.
func (_u *ConfigHistoryUpdateOne) Where(ps ...predicate.ConfigHistory) *ConfigHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ConfigHistoryUpdateOne) Select(field string, fields ...string) *ConfigHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ConfigHistory entity.
func (_u *ConfigHistoryUpdateOne) Save(ctx context.Context) (*ConfigHistory, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ConfigHistoryUpdateOne) SaveX(ctx context.Context) *ConfigHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ConfigHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ConfigHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ConfigHistoryUpdateOne) check() error {
	if v, ok := _u.mutation.ChangeType(); ok {
		if err := confighistory.ChangeTypeValidator(v); err != nil {
			return &ValidationError{Name: "change_type", err: fmt.Errorf(`ent: validator failed for field "ConfigHistory.change_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.NewVersion(); ok {
		if err := confighistory.NewVersionValidator(v); err != nil {
			return &ValidationError{Name: "new_version", err: fmt.Errorf(`ent: validator failed for field "ConfigHistory.new_version": %w`, err)}
		}
	}
	if _u.mutation.ConfigCleared() && len(_u.mutation.ConfigIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ConfigHistory.config"`)
	}
	return nil
}

func (_u *ConfigHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ConfigHistory, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(confighistory.Table, confighistory.Columns, sqlgraph.NewFieldSpec(confighistory.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ConfigHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, confighistory.FieldID)
		for _, f := range fields {
			if !confighistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != confighistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.OldConfigData(); ok {
		_spec.SetField(confighistory.FieldOldConfigData, field.TypeJSON, value)
	}
	if _u.mutation.OldConfigDataCleared() {
		_spec.ClearField(confighistory.FieldOldConfigData, field.TypeJSON)
	}
	if value, ok := _u.mutation.NewConfigData(); ok {
		_spec.SetField(confighistory.FieldNewConfigData, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.ChangeType(); ok {
		_spec.SetField(confighistory.FieldChangeType, field.TypeString, value)
	}
	if value, ok := _u.mutation.ChangeDescription(); ok {
		_spec.SetField(confighistory.FieldChangeDescription, field.TypeString, value)
	}
	if _u.mutation.ChangeDescriptionCleared() {
		_spec.ClearField(confighistory.FieldChangeDescription, field.TypeString)
	}
	if value, ok := _u.mutation.OldVersion(); ok {
		_spec.SetField(confighistory.FieldOldVersion, field.TypeString, value)
	}
	if _u.mutation.OldVersionCleared() {
		_spec.ClearField(confighistory.FieldOldVersion, field.TypeString)
	}
	if value, ok := _u.mutation.NewVersion(); ok {
		_spec.SetField(confighistory.FieldNewVersion, field.TypeString, value)
	}
	if value, ok := _u.mutation.IPAddress(); ok {
		_spec.SetField(confighistory.FieldIPAddress, field.TypeString, value)
	}
	if _u.mutation.IPAddressCleared() {
		_spec.ClearField(confighistory.FieldIPAddress, field.TypeString)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(confighistory.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(confighistory.FieldUserAgent, field.TypeString)
	}
	if _u.mutation.ConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   confighistory.ConfigTable,
			Columns: []string{confighistory.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconfig.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   confighistory.ConfigTable,
			Columns: []string{confighistory.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconfig.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ConfigHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{confighistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
