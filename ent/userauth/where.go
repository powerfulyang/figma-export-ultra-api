// Code generated by ent, DO NOT EDIT.

package userauth

import (
	"fiber-ent-apollo-pg/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLTE(FieldID, id))
}

// Identifier applies equality check predicate on the "identifier" field. It's identical to IdentifierEQ.
func Identifier(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldIdentifier, v))
}

// Credential applies equality check predicate on the "credential" field. It's identical to CredentialEQ.
func Credential(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldCredential, v))
}

// ProviderUserID applies equality check predicate on the "provider_user_id" field. It's identical to ProviderUserIDEQ.
func ProviderUserID(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldProviderUserID, v))
}

// ProviderUsername applies equality check predicate on the "provider_username" field. It's identical to ProviderUsernameEQ.
func ProviderUsername(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldProviderUsername, v))
}

// ProviderEmail applies equality check predicate on the "provider_email" field. It's identical to ProviderEmailEQ.
func ProviderEmail(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldProviderEmail, v))
}

// ProviderAvatar applies equality check predicate on the "provider_avatar" field. It's identical to ProviderAvatarEQ.
func ProviderAvatar(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldProviderAvatar, v))
}

// AccessToken applies equality check predicate on the "access_token" field. It's identical to AccessTokenEQ.
func AccessToken(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldAccessToken, v))
}

// RefreshToken applies equality check predicate on the "refresh_token" field. It's identical to RefreshTokenEQ.
func RefreshToken(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldRefreshToken, v))
}

// TokenExpiresAt applies equality check predicate on the "token_expires_at" field. It's identical to TokenExpiresAtEQ.
func TokenExpiresAt(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldTokenExpiresAt, v))
}

// IsPrimary applies equality check predicate on the "is_primary" field. It's identical to IsPrimaryEQ.
func IsPrimary(v bool) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldIsPrimary, v))
}

// IsEnabled applies equality check predicate on the "is_enabled" field. It's identical to IsEnabledEQ.
func IsEnabled(v bool) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldIsEnabled, v))
}

// LastUsedAt applies equality check predicate on the "last_used_at" field. It's identical to LastUsedAtEQ.
func LastUsedAt(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldLastUsedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldUpdatedAt, v))
}

// AuthTypeEQ applies the EQ predicate on the "auth_type" field.
func AuthTypeEQ(v AuthType) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldAuthType, v))
}

// AuthTypeNEQ applies the NEQ predicate on the "auth_type" field.
func AuthTypeNEQ(v AuthType) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNEQ(FieldAuthType, v))
}

// AuthTypeIn applies the In predicate on the "auth_type" field.
func AuthTypeIn(vs ...AuthType) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIn(FieldAuthType, vs...))
}

// AuthTypeNotIn applies the NotIn predicate on the "auth_type" field.
func AuthTypeNotIn(vs ...AuthType) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotIn(FieldAuthType, vs...))
}

// IdentifierEQ applies the EQ predicate on the "identifier" field.
func IdentifierEQ(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldIdentifier, v))
}

// IdentifierNEQ applies the NEQ predicate on the "identifier" field.
func IdentifierNEQ(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNEQ(FieldIdentifier, v))
}

// IdentifierIn applies the In predicate on the "identifier" field.
func IdentifierIn(vs ...string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIn(FieldIdentifier, vs...))
}

// IdentifierNotIn applies the NotIn predicate on the "identifier" field.
func IdentifierNotIn(vs ...string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotIn(FieldIdentifier, vs...))
}

// IdentifierGT applies the GT predicate on the "identifier" field.
func IdentifierGT(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGT(FieldIdentifier, v))
}

// IdentifierGTE applies the GTE predicate on the "identifier" field.
func IdentifierGTE(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGTE(FieldIdentifier, v))
}

// IdentifierLT applies the LT predicate on the "identifier" field.
func IdentifierLT(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLT(FieldIdentifier, v))
}

// IdentifierLTE applies the LTE predicate on the "identifier" field.
func IdentifierLTE(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLTE(FieldIdentifier, v))
}

// IdentifierContains applies the Contains predicate on the "identifier" field.
func IdentifierContains(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldContains(FieldIdentifier, v))
}

// IdentifierHasPrefix applies the HasPrefix predicate on the "identifier" field.
func IdentifierHasPrefix(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldHasPrefix(FieldIdentifier, v))
}

// IdentifierHasSuffix applies the HasSuffix predicate on the "identifier" field.
func IdentifierHasSuffix(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldHasSuffix(FieldIdentifier, v))
}

// IdentifierEqualFold applies the EqualFold predicate on the "identifier" field.
func IdentifierEqualFold(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEqualFold(FieldIdentifier, v))
}

// IdentifierContainsFold applies the ContainsFold predicate on the "identifier" field.
func IdentifierContainsFold(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldContainsFold(FieldIdentifier, v))
}

// CredentialEQ applies the EQ predicate on the "credential" field.
func CredentialEQ(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldCredential, v))
}

// CredentialNEQ applies the NEQ predicate on the "credential" field.
func CredentialNEQ(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNEQ(FieldCredential, v))
}

// CredentialIn applies the In predicate on the "credential" field.
func CredentialIn(vs ...string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIn(FieldCredential, vs...))
}

// CredentialNotIn applies the NotIn predicate on the "credential" field.
func CredentialNotIn(vs ...string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotIn(FieldCredential, vs...))
}

// CredentialGT applies the GT predicate on the "credential" field.
func CredentialGT(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGT(FieldCredential, v))
}

// CredentialGTE applies the GTE predicate on the "credential" field.
func CredentialGTE(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGTE(FieldCredential, v))
}

// CredentialLT applies the LT predicate on the "credential" field.
func CredentialLT(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLT(FieldCredential, v))
}

// CredentialLTE applies the LTE predicate on the "credential" field.
func CredentialLTE(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLTE(FieldCredential, v))
}

// CredentialContains applies the Contains predicate on the "credential" field.
func CredentialContains(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldContains(FieldCredential, v))
}

// CredentialHasPrefix applies the HasPrefix predicate on the "credential" field.
func CredentialHasPrefix(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldHasPrefix(FieldCredential, v))
}

// CredentialHasSuffix applies the HasSuffix predicate on the "credential" field.
func CredentialHasSuffix(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldHasSuffix(FieldCredential, v))
}

// CredentialIsNil applies the IsNil predicate on the "credential" field.
func CredentialIsNil() predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIsNull(FieldCredential))
}

// CredentialNotNil applies the NotNil predicate on the "credential" field.
func CredentialNotNil() predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotNull(FieldCredential))
}

// CredentialEqualFold applies the EqualFold predicate on the "credential" field.
func CredentialEqualFold(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEqualFold(FieldCredential, v))
}

// CredentialContainsFold applies the ContainsFold predicate on the "credential" field.
func CredentialContainsFold(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldContainsFold(FieldCredential, v))
}

// ProviderUserIDEQ applies the EQ predicate on the "provider_user_id" field.
func ProviderUserIDEQ(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldProviderUserID, v))
}

// ProviderUserIDNEQ applies the NEQ predicate on the "provider_user_id" field.
func ProviderUserIDNEQ(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNEQ(FieldProviderUserID, v))
}

// ProviderUserIDIn applies the In predicate on the "provider_user_id" field.
func ProviderUserIDIn(vs ...string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIn(FieldProviderUserID, vs...))
}

// ProviderUserIDNotIn applies the NotIn predicate on the "provider_user_id" field.
func ProviderUserIDNotIn(vs ...string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotIn(FieldProviderUserID, vs...))
}

// ProviderUserIDGT applies the GT predicate on the "provider_user_id" field.
func ProviderUserIDGT(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGT(FieldProviderUserID, v))
}

// ProviderUserIDGTE applies the GTE predicate on the "provider_user_id" field.
func ProviderUserIDGTE(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGTE(FieldProviderUserID, v))
}

// ProviderUserIDLT applies the LT predicate on the "provider_user_id" field.
func ProviderUserIDLT(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLT(FieldProviderUserID, v))
}

// ProviderUserIDLTE applies the LTE predicate on the "provider_user_id" field.
func ProviderUserIDLTE(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLTE(FieldProviderUserID, v))
}

// ProviderUserIDContains applies the Contains predicate on the "provider_user_id" field.
func ProviderUserIDContains(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldContains(FieldProviderUserID, v))
}

// ProviderUserIDHasPrefix applies the HasPrefix predicate on the "provider_user_id" field.
func ProviderUserIDHasPrefix(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldHasPrefix(FieldProviderUserID, v))
}

// ProviderUserIDHasSuffix applies the HasSuffix predicate on the "provider_user_id" field.
func ProviderUserIDHasSuffix(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldHasSuffix(FieldProviderUserID, v))
}

// ProviderUserIDIsNil applies the IsNil predicate on the "provider_user_id" field.
func ProviderUserIDIsNil() predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIsNull(FieldProviderUserID))
}

// ProviderUserIDNotNil applies the NotNil predicate on the "provider_user_id" field.
func ProviderUserIDNotNil() predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotNull(FieldProviderUserID))
}

// ProviderUserIDEqualFold applies the EqualFold predicate on the "provider_user_id" field.
func ProviderUserIDEqualFold(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEqualFold(FieldProviderUserID, v))
}

// ProviderUserIDContainsFold applies the ContainsFold predicate on the "provider_user_id" field.
func ProviderUserIDContainsFold(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldContainsFold(FieldProviderUserID, v))
}

// ProviderUsernameEQ applies the EQ predicate on the "provider_username" field.
func ProviderUsernameEQ(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldProviderUsername, v))
}

// ProviderUsernameNEQ applies the NEQ predicate on the "provider_username" field.
func ProviderUsernameNEQ(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNEQ(FieldProviderUsername, v))
}

// ProviderUsernameIn applies the In predicate on the "provider_username" field.
func ProviderUsernameIn(vs ...string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIn(FieldProviderUsername, vs...))
}

// ProviderUsernameNotIn applies the NotIn predicate on the "provider_username" field.
func ProviderUsernameNotIn(vs ...string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotIn(FieldProviderUsername, vs...))
}

// ProviderUsernameGT applies the GT predicate on the "provider_username" field.
func ProviderUsernameGT(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGT(FieldProviderUsername, v))
}

// ProviderUsernameGTE applies the GTE predicate on the "provider_username" field.
func ProviderUsernameGTE(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGTE(FieldProviderUsername, v))
}

// ProviderUsernameLT applies the LT predicate on the "provider_username" field.
func ProviderUsernameLT(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLT(FieldProviderUsername, v))
}

// ProviderUsernameLTE applies the LTE predicate on the "provider_username" field.
func ProviderUsernameLTE(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLTE(FieldProviderUsername, v))
}

// ProviderUsernameContains applies the Contains predicate on the "provider_username" field.
func ProviderUsernameContains(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldContains(FieldProviderUsername, v))
}

// ProviderUsernameHasPrefix applies the HasPrefix predicate on the "provider_username" field.
func ProviderUsernameHasPrefix(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldHasPrefix(FieldProviderUsername, v))
}

// ProviderUsernameHasSuffix applies the HasSuffix predicate on the "provider_username" field.
func ProviderUsernameHasSuffix(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldHasSuffix(FieldProviderUsername, v))
}

// ProviderUsernameIsNil applies the IsNil predicate on the "provider_username" field.
func ProviderUsernameIsNil() predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIsNull(FieldProviderUsername))
}

// ProviderUsernameNotNil applies the NotNil predicate on the "provider_username" field.
func ProviderUsernameNotNil() predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotNull(FieldProviderUsername))
}

// ProviderUsernameEqualFold applies the EqualFold predicate on the "provider_username" field.
func ProviderUsernameEqualFold(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEqualFold(FieldProviderUsername, v))
}

// ProviderUsernameContainsFold applies the ContainsFold predicate on the "provider_username" field.
func ProviderUsernameContainsFold(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldContainsFold(FieldProviderUsername, v))
}

// ProviderEmailEQ applies the EQ predicate on the "provider_email" field.
func ProviderEmailEQ(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldProviderEmail, v))
}

// ProviderEmailNEQ applies the NEQ predicate on the "provider_email" field.
func ProviderEmailNEQ(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNEQ(FieldProviderEmail, v))
}

// ProviderEmailIn applies the In predicate on the "provider_email" field.
func ProviderEmailIn(vs ...string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIn(FieldProviderEmail, vs...))
}

// ProviderEmailNotIn applies the NotIn predicate on the "provider_email" field.
func ProviderEmailNotIn(vs ...string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotIn(FieldProviderEmail, vs...))
}

// ProviderEmailGT applies the GT predicate on the "provider_email" field.
func ProviderEmailGT(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGT(FieldProviderEmail, v))
}

// ProviderEmailGTE applies the GTE predicate on the "provider_email" field.
func ProviderEmailGTE(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGTE(FieldProviderEmail, v))
}

// ProviderEmailLT applies the LT predicate on the "provider_email" field.
func ProviderEmailLT(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLT(FieldProviderEmail, v))
}

// ProviderEmailLTE applies the LTE predicate on the "provider_email" field.
func ProviderEmailLTE(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLTE(FieldProviderEmail, v))
}

// ProviderEmailContains applies the Contains predicate on the "provider_email" field.
func ProviderEmailContains(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldContains(FieldProviderEmail, v))
}

// ProviderEmailHasPrefix applies the HasPrefix predicate on the "provider_email" field.
func ProviderEmailHasPrefix(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldHasPrefix(FieldProviderEmail, v))
}

// ProviderEmailHasSuffix applies the HasSuffix predicate on the "provider_email" field.
func ProviderEmailHasSuffix(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldHasSuffix(FieldProviderEmail, v))
}

// ProviderEmailIsNil applies the IsNil predicate on the "provider_email" field.
func ProviderEmailIsNil() predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIsNull(FieldProviderEmail))
}

// ProviderEmailNotNil applies the NotNil predicate on the "provider_email" field.
func ProviderEmailNotNil() predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotNull(FieldProviderEmail))
}

// ProviderEmailEqualFold applies the EqualFold predicate on the "provider_email" field.
func ProviderEmailEqualFold(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEqualFold(FieldProviderEmail, v))
}

// ProviderEmailContainsFold applies the ContainsFold predicate on the "provider_email" field.
func ProviderEmailContainsFold(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldContainsFold(FieldProviderEmail, v))
}

// ProviderAvatarEQ applies the EQ predicate on the "provider_avatar" field.
func ProviderAvatarEQ(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldProviderAvatar, v))
}

// ProviderAvatarNEQ applies the NEQ predicate on the "provider_avatar" field.
func ProviderAvatarNEQ(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNEQ(FieldProviderAvatar, v))
}

// ProviderAvatarIn applies the In predicate on the "provider_avatar" field.
func ProviderAvatarIn(vs ...string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIn(FieldProviderAvatar, vs...))
}

// ProviderAvatarNotIn applies the NotIn predicate on the "provider_avatar" field.
func ProviderAvatarNotIn(vs ...string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotIn(FieldProviderAvatar, vs...))
}

// ProviderAvatarGT applies the GT predicate on the "provider_avatar" field.
func ProviderAvatarGT(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGT(FieldProviderAvatar, v))
}

// ProviderAvatarGTE applies the GTE predicate on the "provider_avatar" field.
func ProviderAvatarGTE(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGTE(FieldProviderAvatar, v))
}

// ProviderAvatarLT applies the LT predicate on the "provider_avatar" field.
func ProviderAvatarLT(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLT(FieldProviderAvatar, v))
}

// ProviderAvatarLTE applies the LTE predicate on the "provider_avatar" field.
func ProviderAvatarLTE(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLTE(FieldProviderAvatar, v))
}

// ProviderAvatarContains applies the Contains predicate on the "provider_avatar" field.
func ProviderAvatarContains(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldContains(FieldProviderAvatar, v))
}

// ProviderAvatarHasPrefix applies the HasPrefix predicate on the "provider_avatar" field.
func ProviderAvatarHasPrefix(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldHasPrefix(FieldProviderAvatar, v))
}

// ProviderAvatarHasSuffix applies the HasSuffix predicate on the "provider_avatar" field.
func ProviderAvatarHasSuffix(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldHasSuffix(FieldProviderAvatar, v))
}

// ProviderAvatarIsNil applies the IsNil predicate on the "provider_avatar" field.
func ProviderAvatarIsNil() predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIsNull(FieldProviderAvatar))
}

// ProviderAvatarNotNil applies the NotNil predicate on the "provider_avatar" field.
func ProviderAvatarNotNil() predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotNull(FieldProviderAvatar))
}

// ProviderAvatarEqualFold applies the EqualFold predicate on the "provider_avatar" field.
func ProviderAvatarEqualFold(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEqualFold(FieldProviderAvatar, v))
}

// ProviderAvatarContainsFold applies the ContainsFold predicate on the "provider_avatar" field.
func ProviderAvatarContainsFold(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldContainsFold(FieldProviderAvatar, v))
}

// ProviderDataIsNil applies the IsNil predicate on the "provider_data" field.
func ProviderDataIsNil() predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIsNull(FieldProviderData))
}

// ProviderDataNotNil applies the NotNil predicate on the "provider_data" field.
func ProviderDataNotNil() predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotNull(FieldProviderData))
}

// AccessTokenEQ applies the EQ predicate on the "access_token" field.
func AccessTokenEQ(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldAccessToken, v))
}

// AccessTokenNEQ applies the NEQ predicate on the "access_token" field.
func AccessTokenNEQ(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNEQ(FieldAccessToken, v))
}

// AccessTokenIn applies the In predicate on the "access_token" field.
func AccessTokenIn(vs ...string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIn(FieldAccessToken, vs...))
}

// AccessTokenNotIn applies the NotIn predicate on the "access_token" field.
func AccessTokenNotIn(vs ...string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotIn(FieldAccessToken, vs...))
}

// AccessTokenGT applies the GT predicate on the "access_token" field.
func AccessTokenGT(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGT(FieldAccessToken, v))
}

// AccessTokenGTE applies the GTE predicate on the "access_token" field.
func AccessTokenGTE(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGTE(FieldAccessToken, v))
}

// AccessTokenLT applies the LT predicate on the "access_token" field.
func AccessTokenLT(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLT(FieldAccessToken, v))
}

// AccessTokenLTE applies the LTE predicate on the "access_token" field.
func AccessTokenLTE(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLTE(FieldAccessToken, v))
}

// AccessTokenContains applies the Contains predicate on the "access_token" field.
func AccessTokenContains(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldContains(FieldAccessToken, v))
}

// AccessTokenHasPrefix applies the HasPrefix predicate on the "access_token" field.
func AccessTokenHasPrefix(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldHasPrefix(FieldAccessToken, v))
}

// AccessTokenHasSuffix applies the HasSuffix predicate on the "access_token" field.
func AccessTokenHasSuffix(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldHasSuffix(FieldAccessToken, v))
}

// AccessTokenIsNil applies the IsNil predicate on the "access_token" field.
func AccessTokenIsNil() predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIsNull(FieldAccessToken))
}

// AccessTokenNotNil applies the NotNil predicate on the "access_token" field.
func AccessTokenNotNil() predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotNull(FieldAccessToken))
}

// AccessTokenEqualFold applies the EqualFold predicate on the "access_token" field.
func AccessTokenEqualFold(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEqualFold(FieldAccessToken, v))
}

// AccessTokenContainsFold applies the ContainsFold predicate on the "access_token" field.
func AccessTokenContainsFold(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldContainsFold(FieldAccessToken, v))
}

// RefreshTokenEQ applies the EQ predicate on the "refresh_token" field.
func RefreshTokenEQ(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldRefreshToken, v))
}

// RefreshTokenNEQ applies the NEQ predicate on the "refresh_token" field.
func RefreshTokenNEQ(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNEQ(FieldRefreshToken, v))
}

// RefreshTokenIn applies the In predicate on the "refresh_token" field.
func RefreshTokenIn(vs ...string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIn(FieldRefreshToken, vs...))
}

// RefreshTokenNotIn applies the NotIn predicate on the "refresh_token" field.
func RefreshTokenNotIn(vs ...string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotIn(FieldRefreshToken, vs...))
}

// RefreshTokenGT applies the GT predicate on the "refresh_token" field.
func RefreshTokenGT(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGT(FieldRefreshToken, v))
}

// RefreshTokenGTE applies the GTE predicate on the "refresh_token" field.
func RefreshTokenGTE(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGTE(FieldRefreshToken, v))
}

// RefreshTokenLT applies the LT predicate on the "refresh_token" field.
func RefreshTokenLT(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLT(FieldRefreshToken, v))
}

// RefreshTokenLTE applies the LTE predicate on the "refresh_token" field.
func RefreshTokenLTE(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLTE(FieldRefreshToken, v))
}

// RefreshTokenContains applies the Contains predicate on the "refresh_token" field.
func RefreshTokenContains(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldContains(FieldRefreshToken, v))
}

// RefreshTokenHasPrefix applies the HasPrefix predicate on the "refresh_token" field.
func RefreshTokenHasPrefix(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldHasPrefix(FieldRefreshToken, v))
}

// RefreshTokenHasSuffix applies the HasSuffix predicate on the "refresh_token" field.
func RefreshTokenHasSuffix(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldHasSuffix(FieldRefreshToken, v))
}

// RefreshTokenIsNil applies the IsNil predicate on the "refresh_token" field.
func RefreshTokenIsNil() predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIsNull(FieldRefreshToken))
}

// RefreshTokenNotNil applies the NotNil predicate on the "refresh_token" field.
func RefreshTokenNotNil() predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotNull(FieldRefreshToken))
}

// RefreshTokenEqualFold applies the EqualFold predicate on the "refresh_token" field.
func RefreshTokenEqualFold(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEqualFold(FieldRefreshToken, v))
}

// RefreshTokenContainsFold applies the ContainsFold predicate on the "refresh_token" field.
func RefreshTokenContainsFold(v string) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldContainsFold(FieldRefreshToken, v))
}

// TokenExpiresAtEQ applies the EQ predicate on the "token_expires_at" field.
func TokenExpiresAtEQ(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldTokenExpiresAt, v))
}

// TokenExpiresAtNEQ applies the NEQ predicate on the "token_expires_at" field.
func TokenExpiresAtNEQ(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNEQ(FieldTokenExpiresAt, v))
}

// TokenExpiresAtIn applies the In predicate on the "token_expires_at" field.
func TokenExpiresAtIn(vs ...time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIn(FieldTokenExpiresAt, vs...))
}

// TokenExpiresAtNotIn applies the NotIn predicate on the "token_expires_at" field.
func TokenExpiresAtNotIn(vs ...time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotIn(FieldTokenExpiresAt, vs...))
}

// TokenExpiresAtGT applies the GT predicate on the "token_expires_at" field.
func TokenExpiresAtGT(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGT(FieldTokenExpiresAt, v))
}

// TokenExpiresAtGTE applies the GTE predicate on the "token_expires_at" field.
func TokenExpiresAtGTE(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGTE(FieldTokenExpiresAt, v))
}

// TokenExpiresAtLT applies the LT predicate on the "token_expires_at" field.
func TokenExpiresAtLT(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLT(FieldTokenExpiresAt, v))
}

// TokenExpiresAtLTE applies the LTE predicate on the "token_expires_at" field.
func TokenExpiresAtLTE(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLTE(FieldTokenExpiresAt, v))
}

// TokenExpiresAtIsNil applies the IsNil predicate on the "token_expires_at" field.
func TokenExpiresAtIsNil() predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIsNull(FieldTokenExpiresAt))
}

// TokenExpiresAtNotNil applies the NotNil predicate on the "token_expires_at" field.
func TokenExpiresAtNotNil() predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotNull(FieldTokenExpiresAt))
}

// IsPrimaryEQ applies the EQ predicate on the "is_primary" field.
func IsPrimaryEQ(v bool) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldIsPrimary, v))
}

// IsPrimaryNEQ applies the NEQ predicate on the "is_primary" field.
func IsPrimaryNEQ(v bool) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNEQ(FieldIsPrimary, v))
}

// IsEnabledEQ applies the EQ predicate on the "is_enabled" field.
func IsEnabledEQ(v bool) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldIsEnabled, v))
}

// IsEnabledNEQ applies the NEQ predicate on the "is_enabled" field.
func IsEnabledNEQ(v bool) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNEQ(FieldIsEnabled, v))
}

// LastUsedAtEQ applies the EQ predicate on the "last_used_at" field.
func LastUsedAtEQ(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldLastUsedAt, v))
}

// LastUsedAtNEQ applies the NEQ predicate on the "last_used_at" field.
func LastUsedAtNEQ(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNEQ(FieldLastUsedAt, v))
}

// LastUsedAtIn applies the In predicate on the "last_used_at" field.
func LastUsedAtIn(vs ...time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIn(FieldLastUsedAt, vs...))
}

// LastUsedAtNotIn applies the NotIn predicate on the "last_used_at" field.
func LastUsedAtNotIn(vs ...time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotIn(FieldLastUsedAt, vs...))
}

// LastUsedAtGT applies the GT predicate on the "last_used_at" field.
func LastUsedAtGT(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGT(FieldLastUsedAt, v))
}

// LastUsedAtGTE applies the GTE predicate on the "last_used_at" field.
func LastUsedAtGTE(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGTE(FieldLastUsedAt, v))
}

// LastUsedAtLT applies the LT predicate on the "last_used_at" field.
func LastUsedAtLT(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLT(FieldLastUsedAt, v))
}

// LastUsedAtLTE applies the LTE predicate on the "last_used_at" field.
func LastUsedAtLTE(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLTE(FieldLastUsedAt, v))
}

// LastUsedAtIsNil applies the IsNil predicate on the "last_used_at" field.
func LastUsedAtIsNil() predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIsNull(FieldLastUsedAt))
}

// LastUsedAtNotNil applies the NotNil predicate on the "last_used_at" field.
func LastUsedAtNotNil() predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotNull(FieldLastUsedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserAuth {
	return predicate.UserAuth(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserAuth {
	return predicate.UserAuth(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserAuth {
	return predicate.UserAuth(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserAuth) predicate.UserAuth {
	return predicate.UserAuth(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserAuth) predicate.UserAuth {
	return predicate.UserAuth(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserAuth) predicate.UserAuth {
	return predicate.UserAuth(sql.NotPredicates(p))
}
