// Code generated by ent, DO NOT EDIT.

package userauth

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the userauth type in the database.
	Label = "user_auth"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAuthType holds the string denoting the auth_type field in the database.
	FieldAuthType = "auth_type"
	// FieldIdentifier holds the string denoting the identifier field in the database.
	FieldIdentifier = "identifier"
	// FieldCredential holds the string denoting the credential field in the database.
	FieldCredential = "credential"
	// FieldProviderUserID holds the string denoting the provider_user_id field in the database.
	FieldProviderUserID = "provider_user_id"
	// FieldProviderUsername holds the string denoting the provider_username field in the database.
	FieldProviderUsername = "provider_username"
	// FieldProviderEmail holds the string denoting the provider_email field in the database.
	FieldProviderEmail = "provider_email"
	// FieldProviderAvatar holds the string denoting the provider_avatar field in the database.
	FieldProviderAvatar = "provider_avatar"
	// FieldProviderData holds the string denoting the provider_data field in the database.
	FieldProviderData = "provider_data"
	// FieldAccessToken holds the string denoting the access_token field in the database.
	FieldAccessToken = "access_token"
	// FieldRefreshToken holds the string denoting the refresh_token field in the database.
	FieldRefreshToken = "refresh_token"
	// FieldTokenExpiresAt holds the string denoting the token_expires_at field in the database.
	FieldTokenExpiresAt = "token_expires_at"
	// FieldIsPrimary holds the string denoting the is_primary field in the database.
	FieldIsPrimary = "is_primary"
	// FieldIsEnabled holds the string denoting the is_enabled field in the database.
	FieldIsEnabled = "is_enabled"
	// FieldLastUsedAt holds the string denoting the last_used_at field in the database.
	FieldLastUsedAt = "last_used_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the userauth in the database.
	Table = "user_auths"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_auths"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_auth_methods"
)

// Columns holds all SQL columns for userauth fields.
var Columns = []string{
	FieldID,
	FieldAuthType,
	FieldIdentifier,
	FieldCredential,
	FieldProviderUserID,
	FieldProviderUsername,
	FieldProviderEmail,
	FieldProviderAvatar,
	FieldProviderData,
	FieldAccessToken,
	FieldRefreshToken,
	FieldTokenExpiresAt,
	FieldIsPrimary,
	FieldIsEnabled,
	FieldLastUsedAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "user_auths"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_auth_methods",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// IdentifierValidator is a validator for the "identifier" field. It is called by the builders before save.
	IdentifierValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// AuthType defines the type for the "auth_type" enum field.
type AuthType string

// AuthType values.
const (
	AuthTypeEmailPassword AuthType = "email_password"
	AuthTypeGoogle        AuthType = "google"
	AuthTypeGithub        AuthType = "github"
	AuthTypeWechat        AuthType = "wechat"
	AuthTypeQq            AuthType = "qq"
	AuthTypeApple         AuthType = "apple"
	AuthTypeFacebook      AuthType = "facebook"
	AuthTypeTwitter       AuthType = "twitter"
	AuthTypeLinkedin      AuthType = "linkedin"
)

func (at AuthType) String() string {
	return string(at)
}

// AuthTypeValidator is a validator for the "auth_type" field enum values. It is called by the builders before save.
func AuthTypeValidator(at AuthType) error {
	switch at {
	case AuthTypeEmailPassword, AuthTypeGoogle, AuthTypeGithub, AuthTypeWechat, AuthTypeQq, AuthTypeApple, AuthTypeFacebook, AuthTypeTwitter, AuthTypeLinkedin:
		return nil
	default:
		return fmt.Errorf("userauth: invalid enum value for auth_type field: %q", at)
	}
}

// OrderOption defines the ordering options for the UserAuth queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAuthType orders the results by the auth_type field.
func ByAuthType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthType, opts...).ToFunc()
}

// ByIdentifier orders the results by the identifier field.
func ByIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdentifier, opts...).ToFunc()
}

// ByCredential orders the results by the credential field.
func ByCredential(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCredential, opts...).ToFunc()
}

// ByProviderUserID orders the results by the provider_user_id field.
func ByProviderUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderUserID, opts...).ToFunc()
}

// ByProviderUsername orders the results by the provider_username field.
func ByProviderUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderUsername, opts...).ToFunc()
}

// ByProviderEmail orders the results by the provider_email field.
func ByProviderEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderEmail, opts...).ToFunc()
}

// ByProviderAvatar orders the results by the provider_avatar field.
func ByProviderAvatar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderAvatar, opts...).ToFunc()
}

// ByAccessToken orders the results by the access_token field.
func ByAccessToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessToken, opts...).ToFunc()
}

// ByRefreshToken orders the results by the refresh_token field.
func ByRefreshToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefreshToken, opts...).ToFunc()
}

// ByTokenExpiresAt orders the results by the token_expires_at field.
func ByTokenExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokenExpiresAt, opts...).ToFunc()
}

// ByIsPrimary orders the results by the is_primary field.
func ByIsPrimary(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPrimary, opts...).ToFunc()
}

// ByIsEnabled orders the results by the is_enabled field.
func ByIsEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsEnabled, opts...).ToFunc()
}

// ByLastUsedAt orders the results by the last_used_at field.
func ByLastUsedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUsedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
