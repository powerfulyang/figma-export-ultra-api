// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fiber-ent-apollo-pg/ent/confighistory"
	"fiber-ent-apollo-pg/ent/userconfig"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ConfigHistoryCreate is the builder for creating a ConfigHistory entity.
type ConfigHistoryCreate struct {
	config
	mutation *ConfigHistoryMutation
	hooks    []Hook
}

// SetOldConfigData sets the "old_config_data" field.
func (_c *ConfigHistoryCreate) SetOldConfigData(v map[string]interface{}) *ConfigHistoryCreate {
	_c.mutation.SetOldConfigData(v)
	return _c
}

// SetNewConfigData sets the "new_config_data" field.
func (_c *ConfigHistoryCreate) SetNewConfigData(v map[string]interface{}) *ConfigHistoryCreate {
	_c.mutation.SetNewConfigData(v)
	return _c
}

// SetChangeType sets the "change_type" field.
func (_c *ConfigHistoryCreate) SetChangeType(v string) *ConfigHistoryCreate {
	_c.mutation.SetChangeType(v)
	return _c
}

// SetChangeDescription sets the "change_description" field.
func (_c *ConfigHistoryCreate) SetChangeDescription(v string) *ConfigHistoryCreate {
	_c.mutation.SetChangeDescription(v)
	return _c
}

// SetNillableChangeDescription sets the "change_description" field if the given value is not nil.
func (_c *ConfigHistoryCreate) SetNillableChangeDescription(v *string) *ConfigHistoryCreate {
	if v != nil {
		_c.SetChangeDescription(*v)
	}
	return _c
}

// SetOldVersion sets the "old_version" field.
func (_c *ConfigHistoryCreate) SetOldVersion(v string) *ConfigHistoryCreate {
	_c.mutation.SetOldVersion(v)
	return _c
}

// SetNillableOldVersion sets the "old_version" field if the given value is not nil.
func (_c *ConfigHistoryCreate) SetNillableOldVersion(v *string) *ConfigHistoryCreate {
	if v != nil {
		_c.SetOldVersion(*v)
	}
	return _c
}

// SetNewVersion sets the "new_version" field.
func (_c *ConfigHistoryCreate) SetNewVersion(v string) *ConfigHistoryCreate {
	_c.mutation.SetNewVersion(v)
	return _c
}

// SetIPAddress sets the "ip_address" field.
func (_c *ConfigHistoryCreate) SetIPAddress(v string) *ConfigHistoryCreate {
	_c.mutation.SetIPAddress(v)
	return _c
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_c *ConfigHistoryCreate) SetNillableIPAddress(v *string) *ConfigHistoryCreate {
	if v != nil {
		_c.SetIPAddress(*v)
	}
	return _c
}

// SetUserAgent sets the "user_agent" field.
func (_c *ConfigHistoryCreate) SetUserAgent(v string) *ConfigHistoryCreate {
	_c.mutation.SetUserAgent(v)
	return _c
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_c *ConfigHistoryCreate) SetNillableUserAgent(v *string) *ConfigHistoryCreate {
	if v != nil {
		_c.SetUserAgent(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *ConfigHistoryCreate) SetCreatedAt(v time.Time) *ConfigHistoryCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetID sets the "id" field.
func (_c *ConfigHistoryCreate) SetID(v uuid.UUID) *ConfigHistoryCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *ConfigHistoryCreate) SetNillableID(v *uuid.UUID) *ConfigHistoryCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetConfigID sets the "config" edge to the UserConfig entity by ID.
func (_c *ConfigHistoryCreate) SetConfigID(id uuid.UUID) *ConfigHistoryCreate {
	_c.mutation.SetConfigID(id)
	return _c
}

// SetConfig sets the "config" edge to the UserConfig entity.
func (_c *ConfigHistoryCreate) SetConfig(v *UserConfig) *ConfigHistoryCreate {
	return _c.SetConfigID(v.ID)
}

// Mutation returns the ConfigHistoryMutation object of the builder.
func (_c *ConfigHistoryCreate) Mutation() *ConfigHistoryMutation {
	return _c.mutation
}

// Save creates the ConfigHistory in the database.
func (_c *ConfigHistoryCreate) Save(ctx context.Context) (*ConfigHistory, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ConfigHistoryCreate) SaveX(ctx context.Context) *ConfigHistory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ConfigHistoryCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ConfigHistoryCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ConfigHistoryCreate) defaults() {
	if _, ok := _c.mutation.ID(); !ok {
		v := confighistory.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ConfigHistoryCreate) check() error {
	if _, ok := _c.mutation.NewConfigData(); !ok {
		return &ValidationError{Name: "new_config_data", err: errors.New(`ent: missing required field "ConfigHistory.new_config_data"`)}
	}
	if _, ok := _c.mutation.ChangeType(); !ok {
		return &ValidationError{Name: "change_type", err: errors.New(`ent: missing required field "ConfigHistory.change_type"`)}
	}
	if v, ok := _c.mutation.ChangeType(); ok {
		if err := confighistory.ChangeTypeValidator(v); err != nil {
			return &ValidationError{Name: "change_type", err: fmt.Errorf(`ent: validator failed for field "ConfigHistory.change_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.NewVersion(); !ok {
		return &ValidationError{Name: "new_version", err: errors.New(`ent: missing required field "ConfigHistory.new_version"`)}
	}
	if v, ok := _c.mutation.NewVersion(); ok {
		if err := confighistory.NewVersionValidator(v); err != nil {
			return &ValidationError{Name: "new_version", err: fmt.Errorf(`ent: validator failed for field "ConfigHistory.new_version": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ConfigHistory.created_at"`)}
	}
	if len(_c.mutation.ConfigIDs()) == 0 {
		return &ValidationError{Name: "config", err: errors.New(`ent: missing required edge "ConfigHistory.config"`)}
	}
	return nil
}

func (_c *ConfigHistoryCreate) sqlSave(ctx context.Context) (*ConfigHistory, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ConfigHistoryCreate) createSpec() (*ConfigHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &ConfigHistory{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(confighistory.Table, sqlgraph.NewFieldSpec(confighistory.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.OldConfigData(); ok {
		_spec.SetField(confighistory.FieldOldConfigData, field.TypeJSON, value)
		_node.OldConfigData = value
	}
	if value, ok := _c.mutation.NewConfigData(); ok {
		_spec.SetField(confighistory.FieldNewConfigData, field.TypeJSON, value)
		_node.NewConfigData = value
	}
	if value, ok := _c.mutation.ChangeType(); ok {
		_spec.SetField(confighistory.FieldChangeType, field.TypeString, value)
		_node.ChangeType = value
	}
	if value, ok := _c.mutation.ChangeDescription(); ok {
		_spec.SetField(confighistory.FieldChangeDescription, field.TypeString, value)
		_node.ChangeDescription = value
	}
	if value, ok := _c.mutation.OldVersion(); ok {
		_spec.SetField(confighistory.FieldOldVersion, field.TypeString, value)
		_node.OldVersion = value
	}
	if value, ok := _c.mutation.NewVersion(); ok {
		_spec.SetField(confighistory.FieldNewVersion, field.TypeString, value)
		_node.NewVersion = value
	}
	if value, ok := _c.mutation.IPAddress(); ok {
		_spec.SetField(confighistory.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := _c.mutation.UserAgent(); ok {
		_spec.SetField(confighistory.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(confighistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := _c.mutation.ConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   confighistory.ConfigTable,
			Columns: []string{confighistory.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconfig.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_config_history = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ConfigHistoryCreateBulk is the builder for creating many ConfigHistory entities in bulk.
type ConfigHistoryCreateBulk struct {
	config
	err      error
	builders []*ConfigHistoryCreate
}

// Save creates the ConfigHistory entities in the database.
func (_c *ConfigHistoryCreateBulk) Save(ctx context.Context) ([]*ConfigHistory, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ConfigHistory, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConfigHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ConfigHistoryCreateBulk) SaveX(ctx context.Context) []*ConfigHistory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ConfigHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ConfigHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
