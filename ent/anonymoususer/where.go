// Code generated by ent, DO NOT EDIT.

package anonymoususer

import (
	"fiber-ent-apollo-pg/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldLTE(FieldID, id))
}

// BrowserFingerprint applies equality check predicate on the "browser_fingerprint" field. It's identical to BrowserFingerprintEQ.
func BrowserFingerprint(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEQ(FieldBrowserFingerprint, v))
}

// UserAgent applies equality check predicate on the "user_agent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEQ(FieldUserAgent, v))
}

// IPAddress applies equality check predicate on the "ip_address" field. It's identical to IPAddressEQ.
func IPAddress(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEQ(FieldIPAddress, v))
}

// Timezone applies equality check predicate on the "timezone" field. It's identical to TimezoneEQ.
func Timezone(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEQ(FieldTimezone, v))
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEQ(FieldLanguage, v))
}

// ScreenResolution applies equality check predicate on the "screen_resolution" field. It's identical to ScreenResolutionEQ.
func ScreenResolution(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEQ(FieldScreenResolution, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEQ(FieldIsActive, v))
}

// LastActivityAt applies equality check predicate on the "last_activity_at" field. It's identical to LastActivityAtEQ.
func LastActivityAt(v time.Time) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEQ(FieldLastActivityAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEQ(FieldUpdatedAt, v))
}

// BrowserFingerprintEQ applies the EQ predicate on the "browser_fingerprint" field.
func BrowserFingerprintEQ(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEQ(FieldBrowserFingerprint, v))
}

// BrowserFingerprintNEQ applies the NEQ predicate on the "browser_fingerprint" field.
func BrowserFingerprintNEQ(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldNEQ(FieldBrowserFingerprint, v))
}

// BrowserFingerprintIn applies the In predicate on the "browser_fingerprint" field.
func BrowserFingerprintIn(vs ...string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldIn(FieldBrowserFingerprint, vs...))
}

// BrowserFingerprintNotIn applies the NotIn predicate on the "browser_fingerprint" field.
func BrowserFingerprintNotIn(vs ...string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldNotIn(FieldBrowserFingerprint, vs...))
}

// BrowserFingerprintGT applies the GT predicate on the "browser_fingerprint" field.
func BrowserFingerprintGT(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldGT(FieldBrowserFingerprint, v))
}

// BrowserFingerprintGTE applies the GTE predicate on the "browser_fingerprint" field.
func BrowserFingerprintGTE(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldGTE(FieldBrowserFingerprint, v))
}

// BrowserFingerprintLT applies the LT predicate on the "browser_fingerprint" field.
func BrowserFingerprintLT(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldLT(FieldBrowserFingerprint, v))
}

// BrowserFingerprintLTE applies the LTE predicate on the "browser_fingerprint" field.
func BrowserFingerprintLTE(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldLTE(FieldBrowserFingerprint, v))
}

// BrowserFingerprintContains applies the Contains predicate on the "browser_fingerprint" field.
func BrowserFingerprintContains(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldContains(FieldBrowserFingerprint, v))
}

// BrowserFingerprintHasPrefix applies the HasPrefix predicate on the "browser_fingerprint" field.
func BrowserFingerprintHasPrefix(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldHasPrefix(FieldBrowserFingerprint, v))
}

// BrowserFingerprintHasSuffix applies the HasSuffix predicate on the "browser_fingerprint" field.
func BrowserFingerprintHasSuffix(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldHasSuffix(FieldBrowserFingerprint, v))
}

// BrowserFingerprintEqualFold applies the EqualFold predicate on the "browser_fingerprint" field.
func BrowserFingerprintEqualFold(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEqualFold(FieldBrowserFingerprint, v))
}

// BrowserFingerprintContainsFold applies the ContainsFold predicate on the "browser_fingerprint" field.
func BrowserFingerprintContainsFold(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldContainsFold(FieldBrowserFingerprint, v))
}

// UserAgentEQ applies the EQ predicate on the "user_agent" field.
func UserAgentEQ(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEQ(FieldUserAgent, v))
}

// UserAgentNEQ applies the NEQ predicate on the "user_agent" field.
func UserAgentNEQ(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldNEQ(FieldUserAgent, v))
}

// UserAgentIn applies the In predicate on the "user_agent" field.
func UserAgentIn(vs ...string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldIn(FieldUserAgent, vs...))
}

// UserAgentNotIn applies the NotIn predicate on the "user_agent" field.
func UserAgentNotIn(vs ...string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldNotIn(FieldUserAgent, vs...))
}

// UserAgentGT applies the GT predicate on the "user_agent" field.
func UserAgentGT(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldGT(FieldUserAgent, v))
}

// UserAgentGTE applies the GTE predicate on the "user_agent" field.
func UserAgentGTE(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldGTE(FieldUserAgent, v))
}

// UserAgentLT applies the LT predicate on the "user_agent" field.
func UserAgentLT(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldLT(FieldUserAgent, v))
}

// UserAgentLTE applies the LTE predicate on the "user_agent" field.
func UserAgentLTE(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldLTE(FieldUserAgent, v))
}

// UserAgentContains applies the Contains predicate on the "user_agent" field.
func UserAgentContains(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldContains(FieldUserAgent, v))
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "user_agent" field.
func UserAgentHasPrefix(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldHasPrefix(FieldUserAgent, v))
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "user_agent" field.
func UserAgentHasSuffix(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldHasSuffix(FieldUserAgent, v))
}

// UserAgentIsNil applies the IsNil predicate on the "user_agent" field.
func UserAgentIsNil() predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldIsNull(FieldUserAgent))
}

// UserAgentNotNil applies the NotNil predicate on the "user_agent" field.
func UserAgentNotNil() predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldNotNull(FieldUserAgent))
}

// UserAgentEqualFold applies the EqualFold predicate on the "user_agent" field.
func UserAgentEqualFold(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEqualFold(FieldUserAgent, v))
}

// UserAgentContainsFold applies the ContainsFold predicate on the "user_agent" field.
func UserAgentContainsFold(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldContainsFold(FieldUserAgent, v))
}

// IPAddressEQ applies the EQ predicate on the "ip_address" field.
func IPAddressEQ(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEQ(FieldIPAddress, v))
}

// IPAddressNEQ applies the NEQ predicate on the "ip_address" field.
func IPAddressNEQ(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldNEQ(FieldIPAddress, v))
}

// IPAddressIn applies the In predicate on the "ip_address" field.
func IPAddressIn(vs ...string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldIn(FieldIPAddress, vs...))
}

// IPAddressNotIn applies the NotIn predicate on the "ip_address" field.
func IPAddressNotIn(vs ...string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldNotIn(FieldIPAddress, vs...))
}

// IPAddressGT applies the GT predicate on the "ip_address" field.
func IPAddressGT(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldGT(FieldIPAddress, v))
}

// IPAddressGTE applies the GTE predicate on the "ip_address" field.
func IPAddressGTE(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldGTE(FieldIPAddress, v))
}

// IPAddressLT applies the LT predicate on the "ip_address" field.
func IPAddressLT(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldLT(FieldIPAddress, v))
}

// IPAddressLTE applies the LTE predicate on the "ip_address" field.
func IPAddressLTE(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldLTE(FieldIPAddress, v))
}

// IPAddressContains applies the Contains predicate on the "ip_address" field.
func IPAddressContains(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldContains(FieldIPAddress, v))
}

// IPAddressHasPrefix applies the HasPrefix predicate on the "ip_address" field.
func IPAddressHasPrefix(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldHasPrefix(FieldIPAddress, v))
}

// IPAddressHasSuffix applies the HasSuffix predicate on the "ip_address" field.
func IPAddressHasSuffix(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldHasSuffix(FieldIPAddress, v))
}

// IPAddressIsNil applies the IsNil predicate on the "ip_address" field.
func IPAddressIsNil() predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldIsNull(FieldIPAddress))
}

// IPAddressNotNil applies the NotNil predicate on the "ip_address" field.
func IPAddressNotNil() predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldNotNull(FieldIPAddress))
}

// IPAddressEqualFold applies the EqualFold predicate on the "ip_address" field.
func IPAddressEqualFold(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEqualFold(FieldIPAddress, v))
}

// IPAddressContainsFold applies the ContainsFold predicate on the "ip_address" field.
func IPAddressContainsFold(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldContainsFold(FieldIPAddress, v))
}

// TimezoneEQ applies the EQ predicate on the "timezone" field.
func TimezoneEQ(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEQ(FieldTimezone, v))
}

// TimezoneNEQ applies the NEQ predicate on the "timezone" field.
func TimezoneNEQ(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldNEQ(FieldTimezone, v))
}

// TimezoneIn applies the In predicate on the "timezone" field.
func TimezoneIn(vs ...string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldIn(FieldTimezone, vs...))
}

// TimezoneNotIn applies the NotIn predicate on the "timezone" field.
func TimezoneNotIn(vs ...string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldNotIn(FieldTimezone, vs...))
}

// TimezoneGT applies the GT predicate on the "timezone" field.
func TimezoneGT(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldGT(FieldTimezone, v))
}

// TimezoneGTE applies the GTE predicate on the "timezone" field.
func TimezoneGTE(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldGTE(FieldTimezone, v))
}

// TimezoneLT applies the LT predicate on the "timezone" field.
func TimezoneLT(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldLT(FieldTimezone, v))
}

// TimezoneLTE applies the LTE predicate on the "timezone" field.
func TimezoneLTE(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldLTE(FieldTimezone, v))
}

// TimezoneContains applies the Contains predicate on the "timezone" field.
func TimezoneContains(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldContains(FieldTimezone, v))
}

// TimezoneHasPrefix applies the HasPrefix predicate on the "timezone" field.
func TimezoneHasPrefix(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldHasPrefix(FieldTimezone, v))
}

// TimezoneHasSuffix applies the HasSuffix predicate on the "timezone" field.
func TimezoneHasSuffix(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldHasSuffix(FieldTimezone, v))
}

// TimezoneIsNil applies the IsNil predicate on the "timezone" field.
func TimezoneIsNil() predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldIsNull(FieldTimezone))
}

// TimezoneNotNil applies the NotNil predicate on the "timezone" field.
func TimezoneNotNil() predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldNotNull(FieldTimezone))
}

// TimezoneEqualFold applies the EqualFold predicate on the "timezone" field.
func TimezoneEqualFold(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEqualFold(FieldTimezone, v))
}

// TimezoneContainsFold applies the ContainsFold predicate on the "timezone" field.
func TimezoneContainsFold(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldContainsFold(FieldTimezone, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldGT(FieldLanguage, v))
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldGTE(FieldLanguage, v))
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldLT(FieldLanguage, v))
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldLTE(FieldLanguage, v))
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldContains(FieldLanguage, v))
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldHasPrefix(FieldLanguage, v))
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldHasSuffix(FieldLanguage, v))
}

// LanguageIsNil applies the IsNil predicate on the "language" field.
func LanguageIsNil() predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldIsNull(FieldLanguage))
}

// LanguageNotNil applies the NotNil predicate on the "language" field.
func LanguageNotNil() predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldNotNull(FieldLanguage))
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEqualFold(FieldLanguage, v))
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldContainsFold(FieldLanguage, v))
}

// ScreenResolutionEQ applies the EQ predicate on the "screen_resolution" field.
func ScreenResolutionEQ(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEQ(FieldScreenResolution, v))
}

// ScreenResolutionNEQ applies the NEQ predicate on the "screen_resolution" field.
func ScreenResolutionNEQ(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldNEQ(FieldScreenResolution, v))
}

// ScreenResolutionIn applies the In predicate on the "screen_resolution" field.
func ScreenResolutionIn(vs ...string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldIn(FieldScreenResolution, vs...))
}

// ScreenResolutionNotIn applies the NotIn predicate on the "screen_resolution" field.
func ScreenResolutionNotIn(vs ...string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldNotIn(FieldScreenResolution, vs...))
}

// ScreenResolutionGT applies the GT predicate on the "screen_resolution" field.
func ScreenResolutionGT(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldGT(FieldScreenResolution, v))
}

// ScreenResolutionGTE applies the GTE predicate on the "screen_resolution" field.
func ScreenResolutionGTE(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldGTE(FieldScreenResolution, v))
}

// ScreenResolutionLT applies the LT predicate on the "screen_resolution" field.
func ScreenResolutionLT(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldLT(FieldScreenResolution, v))
}

// ScreenResolutionLTE applies the LTE predicate on the "screen_resolution" field.
func ScreenResolutionLTE(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldLTE(FieldScreenResolution, v))
}

// ScreenResolutionContains applies the Contains predicate on the "screen_resolution" field.
func ScreenResolutionContains(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldContains(FieldScreenResolution, v))
}

// ScreenResolutionHasPrefix applies the HasPrefix predicate on the "screen_resolution" field.
func ScreenResolutionHasPrefix(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldHasPrefix(FieldScreenResolution, v))
}

// ScreenResolutionHasSuffix applies the HasSuffix predicate on the "screen_resolution" field.
func ScreenResolutionHasSuffix(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldHasSuffix(FieldScreenResolution, v))
}

// ScreenResolutionIsNil applies the IsNil predicate on the "screen_resolution" field.
func ScreenResolutionIsNil() predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldIsNull(FieldScreenResolution))
}

// ScreenResolutionNotNil applies the NotNil predicate on the "screen_resolution" field.
func ScreenResolutionNotNil() predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldNotNull(FieldScreenResolution))
}

// ScreenResolutionEqualFold applies the EqualFold predicate on the "screen_resolution" field.
func ScreenResolutionEqualFold(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEqualFold(FieldScreenResolution, v))
}

// ScreenResolutionContainsFold applies the ContainsFold predicate on the "screen_resolution" field.
func ScreenResolutionContainsFold(v string) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldContainsFold(FieldScreenResolution, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldNEQ(FieldIsActive, v))
}

// LastActivityAtEQ applies the EQ predicate on the "last_activity_at" field.
func LastActivityAtEQ(v time.Time) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEQ(FieldLastActivityAt, v))
}

// LastActivityAtNEQ applies the NEQ predicate on the "last_activity_at" field.
func LastActivityAtNEQ(v time.Time) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldNEQ(FieldLastActivityAt, v))
}

// LastActivityAtIn applies the In predicate on the "last_activity_at" field.
func LastActivityAtIn(vs ...time.Time) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldIn(FieldLastActivityAt, vs...))
}

// LastActivityAtNotIn applies the NotIn predicate on the "last_activity_at" field.
func LastActivityAtNotIn(vs ...time.Time) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldNotIn(FieldLastActivityAt, vs...))
}

// LastActivityAtGT applies the GT predicate on the "last_activity_at" field.
func LastActivityAtGT(v time.Time) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldGT(FieldLastActivityAt, v))
}

// LastActivityAtGTE applies the GTE predicate on the "last_activity_at" field.
func LastActivityAtGTE(v time.Time) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldGTE(FieldLastActivityAt, v))
}

// LastActivityAtLT applies the LT predicate on the "last_activity_at" field.
func LastActivityAtLT(v time.Time) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldLT(FieldLastActivityAt, v))
}

// LastActivityAtLTE applies the LTE predicate on the "last_activity_at" field.
func LastActivityAtLTE(v time.Time) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldLTE(FieldLastActivityAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasConfigs applies the HasEdge predicate on the "configs" edge.
func HasConfigs() predicate.AnonymousUser {
	return predicate.AnonymousUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ConfigsTable, ConfigsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConfigsWith applies the HasEdge predicate on the "configs" edge with a given conditions (other predicates).
func HasConfigsWith(preds ...predicate.UserConfig) predicate.AnonymousUser {
	return predicate.AnonymousUser(func(s *sql.Selector) {
		step := newConfigsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExportRecords applies the HasEdge predicate on the "export_records" edge.
func HasExportRecords() predicate.AnonymousUser {
	return predicate.AnonymousUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExportRecordsTable, ExportRecordsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExportRecordsWith applies the HasEdge predicate on the "export_records" edge with a given conditions (other predicates).
func HasExportRecordsWith(preds ...predicate.ExportRecord) predicate.AnonymousUser {
	return predicate.AnonymousUser(func(s *sql.Selector) {
		step := newExportRecordsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AnonymousUser) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AnonymousUser) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AnonymousUser) predicate.AnonymousUser {
	return predicate.AnonymousUser(sql.NotPredicates(p))
}
