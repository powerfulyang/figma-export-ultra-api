// Code generated by ent, DO NOT EDIT.

package anonymoususer

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the anonymoususer type in the database.
	Label = "anonymous_user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBrowserFingerprint holds the string denoting the browser_fingerprint field in the database.
	FieldBrowserFingerprint = "browser_fingerprint"
	// FieldUserAgent holds the string denoting the user_agent field in the database.
	FieldUserAgent = "user_agent"
	// FieldIPAddress holds the string denoting the ip_address field in the database.
	FieldIPAddress = "ip_address"
	// FieldTimezone holds the string denoting the timezone field in the database.
	FieldTimezone = "timezone"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldScreenResolution holds the string denoting the screen_resolution field in the database.
	FieldScreenResolution = "screen_resolution"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldLastActivityAt holds the string denoting the last_activity_at field in the database.
	FieldLastActivityAt = "last_activity_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeConfigs holds the string denoting the configs edge name in mutations.
	EdgeConfigs = "configs"
	// EdgeExportRecords holds the string denoting the export_records edge name in mutations.
	EdgeExportRecords = "export_records"
	// Table holds the table name of the anonymoususer in the database.
	Table = "anonymous_users"
	// ConfigsTable is the table that holds the configs relation/edge.
	ConfigsTable = "user_configs"
	// ConfigsInverseTable is the table name for the UserConfig entity.
	// It exists in this package in order to avoid circular dependency with the "userconfig" package.
	ConfigsInverseTable = "user_configs"
	// ConfigsColumn is the table column denoting the configs relation/edge.
	ConfigsColumn = "anonymous_user_configs"
	// ExportRecordsTable is the table that holds the export_records relation/edge.
	ExportRecordsTable = "export_records"
	// ExportRecordsInverseTable is the table name for the ExportRecord entity.
	// It exists in this package in order to avoid circular dependency with the "exportrecord" package.
	ExportRecordsInverseTable = "export_records"
	// ExportRecordsColumn is the table column denoting the export_records relation/edge.
	ExportRecordsColumn = "anonymous_user_export_records"
)

// Columns holds all SQL columns for anonymoususer fields.
var Columns = []string{
	FieldID,
	FieldBrowserFingerprint,
	FieldUserAgent,
	FieldIPAddress,
	FieldTimezone,
	FieldLanguage,
	FieldScreenResolution,
	FieldIsActive,
	FieldLastActivityAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// BrowserFingerprintValidator is a validator for the "browser_fingerprint" field. It is called by the builders before save.
	BrowserFingerprintValidator func(string) error
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultLastActivityAt holds the default value on creation for the "last_activity_at" field.
	DefaultLastActivityAt time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the AnonymousUser queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBrowserFingerprint orders the results by the browser_fingerprint field.
func ByBrowserFingerprint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrowserFingerprint, opts...).ToFunc()
}

// ByUserAgent orders the results by the user_agent field.
func ByUserAgent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserAgent, opts...).ToFunc()
}

// ByIPAddress orders the results by the ip_address field.
func ByIPAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIPAddress, opts...).ToFunc()
}

// ByTimezone orders the results by the timezone field.
func ByTimezone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimezone, opts...).ToFunc()
}

// ByLanguage orders the results by the language field.
func ByLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguage, opts...).ToFunc()
}

// ByScreenResolution orders the results by the screen_resolution field.
func ByScreenResolution(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScreenResolution, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByLastActivityAt orders the results by the last_activity_at field.
func ByLastActivityAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastActivityAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByConfigsCount orders the results by configs count.
func ByConfigsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newConfigsStep(), opts...)
	}
}

// ByConfigs orders the results by configs terms.
func ByConfigs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConfigsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExportRecordsCount orders the results by export_records count.
func ByExportRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExportRecordsStep(), opts...)
	}
}

// ByExportRecords orders the results by export_records terms.
func ByExportRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExportRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newConfigsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConfigsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ConfigsTable, ConfigsColumn),
	)
}
func newExportRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExportRecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExportRecordsTable, ExportRecordsColumn),
	)
}
