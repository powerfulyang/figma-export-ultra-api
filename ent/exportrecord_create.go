// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fiber-ent-apollo-pg/ent/anonymoususer"
	"fiber-ent-apollo-pg/ent/exportrecord"
	"fiber-ent-apollo-pg/ent/user"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ExportRecordCreate is the builder for creating a ExportRecord entity.
type ExportRecordCreate struct {
	config
	mutation *ExportRecordMutation
	hooks    []Hook
}

// SetFigmaFileID sets the "figma_file_id" field.
func (_c *ExportRecordCreate) SetFigmaFileID(v string) *ExportRecordCreate {
	_c.mutation.SetFigmaFileID(v)
	return _c
}

// SetFigmaFileName sets the "figma_file_name" field.
func (_c *ExportRecordCreate) SetFigmaFileName(v string) *ExportRecordCreate {
	_c.mutation.SetFigmaFileName(v)
	return _c
}

// SetNillableFigmaFileName sets the "figma_file_name" field if the given value is not nil.
func (_c *ExportRecordCreate) SetNillableFigmaFileName(v *string) *ExportRecordCreate {
	if v != nil {
		_c.SetFigmaFileName(*v)
	}
	return _c
}

// SetFigmaFileURL sets the "figma_file_url" field.
func (_c *ExportRecordCreate) SetFigmaFileURL(v string) *ExportRecordCreate {
	_c.mutation.SetFigmaFileURL(v)
	return _c
}

// SetNillableFigmaFileURL sets the "figma_file_url" field if the given value is not nil.
func (_c *ExportRecordCreate) SetNillableFigmaFileURL(v *string) *ExportRecordCreate {
	if v != nil {
		_c.SetFigmaFileURL(*v)
	}
	return _c
}

// SetExportFormat sets the "export_format" field.
func (_c *ExportRecordCreate) SetExportFormat(v exportrecord.ExportFormat) *ExportRecordCreate {
	_c.mutation.SetExportFormat(v)
	return _c
}

// SetExportScale sets the "export_scale" field.
func (_c *ExportRecordCreate) SetExportScale(v string) *ExportRecordCreate {
	_c.mutation.SetExportScale(v)
	return _c
}

// SetExportSettings sets the "export_settings" field.
func (_c *ExportRecordCreate) SetExportSettings(v map[string]interface{}) *ExportRecordCreate {
	_c.mutation.SetExportSettings(v)
	return _c
}

// SetSelectedNodes sets the "selected_nodes" field.
func (_c *ExportRecordCreate) SetSelectedNodes(v []string) *ExportRecordCreate {
	_c.mutation.SetSelectedNodes(v)
	return _c
}

// SetTotalAssets sets the "total_assets" field.
func (_c *ExportRecordCreate) SetTotalAssets(v int) *ExportRecordCreate {
	_c.mutation.SetTotalAssets(v)
	return _c
}

// SetExportedAssets sets the "exported_assets" field.
func (_c *ExportRecordCreate) SetExportedAssets(v int) *ExportRecordCreate {
	_c.mutation.SetExportedAssets(v)
	return _c
}

// SetStatus sets the "status" field.
func (_c *ExportRecordCreate) SetStatus(v exportrecord.Status) *ExportRecordCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetDownloadURL sets the "download_url" field.
func (_c *ExportRecordCreate) SetDownloadURL(v string) *ExportRecordCreate {
	_c.mutation.SetDownloadURL(v)
	return _c
}

// SetNillableDownloadURL sets the "download_url" field if the given value is not nil.
func (_c *ExportRecordCreate) SetNillableDownloadURL(v *string) *ExportRecordCreate {
	if v != nil {
		_c.SetDownloadURL(*v)
	}
	return _c
}

// SetErrorMessage sets the "error_message" field.
func (_c *ExportRecordCreate) SetErrorMessage(v string) *ExportRecordCreate {
	_c.mutation.SetErrorMessage(v)
	return _c
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (_c *ExportRecordCreate) SetNillableErrorMessage(v *string) *ExportRecordCreate {
	if v != nil {
		_c.SetErrorMessage(*v)
	}
	return _c
}

// SetIPAddress sets the "ip_address" field.
func (_c *ExportRecordCreate) SetIPAddress(v string) *ExportRecordCreate {
	_c.mutation.SetIPAddress(v)
	return _c
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_c *ExportRecordCreate) SetNillableIPAddress(v *string) *ExportRecordCreate {
	if v != nil {
		_c.SetIPAddress(*v)
	}
	return _c
}

// SetUserAgent sets the "user_agent" field.
func (_c *ExportRecordCreate) SetUserAgent(v string) *ExportRecordCreate {
	_c.mutation.SetUserAgent(v)
	return _c
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_c *ExportRecordCreate) SetNillableUserAgent(v *string) *ExportRecordCreate {
	if v != nil {
		_c.SetUserAgent(*v)
	}
	return _c
}

// SetStartedAt sets the "started_at" field.
func (_c *ExportRecordCreate) SetStartedAt(v time.Time) *ExportRecordCreate {
	_c.mutation.SetStartedAt(v)
	return _c
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (_c *ExportRecordCreate) SetNillableStartedAt(v *time.Time) *ExportRecordCreate {
	if v != nil {
		_c.SetStartedAt(*v)
	}
	return _c
}

// SetCompletedAt sets the "completed_at" field.
func (_c *ExportRecordCreate) SetCompletedAt(v time.Time) *ExportRecordCreate {
	_c.mutation.SetCompletedAt(v)
	return _c
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (_c *ExportRecordCreate) SetNillableCompletedAt(v *time.Time) *ExportRecordCreate {
	if v != nil {
		_c.SetCompletedAt(*v)
	}
	return _c
}

// SetExpiresAt sets the "expires_at" field.
func (_c *ExportRecordCreate) SetExpiresAt(v time.Time) *ExportRecordCreate {
	_c.mutation.SetExpiresAt(v)
	return _c
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_c *ExportRecordCreate) SetNillableExpiresAt(v *time.Time) *ExportRecordCreate {
	if v != nil {
		_c.SetExpiresAt(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *ExportRecordCreate) SetCreatedAt(v time.Time) *ExportRecordCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ExportRecordCreate) SetUpdatedAt(v time.Time) *ExportRecordCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetID sets the "id" field.
func (_c *ExportRecordCreate) SetID(v uuid.UUID) *ExportRecordCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *ExportRecordCreate) SetNillableID(v *uuid.UUID) *ExportRecordCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_c *ExportRecordCreate) SetUserID(id uuid.UUID) *ExportRecordCreate {
	_c.mutation.SetUserID(id)
	return _c
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_c *ExportRecordCreate) SetNillableUserID(id *uuid.UUID) *ExportRecordCreate {
	if id != nil {
		_c = _c.SetUserID(*id)
	}
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *ExportRecordCreate) SetUser(v *User) *ExportRecordCreate {
	return _c.SetUserID(v.ID)
}

// SetAnonymousUserID sets the "anonymous_user" edge to the AnonymousUser entity by ID.
func (_c *ExportRecordCreate) SetAnonymousUserID(id uuid.UUID) *ExportRecordCreate {
	_c.mutation.SetAnonymousUserID(id)
	return _c
}

// SetNillableAnonymousUserID sets the "anonymous_user" edge to the AnonymousUser entity by ID if the given value is not nil.
func (_c *ExportRecordCreate) SetNillableAnonymousUserID(id *uuid.UUID) *ExportRecordCreate {
	if id != nil {
		_c = _c.SetAnonymousUserID(*id)
	}
	return _c
}

// SetAnonymousUser sets the "anonymous_user" edge to the AnonymousUser entity.
func (_c *ExportRecordCreate) SetAnonymousUser(v *AnonymousUser) *ExportRecordCreate {
	return _c.SetAnonymousUserID(v.ID)
}

// Mutation returns the ExportRecordMutation object of the builder.
func (_c *ExportRecordCreate) Mutation() *ExportRecordMutation {
	return _c.mutation
}

// Save creates the ExportRecord in the database.
func (_c *ExportRecordCreate) Save(ctx context.Context) (*ExportRecord, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ExportRecordCreate) SaveX(ctx context.Context) *ExportRecord {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ExportRecordCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ExportRecordCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ExportRecordCreate) defaults() {
	if _, ok := _c.mutation.ID(); !ok {
		v := exportrecord.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ExportRecordCreate) check() error {
	if _, ok := _c.mutation.FigmaFileID(); !ok {
		return &ValidationError{Name: "figma_file_id", err: errors.New(`ent: missing required field "ExportRecord.figma_file_id"`)}
	}
	if v, ok := _c.mutation.FigmaFileID(); ok {
		if err := exportrecord.FigmaFileIDValidator(v); err != nil {
			return &ValidationError{Name: "figma_file_id", err: fmt.Errorf(`ent: validator failed for field "ExportRecord.figma_file_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ExportFormat(); !ok {
		return &ValidationError{Name: "export_format", err: errors.New(`ent: missing required field "ExportRecord.export_format"`)}
	}
	if v, ok := _c.mutation.ExportFormat(); ok {
		if err := exportrecord.ExportFormatValidator(v); err != nil {
			return &ValidationError{Name: "export_format", err: fmt.Errorf(`ent: validator failed for field "ExportRecord.export_format": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ExportScale(); !ok {
		return &ValidationError{Name: "export_scale", err: errors.New(`ent: missing required field "ExportRecord.export_scale"`)}
	}
	if _, ok := _c.mutation.ExportSettings(); !ok {
		return &ValidationError{Name: "export_settings", err: errors.New(`ent: missing required field "ExportRecord.export_settings"`)}
	}
	if _, ok := _c.mutation.TotalAssets(); !ok {
		return &ValidationError{Name: "total_assets", err: errors.New(`ent: missing required field "ExportRecord.total_assets"`)}
	}
	if _, ok := _c.mutation.ExportedAssets(); !ok {
		return &ValidationError{Name: "exported_assets", err: errors.New(`ent: missing required field "ExportRecord.exported_assets"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ExportRecord.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := exportrecord.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ExportRecord.status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ExportRecord.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ExportRecord.updated_at"`)}
	}
	return nil
}

func (_c *ExportRecordCreate) sqlSave(ctx context.Context) (*ExportRecord, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ExportRecordCreate) createSpec() (*ExportRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &ExportRecord{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(exportrecord.Table, sqlgraph.NewFieldSpec(exportrecord.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.FigmaFileID(); ok {
		_spec.SetField(exportrecord.FieldFigmaFileID, field.TypeString, value)
		_node.FigmaFileID = value
	}
	if value, ok := _c.mutation.FigmaFileName(); ok {
		_spec.SetField(exportrecord.FieldFigmaFileName, field.TypeString, value)
		_node.FigmaFileName = value
	}
	if value, ok := _c.mutation.FigmaFileURL(); ok {
		_spec.SetField(exportrecord.FieldFigmaFileURL, field.TypeString, value)
		_node.FigmaFileURL = value
	}
	if value, ok := _c.mutation.ExportFormat(); ok {
		_spec.SetField(exportrecord.FieldExportFormat, field.TypeEnum, value)
		_node.ExportFormat = value
	}
	if value, ok := _c.mutation.ExportScale(); ok {
		_spec.SetField(exportrecord.FieldExportScale, field.TypeString, value)
		_node.ExportScale = value
	}
	if value, ok := _c.mutation.ExportSettings(); ok {
		_spec.SetField(exportrecord.FieldExportSettings, field.TypeJSON, value)
		_node.ExportSettings = value
	}
	if value, ok := _c.mutation.SelectedNodes(); ok {
		_spec.SetField(exportrecord.FieldSelectedNodes, field.TypeJSON, value)
		_node.SelectedNodes = value
	}
	if value, ok := _c.mutation.TotalAssets(); ok {
		_spec.SetField(exportrecord.FieldTotalAssets, field.TypeInt, value)
		_node.TotalAssets = value
	}
	if value, ok := _c.mutation.ExportedAssets(); ok {
		_spec.SetField(exportrecord.FieldExportedAssets, field.TypeInt, value)
		_node.ExportedAssets = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(exportrecord.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.DownloadURL(); ok {
		_spec.SetField(exportrecord.FieldDownloadURL, field.TypeString, value)
		_node.DownloadURL = value
	}
	if value, ok := _c.mutation.ErrorMessage(); ok {
		_spec.SetField(exportrecord.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = value
	}
	if value, ok := _c.mutation.IPAddress(); ok {
		_spec.SetField(exportrecord.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := _c.mutation.UserAgent(); ok {
		_spec.SetField(exportrecord.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := _c.mutation.StartedAt(); ok {
		_spec.SetField(exportrecord.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := _c.mutation.CompletedAt(); ok {
		_spec.SetField(exportrecord.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = value
	}
	if value, ok := _c.mutation.ExpiresAt(); ok {
		_spec.SetField(exportrecord.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(exportrecord.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(exportrecord.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exportrecord.UserTable,
			Columns: []string{exportrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_export_records = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.AnonymousUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exportrecord.AnonymousUserTable,
			Columns: []string{exportrecord.AnonymousUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(anonymoususer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.anonymous_user_export_records = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExportRecordCreateBulk is the builder for creating many ExportRecord entities in bulk.
type ExportRecordCreateBulk struct {
	config
	err      error
	builders []*ExportRecordCreate
}

// Save creates the ExportRecord entities in the database.
func (_c *ExportRecordCreateBulk) Save(ctx context.Context) ([]*ExportRecord, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ExportRecord, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExportRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ExportRecordCreateBulk) SaveX(ctx context.Context) []*ExportRecord {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ExportRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ExportRecordCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
