// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fiber-ent-apollo-pg/ent/anonymoususer"
	"fiber-ent-apollo-pg/ent/exportrecord"
	"fiber-ent-apollo-pg/ent/predicate"
	"fiber-ent-apollo-pg/ent/userconfig"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AnonymousUserUpdate is the builder for updating AnonymousUser entities.
type AnonymousUserUpdate struct {
	config
	hooks    []Hook
	mutation *AnonymousUserMutation
}

// Where appends a list predicates to the AnonymousUserUpdate builder.
func (_u *AnonymousUserUpdate) Where(ps ...predicate.AnonymousUser) *AnonymousUserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetBrowserFingerprint sets the "browser_fingerprint" field.
func (_u *AnonymousUserUpdate) SetBrowserFingerprint(v string) *AnonymousUserUpdate {
	_u.mutation.SetBrowserFingerprint(v)
	return _u
}

// SetNillableBrowserFingerprint sets the "browser_fingerprint" field if the given value is not nil.
func (_u *AnonymousUserUpdate) SetNillableBrowserFingerprint(v *string) *AnonymousUserUpdate {
	if v != nil {
		_u.SetBrowserFingerprint(*v)
	}
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *AnonymousUserUpdate) SetUserAgent(v string) *AnonymousUserUpdate {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *AnonymousUserUpdate) SetNillableUserAgent(v *string) *AnonymousUserUpdate {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *AnonymousUserUpdate) ClearUserAgent() *AnonymousUserUpdate {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetIPAddress sets the "ip_address" field.
func (_u *AnonymousUserUpdate) SetIPAddress(v string) *AnonymousUserUpdate {
	_u.mutation.SetIPAddress(v)
	return _u
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_u *AnonymousUserUpdate) SetNillableIPAddress(v *string) *AnonymousUserUpdate {
	if v != nil {
		_u.SetIPAddress(*v)
	}
	return _u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (_u *AnonymousUserUpdate) ClearIPAddress() *AnonymousUserUpdate {
	_u.mutation.ClearIPAddress()
	return _u
}

// SetTimezone sets the "timezone" field.
func (_u *AnonymousUserUpdate) SetTimezone(v string) *AnonymousUserUpdate {
	_u.mutation.SetTimezone(v)
	return _u
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (_u *AnonymousUserUpdate) SetNillableTimezone(v *string) *AnonymousUserUpdate {
	if v != nil {
		_u.SetTimezone(*v)
	}
	return _u
}

// ClearTimezone clears the value of the "timezone" field.
func (_u *AnonymousUserUpdate) ClearTimezone() *AnonymousUserUpdate {
	_u.mutation.ClearTimezone()
	return _u
}

// SetLanguage sets the "language" field.
func (_u *AnonymousUserUpdate) SetLanguage(v string) *AnonymousUserUpdate {
	_u.mutation.SetLanguage(v)
	return _u
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (_u *AnonymousUserUpdate) SetNillableLanguage(v *string) *AnonymousUserUpdate {
	if v != nil {
		_u.SetLanguage(*v)
	}
	return _u
}

// ClearLanguage clears the value of the "language" field.
func (_u *AnonymousUserUpdate) ClearLanguage() *AnonymousUserUpdate {
	_u.mutation.ClearLanguage()
	return _u
}

// SetScreenResolution sets the "screen_resolution" field.
func (_u *AnonymousUserUpdate) SetScreenResolution(v string) *AnonymousUserUpdate {
	_u.mutation.SetScreenResolution(v)
	return _u
}

// SetNillableScreenResolution sets the "screen_resolution" field if the given value is not nil.
func (_u *AnonymousUserUpdate) SetNillableScreenResolution(v *string) *AnonymousUserUpdate {
	if v != nil {
		_u.SetScreenResolution(*v)
	}
	return _u
}

// ClearScreenResolution clears the value of the "screen_resolution" field.
func (_u *AnonymousUserUpdate) ClearScreenResolution() *AnonymousUserUpdate {
	_u.mutation.ClearScreenResolution()
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *AnonymousUserUpdate) SetIsActive(v bool) *AnonymousUserUpdate {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *AnonymousUserUpdate) SetNillableIsActive(v *bool) *AnonymousUserUpdate {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetLastActivityAt sets the "last_activity_at" field.
func (_u *AnonymousUserUpdate) SetLastActivityAt(v time.Time) *AnonymousUserUpdate {
	_u.mutation.SetLastActivityAt(v)
	return _u
}

// SetNillableLastActivityAt sets the "last_activity_at" field if the given value is not nil.
func (_u *AnonymousUserUpdate) SetNillableLastActivityAt(v *time.Time) *AnonymousUserUpdate {
	if v != nil {
		_u.SetLastActivityAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AnonymousUserUpdate) SetUpdatedAt(v time.Time) *AnonymousUserUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddConfigIDs adds the "configs" edge to the UserConfig entity by IDs.
func (_u *AnonymousUserUpdate) AddConfigIDs(ids ...uuid.UUID) *AnonymousUserUpdate {
	_u.mutation.AddConfigIDs(ids...)
	return _u
}

// AddConfigs adds the "configs" edges to the UserConfig entity.
func (_u *AnonymousUserUpdate) AddConfigs(v ...*UserConfig) *AnonymousUserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddConfigIDs(ids...)
}

// AddExportRecordIDs adds the "export_records" edge to the ExportRecord entity by IDs.
func (_u *AnonymousUserUpdate) AddExportRecordIDs(ids ...uuid.UUID) *AnonymousUserUpdate {
	_u.mutation.AddExportRecordIDs(ids...)
	return _u
}

// AddExportRecords adds the "export_records" edges to the ExportRecord entity.
func (_u *AnonymousUserUpdate) AddExportRecords(v ...*ExportRecord) *AnonymousUserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddExportRecordIDs(ids...)
}

// Mutation returns the AnonymousUserMutation object of the builder.
func (_u *AnonymousUserUpdate) Mutation() *AnonymousUserMutation {
	return _u.mutation
}

// ClearConfigs clears all "configs" edges to the UserConfig entity.
func (_u *AnonymousUserUpdate) ClearConfigs() *AnonymousUserUpdate {
	_u.mutation.ClearConfigs()
	return _u
}

// RemoveConfigIDs removes the "configs" edge to UserConfig entities by IDs.
func (_u *AnonymousUserUpdate) RemoveConfigIDs(ids ...uuid.UUID) *AnonymousUserUpdate {
	_u.mutation.RemoveConfigIDs(ids...)
	return _u
}

// RemoveConfigs removes "configs" edges to UserConfig entities.
func (_u *AnonymousUserUpdate) RemoveConfigs(v ...*UserConfig) *AnonymousUserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveConfigIDs(ids...)
}

// ClearExportRecords clears all "export_records" edges to the ExportRecord entity.
func (_u *AnonymousUserUpdate) ClearExportRecords() *AnonymousUserUpdate {
	_u.mutation.ClearExportRecords()
	return _u
}

// RemoveExportRecordIDs removes the "export_records" edge to ExportRecord entities by IDs.
func (_u *AnonymousUserUpdate) RemoveExportRecordIDs(ids ...uuid.UUID) *AnonymousUserUpdate {
	_u.mutation.RemoveExportRecordIDs(ids...)
	return _u
}

// RemoveExportRecords removes "export_records" edges to ExportRecord entities.
func (_u *AnonymousUserUpdate) RemoveExportRecords(v ...*ExportRecord) *AnonymousUserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveExportRecordIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AnonymousUserUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AnonymousUserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AnonymousUserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AnonymousUserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AnonymousUserUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := anonymoususer.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AnonymousUserUpdate) check() error {
	if v, ok := _u.mutation.BrowserFingerprint(); ok {
		if err := anonymoususer.BrowserFingerprintValidator(v); err != nil {
			return &ValidationError{Name: "browser_fingerprint", err: fmt.Errorf(`ent: validator failed for field "AnonymousUser.browser_fingerprint": %w`, err)}
		}
	}
	return nil
}

func (_u *AnonymousUserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(anonymoususer.Table, anonymoususer.Columns, sqlgraph.NewFieldSpec(anonymoususer.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.BrowserFingerprint(); ok {
		_spec.SetField(anonymoususer.FieldBrowserFingerprint, field.TypeString, value)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(anonymoususer.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(anonymoususer.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.IPAddress(); ok {
		_spec.SetField(anonymoususer.FieldIPAddress, field.TypeString, value)
	}
	if _u.mutation.IPAddressCleared() {
		_spec.ClearField(anonymoususer.FieldIPAddress, field.TypeString)
	}
	if value, ok := _u.mutation.Timezone(); ok {
		_spec.SetField(anonymoususer.FieldTimezone, field.TypeString, value)
	}
	if _u.mutation.TimezoneCleared() {
		_spec.ClearField(anonymoususer.FieldTimezone, field.TypeString)
	}
	if value, ok := _u.mutation.Language(); ok {
		_spec.SetField(anonymoususer.FieldLanguage, field.TypeString, value)
	}
	if _u.mutation.LanguageCleared() {
		_spec.ClearField(anonymoususer.FieldLanguage, field.TypeString)
	}
	if value, ok := _u.mutation.ScreenResolution(); ok {
		_spec.SetField(anonymoususer.FieldScreenResolution, field.TypeString, value)
	}
	if _u.mutation.ScreenResolutionCleared() {
		_spec.ClearField(anonymoususer.FieldScreenResolution, field.TypeString)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(anonymoususer.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.LastActivityAt(); ok {
		_spec.SetField(anonymoususer.FieldLastActivityAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(anonymoususer.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   anonymoususer.ConfigsTable,
			Columns: []string{anonymoususer.ConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconfig.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedConfigsIDs(); len(nodes) > 0 && !_u.mutation.ConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   anonymoususer.ConfigsTable,
			Columns: []string{anonymoususer.ConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconfig.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   anonymoususer.ConfigsTable,
			Columns: []string{anonymoususer.ConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconfig.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ExportRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   anonymoususer.ExportRecordsTable,
			Columns: []string{anonymoususer.ExportRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exportrecord.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedExportRecordsIDs(); len(nodes) > 0 && !_u.mutation.ExportRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   anonymoususer.ExportRecordsTable,
			Columns: []string{anonymoususer.ExportRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exportrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ExportRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   anonymoususer.ExportRecordsTable,
			Columns: []string{anonymoususer.ExportRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exportrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{anonymoususer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AnonymousUserUpdateOne is the builder for updating a single AnonymousUser entity.
type AnonymousUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AnonymousUserMutation
}

// SetBrowserFingerprint sets the "browser_fingerprint" field.
func (_u *AnonymousUserUpdateOne) SetBrowserFingerprint(v string) *AnonymousUserUpdateOne {
	_u.mutation.SetBrowserFingerprint(v)
	return _u
}

// SetNillableBrowserFingerprint sets the "browser_fingerprint" field if the given value is not nil.
func (_u *AnonymousUserUpdateOne) SetNillableBrowserFingerprint(v *string) *AnonymousUserUpdateOne {
	if v != nil {
		_u.SetBrowserFingerprint(*v)
	}
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *AnonymousUserUpdateOne) SetUserAgent(v string) *AnonymousUserUpdateOne {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *AnonymousUserUpdateOne) SetNillableUserAgent(v *string) *AnonymousUserUpdateOne {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *AnonymousUserUpdateOne) ClearUserAgent() *AnonymousUserUpdateOne {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetIPAddress sets the "ip_address" field.
func (_u *AnonymousUserUpdateOne) SetIPAddress(v string) *AnonymousUserUpdateOne {
	_u.mutation.SetIPAddress(v)
	return _u
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_u *AnonymousUserUpdateOne) SetNillableIPAddress(v *string) *AnonymousUserUpdateOne {
	if v != nil {
		_u.SetIPAddress(*v)
	}
	return _u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (_u *AnonymousUserUpdateOne) ClearIPAddress() *AnonymousUserUpdateOne {
	_u.mutation.ClearIPAddress()
	return _u
}

// SetTimezone sets the "timezone" field.
func (_u *AnonymousUserUpdateOne) SetTimezone(v string) *AnonymousUserUpdateOne {
	_u.mutation.SetTimezone(v)
	return _u
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (_u *AnonymousUserUpdateOne) SetNillableTimezone(v *string) *AnonymousUserUpdateOne {
	if v != nil {
		_u.SetTimezone(*v)
	}
	return _u
}

// ClearTimezone clears the value of the "timezone" field.
func (_u *AnonymousUserUpdateOne) ClearTimezone() *AnonymousUserUpdateOne {
	_u.mutation.ClearTimezone()
	return _u
}

// SetLanguage sets the "language" field.
func (_u *AnonymousUserUpdateOne) SetLanguage(v string) *AnonymousUserUpdateOne {
	_u.mutation.SetLanguage(v)
	return _u
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (_u *AnonymousUserUpdateOne) SetNillableLanguage(v *string) *AnonymousUserUpdateOne {
	if v != nil {
		_u.SetLanguage(*v)
	}
	return _u
}

// ClearLanguage clears the value of the "language" field.
func (_u *AnonymousUserUpdateOne) ClearLanguage() *AnonymousUserUpdateOne {
	_u.mutation.ClearLanguage()
	return _u
}

// SetScreenResolution sets the "screen_resolution" field.
func (_u *AnonymousUserUpdateOne) SetScreenResolution(v string) *AnonymousUserUpdateOne {
	_u.mutation.SetScreenResolution(v)
	return _u
}

// SetNillableScreenResolution sets the "screen_resolution" field if the given value is not nil.
func (_u *AnonymousUserUpdateOne) SetNillableScreenResolution(v *string) *AnonymousUserUpdateOne {
	if v != nil {
		_u.SetScreenResolution(*v)
	}
	return _u
}

// ClearScreenResolution clears the value of the "screen_resolution" field.
func (_u *AnonymousUserUpdateOne) ClearScreenResolution() *AnonymousUserUpdateOne {
	_u.mutation.ClearScreenResolution()
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *AnonymousUserUpdateOne) SetIsActive(v bool) *AnonymousUserUpdateOne {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *AnonymousUserUpdateOne) SetNillableIsActive(v *bool) *AnonymousUserUpdateOne {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetLastActivityAt sets the "last_activity_at" field.
func (_u *AnonymousUserUpdateOne) SetLastActivityAt(v time.Time) *AnonymousUserUpdateOne {
	_u.mutation.SetLastActivityAt(v)
	return _u
}

// SetNillableLastActivityAt sets the "last_activity_at" field if the given value is not nil.
func (_u *AnonymousUserUpdateOne) SetNillableLastActivityAt(v *time.Time) *AnonymousUserUpdateOne {
	if v != nil {
		_u.SetLastActivityAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AnonymousUserUpdateOne) SetUpdatedAt(v time.Time) *AnonymousUserUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddConfigIDs adds the "configs" edge to the UserConfig entity by IDs.
func (_u *AnonymousUserUpdateOne) AddConfigIDs(ids ...uuid.UUID) *AnonymousUserUpdateOne {
	_u.mutation.AddConfigIDs(ids...)
	return _u
}

// AddConfigs adds the "configs" edges to the UserConfig entity.
func (_u *AnonymousUserUpdateOne) AddConfigs(v ...*UserConfig) *AnonymousUserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddConfigIDs(ids...)
}

// AddExportRecordIDs adds the "export_records" edge to the ExportRecord entity by IDs.
func (_u *AnonymousUserUpdateOne) AddExportRecordIDs(ids ...uuid.UUID) *AnonymousUserUpdateOne {
	_u.mutation.AddExportRecordIDs(ids...)
	return _u
}

// AddExportRecords adds the "export_records" edges to the ExportRecord entity.
func (_u *AnonymousUserUpdateOne) AddExportRecords(v ...*ExportRecord) *AnonymousUserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddExportRecordIDs(ids...)
}

// Mutation returns the AnonymousUserMutation object of the builder.
func (_u *AnonymousUserUpdateOne) Mutation() *AnonymousUserMutation {
	return _u.mutation
}

// ClearConfigs clears all "configs" edges to the UserConfig entity.
func (_u *AnonymousUserUpdateOne) ClearConfigs() *AnonymousUserUpdateOne {
	_u.mutation.ClearConfigs()
	return _u
}

// RemoveConfigIDs removes the "configs" edge to UserConfig entities by IDs.
func (_u *AnonymousUserUpdateOne) RemoveConfigIDs(ids ...uuid.UUID) *AnonymousUserUpdateOne {
	_u.mutation.RemoveConfigIDs(ids...)
	return _u
}

// RemoveConfigs removes "configs" edges to UserConfig entities.
func (_u *AnonymousUserUpdateOne) RemoveConfigs(v ...*UserConfig) *AnonymousUserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveConfigIDs(ids...)
}

// ClearExportRecords clears all "export_records" edges to the ExportRecord entity.
func (_u *AnonymousUserUpdateOne) ClearExportRecords() *AnonymousUserUpdateOne {
	_u.mutation.ClearExportRecords()
	return _u
}

// RemoveExportRecordIDs removes the "export_records" edge to ExportRecord entities by IDs.
func (_u *AnonymousUserUpdateOne) RemoveExportRecordIDs(ids ...uuid.UUID) *AnonymousUserUpdateOne {
	_u.mutation.RemoveExportRecordIDs(ids...)
	return _u
}

// RemoveExportRecords removes "export_records" edges to ExportRecord entities.
func (_u *AnonymousUserUpdateOne) RemoveExportRecords(v ...*ExportRecord) *AnonymousUserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveExportRecordIDs(ids...)
}

// Where appends a list predicates to the AnonymousUserUpdate builder.
func (_u *AnonymousUserUpdateOne) Where(ps ...predicate.AnonymousUser) *AnonymousUserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AnonymousUserUpdateOne) Select(field string, fields ...string) *AnonymousUserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated AnonymousUser entity.
func (_u *AnonymousUserUpdateOne) Save(ctx context.Context) (*AnonymousUser, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AnonymousUserUpdateOne) SaveX(ctx context.Context) *AnonymousUser {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AnonymousUserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AnonymousUserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AnonymousUserUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := anonymoususer.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AnonymousUserUpdateOne) check() error {
	if v, ok := _u.mutation.BrowserFingerprint(); ok {
		if err := anonymoususer.BrowserFingerprintValidator(v); err != nil {
			return &ValidationError{Name: "browser_fingerprint", err: fmt.Errorf(`ent: validator failed for field "AnonymousUser.browser_fingerprint": %w`, err)}
		}
	}
	return nil
}

func (_u *AnonymousUserUpdateOne) sqlSave(ctx context.Context) (_node *AnonymousUser, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(anonymoususer.Table, anonymoususer.Columns, sqlgraph.NewFieldSpec(anonymoususer.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AnonymousUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, anonymoususer.FieldID)
		for _, f := range fields {
			if !anonymoususer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != anonymoususer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.BrowserFingerprint(); ok {
		_spec.SetField(anonymoususer.FieldBrowserFingerprint, field.TypeString, value)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(anonymoususer.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(anonymoususer.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.IPAddress(); ok {
		_spec.SetField(anonymoususer.FieldIPAddress, field.TypeString, value)
	}
	if _u.mutation.IPAddressCleared() {
		_spec.ClearField(anonymoususer.FieldIPAddress, field.TypeString)
	}
	if value, ok := _u.mutation.Timezone(); ok {
		_spec.SetField(anonymoususer.FieldTimezone, field.TypeString, value)
	}
	if _u.mutation.TimezoneCleared() {
		_spec.ClearField(anonymoususer.FieldTimezone, field.TypeString)
	}
	if value, ok := _u.mutation.Language(); ok {
		_spec.SetField(anonymoususer.FieldLanguage, field.TypeString, value)
	}
	if _u.mutation.LanguageCleared() {
		_spec.ClearField(anonymoususer.FieldLanguage, field.TypeString)
	}
	if value, ok := _u.mutation.ScreenResolution(); ok {
		_spec.SetField(anonymoususer.FieldScreenResolution, field.TypeString, value)
	}
	if _u.mutation.ScreenResolutionCleared() {
		_spec.ClearField(anonymoususer.FieldScreenResolution, field.TypeString)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(anonymoususer.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.LastActivityAt(); ok {
		_spec.SetField(anonymoususer.FieldLastActivityAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(anonymoususer.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   anonymoususer.ConfigsTable,
			Columns: []string{anonymoususer.ConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconfig.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedConfigsIDs(); len(nodes) > 0 && !_u.mutation.ConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   anonymoususer.ConfigsTable,
			Columns: []string{anonymoususer.ConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconfig.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   anonymoususer.ConfigsTable,
			Columns: []string{anonymoususer.ConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconfig.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ExportRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   anonymoususer.ExportRecordsTable,
			Columns: []string{anonymoususer.ExportRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exportrecord.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedExportRecordsIDs(); len(nodes) > 0 && !_u.mutation.ExportRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   anonymoususer.ExportRecordsTable,
			Columns: []string{anonymoususer.ExportRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exportrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ExportRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   anonymoususer.ExportRecordsTable,
			Columns: []string{anonymoususer.ExportRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exportrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AnonymousUser{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{anonymoususer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
