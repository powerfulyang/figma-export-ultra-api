// Code generated by ent, DO NOT EDIT.

package confighistory

import (
	"fiber-ent-apollo-pg/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldLTE(FieldID, id))
}

// ChangeType applies equality check predicate on the "change_type" field. It's identical to ChangeTypeEQ.
func ChangeType(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldEQ(FieldChangeType, v))
}

// ChangeDescription applies equality check predicate on the "change_description" field. It's identical to ChangeDescriptionEQ.
func ChangeDescription(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldEQ(FieldChangeDescription, v))
}

// OldVersion applies equality check predicate on the "old_version" field. It's identical to OldVersionEQ.
func OldVersion(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldEQ(FieldOldVersion, v))
}

// NewVersion applies equality check predicate on the "new_version" field. It's identical to NewVersionEQ.
func NewVersion(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldEQ(FieldNewVersion, v))
}

// IPAddress applies equality check predicate on the "ip_address" field. It's identical to IPAddressEQ.
func IPAddress(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldEQ(FieldIPAddress, v))
}

// UserAgent applies equality check predicate on the "user_agent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldEQ(FieldUserAgent, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// OldConfigDataIsNil applies the IsNil predicate on the "old_config_data" field.
func OldConfigDataIsNil() predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldIsNull(FieldOldConfigData))
}

// OldConfigDataNotNil applies the NotNil predicate on the "old_config_data" field.
func OldConfigDataNotNil() predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldNotNull(FieldOldConfigData))
}

// ChangeTypeEQ applies the EQ predicate on the "change_type" field.
func ChangeTypeEQ(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldEQ(FieldChangeType, v))
}

// ChangeTypeNEQ applies the NEQ predicate on the "change_type" field.
func ChangeTypeNEQ(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldNEQ(FieldChangeType, v))
}

// ChangeTypeIn applies the In predicate on the "change_type" field.
func ChangeTypeIn(vs ...string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldIn(FieldChangeType, vs...))
}

// ChangeTypeNotIn applies the NotIn predicate on the "change_type" field.
func ChangeTypeNotIn(vs ...string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldNotIn(FieldChangeType, vs...))
}

// ChangeTypeGT applies the GT predicate on the "change_type" field.
func ChangeTypeGT(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldGT(FieldChangeType, v))
}

// ChangeTypeGTE applies the GTE predicate on the "change_type" field.
func ChangeTypeGTE(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldGTE(FieldChangeType, v))
}

// ChangeTypeLT applies the LT predicate on the "change_type" field.
func ChangeTypeLT(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldLT(FieldChangeType, v))
}

// ChangeTypeLTE applies the LTE predicate on the "change_type" field.
func ChangeTypeLTE(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldLTE(FieldChangeType, v))
}

// ChangeTypeContains applies the Contains predicate on the "change_type" field.
func ChangeTypeContains(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldContains(FieldChangeType, v))
}

// ChangeTypeHasPrefix applies the HasPrefix predicate on the "change_type" field.
func ChangeTypeHasPrefix(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldHasPrefix(FieldChangeType, v))
}

// ChangeTypeHasSuffix applies the HasSuffix predicate on the "change_type" field.
func ChangeTypeHasSuffix(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldHasSuffix(FieldChangeType, v))
}

// ChangeTypeEqualFold applies the EqualFold predicate on the "change_type" field.
func ChangeTypeEqualFold(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldEqualFold(FieldChangeType, v))
}

// ChangeTypeContainsFold applies the ContainsFold predicate on the "change_type" field.
func ChangeTypeContainsFold(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldContainsFold(FieldChangeType, v))
}

// ChangeDescriptionEQ applies the EQ predicate on the "change_description" field.
func ChangeDescriptionEQ(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldEQ(FieldChangeDescription, v))
}

// ChangeDescriptionNEQ applies the NEQ predicate on the "change_description" field.
func ChangeDescriptionNEQ(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldNEQ(FieldChangeDescription, v))
}

// ChangeDescriptionIn applies the In predicate on the "change_description" field.
func ChangeDescriptionIn(vs ...string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldIn(FieldChangeDescription, vs...))
}

// ChangeDescriptionNotIn applies the NotIn predicate on the "change_description" field.
func ChangeDescriptionNotIn(vs ...string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldNotIn(FieldChangeDescription, vs...))
}

// ChangeDescriptionGT applies the GT predicate on the "change_description" field.
func ChangeDescriptionGT(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldGT(FieldChangeDescription, v))
}

// ChangeDescriptionGTE applies the GTE predicate on the "change_description" field.
func ChangeDescriptionGTE(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldGTE(FieldChangeDescription, v))
}

// ChangeDescriptionLT applies the LT predicate on the "change_description" field.
func ChangeDescriptionLT(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldLT(FieldChangeDescription, v))
}

// ChangeDescriptionLTE applies the LTE predicate on the "change_description" field.
func ChangeDescriptionLTE(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldLTE(FieldChangeDescription, v))
}

// ChangeDescriptionContains applies the Contains predicate on the "change_description" field.
func ChangeDescriptionContains(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldContains(FieldChangeDescription, v))
}

// ChangeDescriptionHasPrefix applies the HasPrefix predicate on the "change_description" field.
func ChangeDescriptionHasPrefix(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldHasPrefix(FieldChangeDescription, v))
}

// ChangeDescriptionHasSuffix applies the HasSuffix predicate on the "change_description" field.
func ChangeDescriptionHasSuffix(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldHasSuffix(FieldChangeDescription, v))
}

// ChangeDescriptionIsNil applies the IsNil predicate on the "change_description" field.
func ChangeDescriptionIsNil() predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldIsNull(FieldChangeDescription))
}

// ChangeDescriptionNotNil applies the NotNil predicate on the "change_description" field.
func ChangeDescriptionNotNil() predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldNotNull(FieldChangeDescription))
}

// ChangeDescriptionEqualFold applies the EqualFold predicate on the "change_description" field.
func ChangeDescriptionEqualFold(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldEqualFold(FieldChangeDescription, v))
}

// ChangeDescriptionContainsFold applies the ContainsFold predicate on the "change_description" field.
func ChangeDescriptionContainsFold(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldContainsFold(FieldChangeDescription, v))
}

// OldVersionEQ applies the EQ predicate on the "old_version" field.
func OldVersionEQ(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldEQ(FieldOldVersion, v))
}

// OldVersionNEQ applies the NEQ predicate on the "old_version" field.
func OldVersionNEQ(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldNEQ(FieldOldVersion, v))
}

// OldVersionIn applies the In predicate on the "old_version" field.
func OldVersionIn(vs ...string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldIn(FieldOldVersion, vs...))
}

// OldVersionNotIn applies the NotIn predicate on the "old_version" field.
func OldVersionNotIn(vs ...string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldNotIn(FieldOldVersion, vs...))
}

// OldVersionGT applies the GT predicate on the "old_version" field.
func OldVersionGT(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldGT(FieldOldVersion, v))
}

// OldVersionGTE applies the GTE predicate on the "old_version" field.
func OldVersionGTE(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldGTE(FieldOldVersion, v))
}

// OldVersionLT applies the LT predicate on the "old_version" field.
func OldVersionLT(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldLT(FieldOldVersion, v))
}

// OldVersionLTE applies the LTE predicate on the "old_version" field.
func OldVersionLTE(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldLTE(FieldOldVersion, v))
}

// OldVersionContains applies the Contains predicate on the "old_version" field.
func OldVersionContains(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldContains(FieldOldVersion, v))
}

// OldVersionHasPrefix applies the HasPrefix predicate on the "old_version" field.
func OldVersionHasPrefix(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldHasPrefix(FieldOldVersion, v))
}

// OldVersionHasSuffix applies the HasSuffix predicate on the "old_version" field.
func OldVersionHasSuffix(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldHasSuffix(FieldOldVersion, v))
}

// OldVersionIsNil applies the IsNil predicate on the "old_version" field.
func OldVersionIsNil() predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldIsNull(FieldOldVersion))
}

// OldVersionNotNil applies the NotNil predicate on the "old_version" field.
func OldVersionNotNil() predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldNotNull(FieldOldVersion))
}

// OldVersionEqualFold applies the EqualFold predicate on the "old_version" field.
func OldVersionEqualFold(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldEqualFold(FieldOldVersion, v))
}

// OldVersionContainsFold applies the ContainsFold predicate on the "old_version" field.
func OldVersionContainsFold(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldContainsFold(FieldOldVersion, v))
}

// NewVersionEQ applies the EQ predicate on the "new_version" field.
func NewVersionEQ(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldEQ(FieldNewVersion, v))
}

// NewVersionNEQ applies the NEQ predicate on the "new_version" field.
func NewVersionNEQ(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldNEQ(FieldNewVersion, v))
}

// NewVersionIn applies the In predicate on the "new_version" field.
func NewVersionIn(vs ...string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldIn(FieldNewVersion, vs...))
}

// NewVersionNotIn applies the NotIn predicate on the "new_version" field.
func NewVersionNotIn(vs ...string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldNotIn(FieldNewVersion, vs...))
}

// NewVersionGT applies the GT predicate on the "new_version" field.
func NewVersionGT(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldGT(FieldNewVersion, v))
}

// NewVersionGTE applies the GTE predicate on the "new_version" field.
func NewVersionGTE(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldGTE(FieldNewVersion, v))
}

// NewVersionLT applies the LT predicate on the "new_version" field.
func NewVersionLT(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldLT(FieldNewVersion, v))
}

// NewVersionLTE applies the LTE predicate on the "new_version" field.
func NewVersionLTE(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldLTE(FieldNewVersion, v))
}

// NewVersionContains applies the Contains predicate on the "new_version" field.
func NewVersionContains(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldContains(FieldNewVersion, v))
}

// NewVersionHasPrefix applies the HasPrefix predicate on the "new_version" field.
func NewVersionHasPrefix(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldHasPrefix(FieldNewVersion, v))
}

// NewVersionHasSuffix applies the HasSuffix predicate on the "new_version" field.
func NewVersionHasSuffix(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldHasSuffix(FieldNewVersion, v))
}

// NewVersionEqualFold applies the EqualFold predicate on the "new_version" field.
func NewVersionEqualFold(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldEqualFold(FieldNewVersion, v))
}

// NewVersionContainsFold applies the ContainsFold predicate on the "new_version" field.
func NewVersionContainsFold(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldContainsFold(FieldNewVersion, v))
}

// IPAddressEQ applies the EQ predicate on the "ip_address" field.
func IPAddressEQ(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldEQ(FieldIPAddress, v))
}

// IPAddressNEQ applies the NEQ predicate on the "ip_address" field.
func IPAddressNEQ(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldNEQ(FieldIPAddress, v))
}

// IPAddressIn applies the In predicate on the "ip_address" field.
func IPAddressIn(vs ...string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldIn(FieldIPAddress, vs...))
}

// IPAddressNotIn applies the NotIn predicate on the "ip_address" field.
func IPAddressNotIn(vs ...string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldNotIn(FieldIPAddress, vs...))
}

// IPAddressGT applies the GT predicate on the "ip_address" field.
func IPAddressGT(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldGT(FieldIPAddress, v))
}

// IPAddressGTE applies the GTE predicate on the "ip_address" field.
func IPAddressGTE(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldGTE(FieldIPAddress, v))
}

// IPAddressLT applies the LT predicate on the "ip_address" field.
func IPAddressLT(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldLT(FieldIPAddress, v))
}

// IPAddressLTE applies the LTE predicate on the "ip_address" field.
func IPAddressLTE(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldLTE(FieldIPAddress, v))
}

// IPAddressContains applies the Contains predicate on the "ip_address" field.
func IPAddressContains(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldContains(FieldIPAddress, v))
}

// IPAddressHasPrefix applies the HasPrefix predicate on the "ip_address" field.
func IPAddressHasPrefix(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldHasPrefix(FieldIPAddress, v))
}

// IPAddressHasSuffix applies the HasSuffix predicate on the "ip_address" field.
func IPAddressHasSuffix(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldHasSuffix(FieldIPAddress, v))
}

// IPAddressIsNil applies the IsNil predicate on the "ip_address" field.
func IPAddressIsNil() predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldIsNull(FieldIPAddress))
}

// IPAddressNotNil applies the NotNil predicate on the "ip_address" field.
func IPAddressNotNil() predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldNotNull(FieldIPAddress))
}

// IPAddressEqualFold applies the EqualFold predicate on the "ip_address" field.
func IPAddressEqualFold(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldEqualFold(FieldIPAddress, v))
}

// IPAddressContainsFold applies the ContainsFold predicate on the "ip_address" field.
func IPAddressContainsFold(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldContainsFold(FieldIPAddress, v))
}

// UserAgentEQ applies the EQ predicate on the "user_agent" field.
func UserAgentEQ(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldEQ(FieldUserAgent, v))
}

// UserAgentNEQ applies the NEQ predicate on the "user_agent" field.
func UserAgentNEQ(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldNEQ(FieldUserAgent, v))
}

// UserAgentIn applies the In predicate on the "user_agent" field.
func UserAgentIn(vs ...string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldIn(FieldUserAgent, vs...))
}

// UserAgentNotIn applies the NotIn predicate on the "user_agent" field.
func UserAgentNotIn(vs ...string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldNotIn(FieldUserAgent, vs...))
}

// UserAgentGT applies the GT predicate on the "user_agent" field.
func UserAgentGT(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldGT(FieldUserAgent, v))
}

// UserAgentGTE applies the GTE predicate on the "user_agent" field.
func UserAgentGTE(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldGTE(FieldUserAgent, v))
}

// UserAgentLT applies the LT predicate on the "user_agent" field.
func UserAgentLT(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldLT(FieldUserAgent, v))
}

// UserAgentLTE applies the LTE predicate on the "user_agent" field.
func UserAgentLTE(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldLTE(FieldUserAgent, v))
}

// UserAgentContains applies the Contains predicate on the "user_agent" field.
func UserAgentContains(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldContains(FieldUserAgent, v))
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "user_agent" field.
func UserAgentHasPrefix(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldHasPrefix(FieldUserAgent, v))
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "user_agent" field.
func UserAgentHasSuffix(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldHasSuffix(FieldUserAgent, v))
}

// UserAgentIsNil applies the IsNil predicate on the "user_agent" field.
func UserAgentIsNil() predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldIsNull(FieldUserAgent))
}

// UserAgentNotNil applies the NotNil predicate on the "user_agent" field.
func UserAgentNotNil() predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldNotNull(FieldUserAgent))
}

// UserAgentEqualFold applies the EqualFold predicate on the "user_agent" field.
func UserAgentEqualFold(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldEqualFold(FieldUserAgent, v))
}

// UserAgentContainsFold applies the ContainsFold predicate on the "user_agent" field.
func UserAgentContainsFold(v string) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldContainsFold(FieldUserAgent, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.FieldLTE(FieldCreatedAt, v))
}

// HasConfig applies the HasEdge predicate on the "config" edge.
func HasConfig() predicate.ConfigHistory {
	return predicate.ConfigHistory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ConfigTable, ConfigColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConfigWith applies the HasEdge predicate on the "config" edge with a given conditions (other predicates).
func HasConfigWith(preds ...predicate.UserConfig) predicate.ConfigHistory {
	return predicate.ConfigHistory(func(s *sql.Selector) {
		step := newConfigStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ConfigHistory) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ConfigHistory) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ConfigHistory) predicate.ConfigHistory {
	return predicate.ConfigHistory(sql.NotPredicates(p))
}
