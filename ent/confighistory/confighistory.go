// Code generated by ent, DO NOT EDIT.

package confighistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the confighistory type in the database.
	Label = "config_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOldConfigData holds the string denoting the old_config_data field in the database.
	FieldOldConfigData = "old_config_data"
	// FieldNewConfigData holds the string denoting the new_config_data field in the database.
	FieldNewConfigData = "new_config_data"
	// FieldChangeType holds the string denoting the change_type field in the database.
	FieldChangeType = "change_type"
	// FieldChangeDescription holds the string denoting the change_description field in the database.
	FieldChangeDescription = "change_description"
	// FieldOldVersion holds the string denoting the old_version field in the database.
	FieldOldVersion = "old_version"
	// FieldNewVersion holds the string denoting the new_version field in the database.
	FieldNewVersion = "new_version"
	// FieldIPAddress holds the string denoting the ip_address field in the database.
	FieldIPAddress = "ip_address"
	// FieldUserAgent holds the string denoting the user_agent field in the database.
	FieldUserAgent = "user_agent"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeConfig holds the string denoting the config edge name in mutations.
	EdgeConfig = "config"
	// Table holds the table name of the confighistory in the database.
	Table = "config_histories"
	// ConfigTable is the table that holds the config relation/edge.
	ConfigTable = "config_histories"
	// ConfigInverseTable is the table name for the UserConfig entity.
	// It exists in this package in order to avoid circular dependency with the "userconfig" package.
	ConfigInverseTable = "user_configs"
	// ConfigColumn is the table column denoting the config relation/edge.
	ConfigColumn = "user_config_history"
)

// Columns holds all SQL columns for confighistory fields.
var Columns = []string{
	FieldID,
	FieldOldConfigData,
	FieldNewConfigData,
	FieldChangeType,
	FieldChangeDescription,
	FieldOldVersion,
	FieldNewVersion,
	FieldIPAddress,
	FieldUserAgent,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "config_histories"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_config_history",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// ChangeTypeValidator is a validator for the "change_type" field. It is called by the builders before save.
	ChangeTypeValidator func(string) error
	// NewVersionValidator is a validator for the "new_version" field. It is called by the builders before save.
	NewVersionValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ConfigHistory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByChangeType orders the results by the change_type field.
func ByChangeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChangeType, opts...).ToFunc()
}

// ByChangeDescription orders the results by the change_description field.
func ByChangeDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChangeDescription, opts...).ToFunc()
}

// ByOldVersion orders the results by the old_version field.
func ByOldVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOldVersion, opts...).ToFunc()
}

// ByNewVersion orders the results by the new_version field.
func ByNewVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNewVersion, opts...).ToFunc()
}

// ByIPAddress orders the results by the ip_address field.
func ByIPAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIPAddress, opts...).ToFunc()
}

// ByUserAgent orders the results by the user_agent field.
func ByUserAgent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserAgent, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByConfigField orders the results by config field.
func ByConfigField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConfigStep(), sql.OrderByField(field, opts...))
	}
}
func newConfigStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConfigInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ConfigTable, ConfigColumn),
	)
}
